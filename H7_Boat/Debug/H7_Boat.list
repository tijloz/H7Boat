
H7_Boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000000  0800b3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000870  200001f8  0800b5d8  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a68  0800b5d8  00020a68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002809e  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003ac1  00000000  00000000  000482c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017b0  00000000  00000000  0004bd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001648  00000000  00000000  0004d538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bbaf  00000000  00000000  0004eb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000929d  00000000  00000000  0005a72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000639cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000068d0  00000000  00000000  00063a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200001f8 	.word	0x200001f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b240 	.word	0x0800b240

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200001fc 	.word	0x200001fc
 80002d4:	0800b240 	.word	0x0800b240

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f001 fd7f 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f80a 	bl	800060c <HAL_InitTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e002      	b.n	8000608 <HAL_Init+0x20>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000602:	f00a f89f 	bl	800a744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd93 	bl	8002156 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f001 fd5d 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000020 	.word	0x20000020
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	20000214 	.word	0x20000214

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000214 	.word	0x20000214

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_Delay+0x40>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad2      	subs	r2, r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3f7      	bcc.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  __IO uint32_t wait_loop_index = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e20e      	b.n	8000b2e <HAL_ADC_Init+0x43e>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.BoostMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <HAL_ADC_Init+0x42>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f00a f82a 	bl	800a778 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d007      	beq.n	8000750 <HAL_ADC_Init+0x60>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	6892      	ldr	r2, [r2, #8]
 800074a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800074e:	609a      	str	r2, [r3, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d119      	bne.n	8000792 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	6892      	ldr	r2, [r2, #8]
 8000768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800076c:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800076e:	4b67      	ldr	r3, [pc, #412]	; (800090c <HAL_ADC_Init+0x21c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a67      	ldr	r2, [pc, #412]	; (8000910 <HAL_ADC_Init+0x220>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	0cda      	lsrs	r2, r3, #19
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000784:	e002      	b.n	800078c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Init+0x96>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10e      	bne.n	80007be <HAL_ADC_Init+0xce>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007a4:	f043 0210 	orr.w	r2, r3, #16
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b0:	f043 0201 	orr.w	r2, r3, #1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f040 81a6 	bne.w	8000b18 <HAL_ADC_Init+0x428>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f040 819e 	bne.w	8000b18 <HAL_ADC_Init+0x428>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007e0:	f043 0202 	orr.w	r2, r3, #2
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a49      	ldr	r2, [pc, #292]	; (8000914 <HAL_ADC_Init+0x224>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d004      	beq.n	80007fc <HAL_ADC_Init+0x10c>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a48      	ldr	r2, [pc, #288]	; (8000918 <HAL_ADC_Init+0x228>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d102      	bne.n	8000802 <HAL_ADC_Init+0x112>
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 80007fc:	4b47      	ldr	r3, [pc, #284]	; (800091c <HAL_ADC_Init+0x22c>)
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000800:	e001      	b.n	8000806 <HAL_ADC_Init+0x116>
    }
    else
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8000802:	4b47      	ldr	r3, [pc, #284]	; (8000920 <HAL_ADC_Init+0x230>)
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_ADC_Init+0x136>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b01      	cmp	r3, #1
 8000820:	d101      	bne.n	8000826 <HAL_ADC_Init+0x136>
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <HAL_ADC_Init+0x138>
 8000826:	2300      	movs	r3, #0
 8000828:	2b00      	cmp	r3, #0
 800082a:	f040 808e 	bne.w	800094a <HAL_ADC_Init+0x25a>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <HAL_ADC_Init+0x224>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d120      	bne.n	800087a <HAL_ADC_Init+0x18a>
 8000838:	4b37      	ldr	r3, [pc, #220]	; (8000918 <HAL_ADC_Init+0x228>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <HAL_ADC_Init+0x160>
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <HAL_ADC_Init+0x228>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b01      	cmp	r3, #1
 800084e:	d00b      	beq.n	8000868 <HAL_ADC_Init+0x178>
 8000850:	4b34      	ldr	r3, [pc, #208]	; (8000924 <HAL_ADC_Init+0x234>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	2b01      	cmp	r3, #1
 800085a:	d107      	bne.n	800086c <HAL_ADC_Init+0x17c>
 800085c:	4b31      	ldr	r3, [pc, #196]	; (8000924 <HAL_ADC_Init+0x234>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b01      	cmp	r3, #1
 8000866:	d101      	bne.n	800086c <HAL_ADC_Init+0x17c>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <HAL_ADC_Init+0x17e>
 800086c:	2300      	movs	r3, #0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	e05c      	b.n	8000934 <HAL_ADC_Init+0x244>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a26      	ldr	r2, [pc, #152]	; (8000918 <HAL_ADC_Init+0x228>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d120      	bne.n	80008c6 <HAL_ADC_Init+0x1d6>
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <HAL_ADC_Init+0x224>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <HAL_ADC_Init+0x1ac>
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_ADC_Init+0x224>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b01      	cmp	r3, #1
 800089a:	d00b      	beq.n	80008b4 <HAL_ADC_Init+0x1c4>
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_ADC_Init+0x234>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d107      	bne.n	80008b8 <HAL_ADC_Init+0x1c8>
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_ADC_Init+0x234>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <HAL_ADC_Init+0x1c8>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <HAL_ADC_Init+0x1ca>
 80008b8:	2300      	movs	r3, #0
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d120      	bne.n	8000906 <HAL_ADC_Init+0x216>
 80008c4:	e013      	b.n	80008ee <HAL_ADC_Init+0x1fe>
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_ADC_Init+0x224>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d107      	bne.n	80008e2 <HAL_ADC_Init+0x1f2>
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_ADC_Init+0x224>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d101      	bne.n	80008e2 <HAL_ADC_Init+0x1f2>
 80008de:	2301      	movs	r3, #1
 80008e0:	e000      	b.n	80008e4 <HAL_ADC_Init+0x1f4>
 80008e2:	2300      	movs	r3, #0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10b      	bne.n	8000906 <HAL_ADC_Init+0x216>
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_ADC_Init+0x228>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d116      	bne.n	8000928 <HAL_ADC_Init+0x238>
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_ADC_Init+0x228>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	2b01      	cmp	r3, #1
 8000904:	d110      	bne.n	8000928 <HAL_ADC_Init+0x238>
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <HAL_ADC_Init+0x23a>
 800090a:	bf00      	nop
 800090c:	20000020 	.word	0x20000020
 8000910:	431bde83 	.word	0x431bde83
 8000914:	40022000 	.word	0x40022000
 8000918:	40022100 	.word	0x40022100
 800091c:	40022300 	.word	0x40022300
 8000920:	58026300 	.word	0x58026300
 8000924:	58026000 	.word	0x58026000
 8000928:	2300      	movs	r3, #0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <HAL_ADC_Init+0x25a>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 8000938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	431a      	orrs	r2, r3
 8000946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000948:	609a      	str	r2, [r3, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7d5b      	ldrb	r3, [r3, #21]
 800094e:	461a      	mov	r2, r3
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	fa93 f3a3 	rbit	r3, r3
 800095c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	461a      	mov	r2, r3
                 hadc->Init.Overrun                                          |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 800096e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                       |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.Overrun                                          |
 8000974:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	7f12      	ldrb	r2, [r2, #28]
 800097a:	4611      	mov	r1, r2
 800097c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000980:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000984:	fa92 f2a2 	rbit	r2, r2
 8000988:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 800098a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098c:	fab2 f282 	clz	r2, r2
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000994:	4313      	orrs	r3, r2
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7f1b      	ldrb	r3, [r3, #28]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d111      	bne.n	80009c4 <HAL_ADC_Init+0x2d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80009aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	617b      	str	r3, [r7, #20]
  return(result);
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009c0:	4313      	orrs	r3, r2
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d00b      	beq.n	80009e4 <HAL_ADC_Init+0x2f4>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d007      	beq.n	80009e4 <HAL_ADC_Init+0x2f4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	4313      	orrs	r3, r2
 80009de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009e0:	4313      	orrs	r3, r2
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68d9      	ldr	r1, [r3, #12]
 80009ee:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <HAL_ADC_Init+0x448>)
 80009f0:	400b      	ands	r3, r1
 80009f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80009f4:	430b      	orrs	r3, r1
 80009f6:	60d3      	str	r3, [r2, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	f003 030c 	and.w	r3, r3, #12
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d166      	bne.n	8000ad4 <HAL_ADC_Init+0x3e4>
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7d1b      	ldrb	r3, [r3, #20]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	fa93 f3a3 	rbit	r3, r3
 8000a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	fab3 f383 	clz	r3, r3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	461a      	mov	r2, r3
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <HAL_ADC_Init+0x44c>)
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	60d3      	str	r3, [r2, #12]


      if (hadc->Init.OversamplingMode == ENABLE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d11a      	bne.n	8000a82 <HAL_ADC_Init+0x392>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	2b01      	cmp	r3, #1
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Leftt bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6919      	ldr	r1, [r3, #16]
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <HAL_ADC_Init+0x450>)
 8000a5e:	400b      	ands	r3, r1
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a64:	0408      	lsls	r0, r1, #16
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a6a:	4308      	orrs	r0, r1
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000a70:	4308      	orrs	r0, r1
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000a76:	4301      	orrs	r1, r0
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6113      	str	r3, [r2, #16]
 8000a80:	e007      	b.n	8000a92 <HAL_ADC_Init+0x3a2>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	6912      	ldr	r2, [r2, #16]
 8000a8c:	f022 0201 	bic.w	r2, r2, #1
 8000a90:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	6912      	ldr	r2, [r2, #16]
 8000a9c:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d108      	bne.n	8000ac4 <HAL_ADC_Init+0x3d4>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	6892      	ldr	r2, [r2, #8]
 8000abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	e007      	b.n	8000ad4 <HAL_ADC_Init+0x3e4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	6892      	ldr	r2, [r2, #8]
 8000ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ad2:	609a      	str	r2, [r3, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10c      	bne.n	8000af6 <HAL_ADC_Init+0x406>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ae6:	f022 010f 	bic.w	r1, r2, #15
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6992      	ldr	r2, [r2, #24]
 8000aee:	3a01      	subs	r2, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
 8000af4:	e007      	b.n	8000b06 <HAL_ADC_Init+0x416>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b00:	f022 020f 	bic.w	r2, r2, #15
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	f043 0201 	orr.w	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	655a      	str	r2, [r3, #84]	; 0x54
 8000b16:	e008      	b.n	8000b2a <HAL_ADC_Init+0x43a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1c:	f043 0210 	orr.w	r2, r3, #16
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */


  /* Return function status */
  return tmp_hal_status;
 8000b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3738      	adds	r7, #56	; 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	fff0c003 	.word	0xfff0c003
 8000b3c:	ffffbffc 	.word	0xffffbffc
 8000b40:	fc00f81e 	.word	0xfc00f81e

08000b44 <HAL_ADC_Start_IT>:
  *         before calling HAL_ADC_Start_IT().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8121 	bne.w	8000da2 <HAL_ADC_Start_IT+0x25e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d101      	bne.n	8000b6e <HAL_ADC_Start_IT+0x2a>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e11c      	b.n	8000da8 <HAL_ADC_Start_IT+0x264>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f001 f88a 	bl	8001c90 <ADC_Enable>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8108 	bne.w	8000d98 <HAL_ADC_Start_IT+0x254>
    {
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_ADC_Start_IT+0x5e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	f023 0206 	bic.w	r2, r3, #6
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8000ba0:	e002      	b.n	8000ba8 <HAL_ADC_Start_IT+0x64>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	659a      	str	r2, [r3, #88]	; 0x58
      }
      /* Clear HAL_ADC_STATE_READY and regular conversion results bits, set HAL_ADC_STATE_REG_BUSY bit */
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_ADC_Start_IT+0x26c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - by default if ADC is Master or Independent or if multimode feature is not available
        - if MultiMode setting is set to independent mode (no dual regular or injected conversions are configured) */
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a7d      	ldr	r2, [pc, #500]	; (8000db4 <HAL_ADC_Start_IT+0x270>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00a      	beq.n	8000bd8 <HAL_ADC_Start_IT+0x94>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a7c      	ldr	r2, [pc, #496]	; (8000db8 <HAL_ADC_Start_IT+0x274>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d005      	beq.n	8000bd8 <HAL_ADC_Start_IT+0x94>
 8000bcc:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <HAL_ADC_Start_IT+0x278>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 031f 	and.w	r3, r3, #31
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <HAL_ADC_Start_IT+0xa0>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	221c      	movs	r2, #28
 8000bea:	601a      	str	r2, [r3, #0]

      /* By default, disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	6852      	ldr	r2, [r2, #4]
 8000bf6:	f022 021c 	bic.w	r2, r2, #28
 8000bfa:	605a      	str	r2, [r3, #4]

      /* Enable required interruptions */
      switch(hadc->Init.EOCSelection)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d108      	bne.n	8000c16 <HAL_ADC_Start_IT+0xd2>
      {
        case ADC_EOC_SEQ_CONV:
           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	6852      	ldr	r2, [r2, #4]
 8000c0e:	f042 0208 	orr.w	r2, r2, #8
 8000c12:	605a      	str	r2, [r3, #4]
          break;
 8000c14:	e008      	b.n	8000c28 <HAL_ADC_Start_IT+0xe4>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	6852      	ldr	r2, [r2, #4]
 8000c20:	f042 0204 	orr.w	r2, r2, #4
 8000c24:	605a      	str	r2, [r3, #4]
          break;
 8000c26:	bf00      	nop
      }

      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d107      	bne.n	8000c40 <HAL_ADC_Start_IT+0xfc>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	6852      	ldr	r2, [r2, #4]
 8000c3a:	f042 0210 	orr.w	r2, r2, #16
 8000c3e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)   )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a5b      	ldr	r2, [pc, #364]	; (8000db4 <HAL_ADC_Start_IT+0x270>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d016      	beq.n	8000c78 <HAL_ADC_Start_IT+0x134>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a5c      	ldr	r2, [pc, #368]	; (8000dc0 <HAL_ADC_Start_IT+0x27c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d011      	beq.n	8000c78 <HAL_ADC_Start_IT+0x134>
 8000c54:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <HAL_ADC_Start_IT+0x278>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00b      	beq.n	8000c78 <HAL_ADC_Start_IT+0x134>
 8000c60:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <HAL_ADC_Start_IT+0x278>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 031f 	and.w	r3, r3, #31
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d005      	beq.n	8000c78 <HAL_ADC_Start_IT+0x134>
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <HAL_ADC_Start_IT+0x278>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	d141      	bne.n	8000cfc <HAL_ADC_Start_IT+0x1b8>
      {
        /* Multimode feature is not available or ADC Instance is Independent or Master,
           or is not Slave ADC with dual regular conversions enabled.
           Then set HAL_ADC_STATE_INJ_BUSY and reset HAL_ADC_STATE_INJ_EOC if JAUTO is set. */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d02d      	beq.n	8000ce2 <HAL_ADC_Start_IT+0x19e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch(hadc->Init.EOCSelection)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d110      	bne.n	8000cc0 <HAL_ADC_Start_IT+0x17c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	6852      	ldr	r2, [r2, #4]
 8000ca8:	f022 0220 	bic.w	r2, r2, #32
 8000cac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	6852      	ldr	r2, [r2, #4]
 8000cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cbc:	605a      	str	r2, [r3, #4]
              break;
 8000cbe:	e010      	b.n	8000ce2 <HAL_ADC_Start_IT+0x19e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	6852      	ldr	r2, [r2, #4]
 8000cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	6852      	ldr	r2, [r2, #4]
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	605a      	str	r2, [r3, #4]
              break;
 8000ce0:	bf00      	nop
          }
        } /*  if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET) */
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        /* Start ADC */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6892      	ldr	r2, [r2, #8]
 8000cf4:	f042 0204 	orr.w	r2, r2, #4
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	e054      	b.n	8000da6 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* hadc is the handle of a Slave ADC with dual regular conversions
           enabled. Therefore, ADC_CR_ADSTART is NOT set */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <HAL_ADC_Start_IT+0x270>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d004      	beq.n	8000d1c <HAL_ADC_Start_IT+0x1d8>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <HAL_ADC_Start_IT+0x27c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d102      	bne.n	8000d22 <HAL_ADC_Start_IT+0x1de>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	e000      	b.n	8000d24 <HAL_ADC_Start_IT+0x1e0>
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_ADC_Start_IT+0x270>)
 8000d24:	60bb      	str	r3, [r7, #8]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d02d      	beq.n	8000d8e <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch(hadc->Init.EOCSelection)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d110      	bne.n	8000d6c <HAL_ADC_Start_IT+0x228>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	6852      	ldr	r2, [r2, #4]
 8000d54:	f022 0220 	bic.w	r2, r2, #32
 8000d58:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6812      	ldr	r2, [r2, #0]
 8000d62:	6852      	ldr	r2, [r2, #4]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d68:	605a      	str	r2, [r3, #4]
              break;
 8000d6a:	e010      	b.n	8000d8e <HAL_ADC_Start_IT+0x24a>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	6852      	ldr	r2, [r2, #4]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	6812      	ldr	r2, [r2, #0]
 8000d84:	6852      	ldr	r2, [r2, #4]
 8000d86:	f042 0220 	orr.w	r2, r2, #32
 8000d8a:	605a      	str	r2, [r3, #4]
              break;
 8000d8c:	bf00      	nop
          }
        }  /* if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET) */
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000d96:	e006      	b.n	8000da6 <HAL_ADC_Start_IT+0x262>
      } /*  if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)   ) */
    }  /*  if (tmp_hal_status == HAL_OK) */
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000da0:	e001      	b.n	8000da6 <HAL_ADC_Start_IT+0x262>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000da2:	2302      	movs	r3, #2
 8000da4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return tmp_hal_status;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	fffff0fe 	.word	0xfffff0fe
 8000db4:	40022000 	.word	0x40022000
 8000db8:	40022100 	.word	0x40022100
 8000dbc:	40022300 	.word	0x40022300
 8000dc0:	58026000 	.word	0x58026000

08000dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0; /* flag set if overrun occurrence has to be considered as an error */
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_TypeDef        *tmpADC_Master;
  uint32_t tmp_isr      = hadc->Instance->ISR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ier      = hadc->Instance->IER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr     = 0x0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_cfgr_jqm = 0x0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));


  /* ====== Check End of Sampling flag for regular group ===== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d017      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x5e>
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d012      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* End Of Sampling callback */
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 ffbb 	bl	8001dac <HAL_ADCEx_EndOfSamplingCallback>

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check End of Conversion or Sequence flags for regular group ===== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d004      	beq.n	8000e52 <HAL_ADC_IRQHandler+0x72>
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10b      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x8a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 808d 	beq.w	8000f78 <HAL_ADC_IRQHandler+0x198>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 8087 	beq.w	8000f78 <HAL_ADC_IRQHandler+0x198>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <HAL_ADC_IRQHandler+0xa2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d16c      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x18a>
    {
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a7e      	ldr	r2, [pc, #504]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d016      	beq.n	8000ec8 <HAL_ADC_IRQHandler+0xe8>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7d      	ldr	r2, [pc, #500]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d011      	beq.n	8000ec8 <HAL_ADC_IRQHandler+0xe8>
 8000ea4:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_ADC_IRQHandler+0xe8>
 8000eb0:	4b79      	ldr	r3, [pc, #484]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d005      	beq.n	8000ec8 <HAL_ADC_IRQHandler+0xe8>
 8000ebc:	4b76      	ldr	r3, [pc, #472]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d104      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0xf2>
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	e011      	b.n	8000ef6 <HAL_ADC_IRQHandler+0x116>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d004      	beq.n	8000ee6 <HAL_ADC_IRQHandler+0x106>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a6c      	ldr	r2, [pc, #432]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_IRQHandler+0x10c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e000      	b.n	8000eee <HAL_ADC_IRQHandler+0x10e>
 8000eec:	4b68      	ldr	r3, [pc, #416]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8000eee:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61fb      	str	r3, [r7, #28]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d134      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x18a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d12d      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x18a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d11a      	bne.n	8000f52 <HAL_ADC_IRQHandler+0x172>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: if Overrun interrupt was enabled with EOC or EOS interrupt */
            /* in HAL_Start_IT(), it isn't disabled here because it can be used */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	6852      	ldr	r2, [r2, #4]
 8000f26:	f022 020c 	bic.w	r2, r2, #12
 8000f2a:	605a      	str	r2, [r3, #4]
            /* Clear HAL_ADC_STATE_REG_BUSY bit */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
            /* If no injected conversion on-going, set HAL_ADC_STATE_READY bit */
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d112      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x18a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
 8000f50:	e00b      	b.n	8000f6a <HAL_ADC_IRQHandler+0x18a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f56:	f043 0210 	orr.w	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note:  HAL_ADC_ConvCpltCallback can resort to
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) or
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
    HAL_ADC_ConvCpltCallback(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f008 fa40 	bl	80093f0 <HAL_ADC_ConvCpltCallback>


    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	220c      	movs	r2, #12
 8000f76:	601a      	str	r2, [r3, #0]
  }


  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <HAL_ADC_IRQHandler+0x1ac>
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1c4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80d5 	beq.w	8001142 <HAL_ADC_IRQHandler+0x362>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80cf 	beq.w	8001142 <HAL_ADC_IRQHandler+0x362>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
        - injected conversions are software-triggered when injected queue management is disabled
        OR
        - auto-injection is enabled, continuous mode is disabled (CONT = 0)
          and regular conversions are software-triggered */
          /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	2b40      	cmp	r3, #64	; 0x40
 8000fc8:	f040 80b4 	bne.w	8001134 <HAL_ADC_IRQHandler+0x354>
    {

      /* First, retrieve proper registers to check */
      /* 1a. Are injected conversions that of a dual Slave ? */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEINJECTED_SLAVE(hadc))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d016      	beq.n	8001004 <HAL_ADC_IRQHandler+0x224>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d011      	beq.n	8001004 <HAL_ADC_IRQHandler+0x224>
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_ADC_IRQHandler+0x224>
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2b06      	cmp	r3, #6
 8000ff6:	d005      	beq.n	8001004 <HAL_ADC_IRQHandler+0x224>
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	2b07      	cmp	r3, #7
 8001002:	d104      	bne.n	800100e <HAL_ADC_IRQHandler+0x22e>
      {
        /* hadc is not the handle of a Slave ADC with dual injected conversions enabled:
           check JQM bit directly in ADC CFGR register */
        tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	e011      	b.n	8001032 <HAL_ADC_IRQHandler+0x252>
      }
      else
      {
        /* hadc is the handle of a Slave ADC with dual injected conversions enabled:
           need to check JQM bit of Master ADC CFGR register */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d004      	beq.n	8001022 <HAL_ADC_IRQHandler+0x242>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d102      	bne.n	8001028 <HAL_ADC_IRQHandler+0x248>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	e000      	b.n	800102a <HAL_ADC_IRQHandler+0x24a>
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 800102a:	60fb      	str	r3, [r7, #12]
        tmp_cfgr_jqm = READ_REG(tmpADC_Master->CFGR);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
      }
      /* 1b. Is hadc the handle of a Slave ADC with regular conversions enabled? */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d016      	beq.n	800106a <HAL_ADC_IRQHandler+0x28a>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d011      	beq.n	800106a <HAL_ADC_IRQHandler+0x28a>
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_ADC_IRQHandler+0x28a>
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2b05      	cmp	r3, #5
 800105c:	d005      	beq.n	800106a <HAL_ADC_IRQHandler+0x28a>
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_ADC_IRQHandler+0x2b8>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	2b09      	cmp	r3, #9
 8001068:	d104      	bne.n	8001074 <HAL_ADC_IRQHandler+0x294>
      {
        /* hadc is not the handle of a Slave ADC with dual regular conversions enabled:
           check JAUTO and CONT bits directly in ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e018      	b.n	80010a6 <HAL_ADC_IRQHandler+0x2c6>
      }
      else
      {
        /* hadc is not the handle of a Slave ADC with dual regular conversions enabled:
           check JAUTO and CONT bits of Master ADC CFGR register */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <HAL_ADC_IRQHandler+0x2b0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d004      	beq.n	8001088 <HAL_ADC_IRQHandler+0x2a8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_ADC_IRQHandler+0x2b4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d109      	bne.n	800109c <HAL_ADC_IRQHandler+0x2bc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	e007      	b.n	800109e <HAL_ADC_IRQHandler+0x2be>
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000
 8001094:	58026000 	.word	0x58026000
 8001098:	40022300 	.word	0x40022300
 800109c:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <HAL_ADC_IRQHandler+0x4d0>)
 800109e:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61fb      	str	r3, [r7, #28]
      }

      /* Secondly, check whether JEOC and JEOS interruptions can be disabled */
      if ((ADC_IS_SOFTWARE_START_INJECTED(hadc) && (READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) != ADC_CFGR_JQM))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d13f      	bne.n	8001134 <HAL_ADC_IRQHandler+0x354>
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d13a      	bne.n	8001134 <HAL_ADC_IRQHandler+0x354>
           && (!((READ_BIT(tmp_cfgr, (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) == (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) &&
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4b7c      	ldr	r3, [pc, #496]	; (80012b4 <HAL_ADC_IRQHandler+0x4d4>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	4a7b      	ldr	r2, [pc, #492]	; (80012b4 <HAL_ADC_IRQHandler+0x4d4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d106      	bne.n	80010d8 <HAL_ADC_IRQHandler+0x2f8>
             (ADC_IS_SOFTWARE_START_REGULAR(hadc))))    )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
           && (!((READ_BIT(tmp_cfgr, (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) == (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) &&
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d02d      	beq.n	8001134 <HAL_ADC_IRQHandler+0x354>
      {
        /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit         */
        /* JADSTART==0 (no conversion on going)                               */
        if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11a      	bne.n	800111c <HAL_ADC_IRQHandler+0x33c>
        {
          /* Disable ADC end of sequence conversion interrupt  */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	6852      	ldr	r2, [r2, #4]
 80010f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80010f4:	605a      	str	r2, [r3, #4]
          /* Clear HAL_ADC_STATE_INJ_BUSY bit */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
          /* If no regular conversion on-going, set HAL_ADC_STATE_READY bit */
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d112      	bne.n	8001134 <HAL_ADC_IRQHandler+0x354>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
 800111a:	e00b      	b.n	8001134 <HAL_ADC_IRQHandler+0x354>
          }
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f043 0210 	orr.w	r2, r3, #16
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 fe11 	bl	8001d5c <HAL_ADCEx_InjectedConvCpltCallback>

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2260      	movs	r2, #96	; 0x60
 8001140:	601a      	str	r2, [r3, #0]


  /* ========== Check Analog watchdog flag =================================================== */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001148:	2b00      	cmp	r3, #0
 800114a:	d011      	beq.n	8001170 <HAL_ADC_IRQHandler+0x390>
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_ADC_IRQHandler+0x390>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f8ae 	bl	80012c4 <HAL_ADC_LevelOutOfWindowCallback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d012      	beq.n	80011a0 <HAL_ADC_IRQHandler+0x3c0>
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00d      	beq.n	80011a0 <HAL_ADC_IRQHandler+0x3c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fdf7 	bl	8001d84 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d012      	beq.n	80011d0 <HAL_ADC_IRQHandler+0x3f0>
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00d      	beq.n	80011d0 <HAL_ADC_IRQHandler+0x3f0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fde9 	bl	8001d98 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ce:	601a      	str	r2, [r3, #0]
  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d048      	beq.n	800126c <HAL_ADC_IRQHandler+0x48c>
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d043      	beq.n	800126c <HAL_ADC_IRQHandler+0x48c>
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */

    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x412>
    {
      overrun_error = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	e026      	b.n	8001240 <HAL_ADC_IRQHandler+0x460>
    }
    else
    {
      /* Pointer to the common control register */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <HAL_ADC_IRQHandler+0x4d0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d004      	beq.n	8001206 <HAL_ADC_IRQHandler+0x426>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_ADC_IRQHandler+0x4d8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <HAL_ADC_IRQHandler+0x42c>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_ADC_IRQHandler+0x4dc>)
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	e001      	b.n	8001210 <HAL_ADC_IRQHandler+0x430>
      }
      else
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_ADC_IRQHandler+0x4e0>)
 800120e:	623b      	str	r3, [r7, #32]
      }
      /* check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL) == ADC_MODE_INDEPENDENT)
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_IRQHandler+0x450>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00a      	beq.n	8001240 <HAL_ADC_IRQHandler+0x460>
        {
          overrun_error = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	e007      	b.n	8001240 <HAL_ADC_IRQHandler+0x460>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register DAMDF bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF) != RESET)
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_IRQHandler+0x460>
        {
          overrun_error = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10e      	bne.n	8001264 <HAL_ADC_IRQHandler+0x484>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Error callback */
      HAL_ADC_ErrorCallback(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f83a 	bl	80012d8 <HAL_ADC_ErrorCallback>
    }

    /* Clear the Overrun flag, to be done AFTER HAL_ADC_ErrorCallback() since
       old data is preserved until OVR is reset */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2210      	movs	r2, #16
 800126a:	601a      	str	r2, [r3, #0]

  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	2b00      	cmp	r3, #0
 8001274:	d018      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x4c8>
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x4c8>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	f043 0208 	orr.w	r2, r3, #8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fd64 	bl	8001d70 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40022000 	.word	0x40022000
 80012b4:	02002000 	.word	0x02002000
 80012b8:	40022100 	.word	0x40022100
 80012bc:	40022300 	.word	0x40022300
 80012c0:	58026300 	.word	0x58026300

080012c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ec:	b490      	push	{r4, r7}
 80012ee:	b0b6      	sub	sp, #216	; 0xd8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
  }

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d103      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x26>
  {
     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  }
  else
  {
    if (hadc->Instance == ADC3)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4aa8      	ldr	r2, [pc, #672]	; (80015b0 <HAL_ADC_ConfigChannel+0x2c4>)
 8001310:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001318:	2b01      	cmp	r3, #1
 800131a:	d102      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x36>
 800131c:	2302      	movs	r3, #2
 800131e:	f000 bca4 	b.w	8001c6a <HAL_ADC_ConfigChannel+0x97e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 8487 	bne.w	8001c48 <HAL_ADC_ConfigChannel+0x95c>
  {
    /* ADC channels preselction */
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	69d1      	ldr	r1, [r2, #28]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	430a      	orrs	r2, r1
 8001350:	61da      	str	r2, [r3, #28]

    /* Regular sequence configuration */
    /* Clear the old SQx bits then set the new ones for the selected rank */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d836      	bhi.n	80013c8 <HAL_ADC_ConfigChannel+0xdc>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001364:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001368:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001370:	fa92 f2a2 	rbit	r2, r2
 8001374:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
  return(result);
 8001378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800137c:	fab2 f282 	clz	r2, r2
 8001380:	4610      	mov	r0, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	6852      	ldr	r2, [r2, #4]
 8001386:	fb02 f200 	mul.w	r2, r2, r0
 800138a:	201f      	movs	r0, #31
 800138c:	fa00 f202 	lsl.w	r2, r0, r2
 8001390:	43d2      	mvns	r2, r2
 8001392:	4011      	ands	r1, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	6810      	ldr	r0, [r2, #0]
 8001398:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800139c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80013a4:	fa92 f2a2 	rbit	r2, r2
 80013a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
  return(result);
 80013ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013b0:	fab2 f282 	clz	r2, r2
 80013b4:	4614      	mov	r4, r2
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	6852      	ldr	r2, [r2, #4]
 80013ba:	fb02 f204 	mul.w	r2, r2, r4
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	430a      	orrs	r2, r1
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
 80013c6:	e0b1      	b.n	800152c <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank),
                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d838      	bhi.n	8001442 <HAL_ADC_ConfigChannel+0x156>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80013da:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80013de:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
  return(result);
 80013ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	4610      	mov	r0, r2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	6852      	ldr	r2, [r2, #4]
 80013fc:	3a05      	subs	r2, #5
 80013fe:	fb02 f200 	mul.w	r2, r2, r0
 8001402:	201f      	movs	r0, #31
 8001404:	fa00 f202 	lsl.w	r2, r0, r2
 8001408:	43d2      	mvns	r2, r2
 800140a:	4011      	ands	r1, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	6810      	ldr	r0, [r2, #0]
 8001410:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001414:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800141c:	fa92 f2a2 	rbit	r2, r2
 8001420:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
  return(result);
 8001424:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001428:	fab2 f282 	clz	r2, r2
 800142c:	4614      	mov	r4, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6852      	ldr	r2, [r2, #4]
 8001432:	3a05      	subs	r2, #5
 8001434:	fb02 f204 	mul.w	r2, r2, r4
 8001438:	fa00 f202 	lsl.w	r2, r0, r2
 800143c:	430a      	orrs	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
 8001440:	e074      	b.n	800152c <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank),
                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b0e      	cmp	r3, #14
 8001448:	d838      	bhi.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
    {
      MODIFY_REG(hadc->Instance->SQR3,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001454:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001458:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001460:	fa92 f2a2 	rbit	r2, r2
 8001464:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  return(result);
 8001468:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	4610      	mov	r0, r2
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	6852      	ldr	r2, [r2, #4]
 8001476:	3a0a      	subs	r2, #10
 8001478:	fb02 f200 	mul.w	r2, r2, r0
 800147c:	201f      	movs	r0, #31
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	43d2      	mvns	r2, r2
 8001484:	4011      	ands	r1, r2
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	6810      	ldr	r0, [r2, #0]
 800148a:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800148e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001496:	fa92 f2a2 	rbit	r2, r2
 800149a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
  return(result);
 800149e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014a2:	fab2 f282 	clz	r2, r2
 80014a6:	4614      	mov	r4, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	6852      	ldr	r2, [r2, #4]
 80014ac:	3a0a      	subs	r2, #10
 80014ae:	fb02 f204 	mul.w	r2, r2, r4
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	430a      	orrs	r2, r1
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ba:	e037      	b.n	800152c <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 15 to 16 */
    else
    {
      MODIFY_REG(hadc->Instance->SQR4,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014c6:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80014ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80014d2:	fa92 f2a2 	rbit	r2, r2
 80014d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
  return(result);
 80014da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	4610      	mov	r0, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6852      	ldr	r2, [r2, #4]
 80014e8:	3a0f      	subs	r2, #15
 80014ea:	fb02 f200 	mul.w	r2, r2, r0
 80014ee:	201f      	movs	r0, #31
 80014f0:	fa00 f202 	lsl.w	r2, r0, r2
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	4011      	ands	r1, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6810      	ldr	r0, [r2, #0]
 80014fc:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001500:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001508:	fa92 f2a2 	rbit	r2, r2
 800150c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
  return(result);
 8001510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	4614      	mov	r4, r2
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	6852      	ldr	r2, [r2, #4]
 800151e:	3a0f      	subs	r2, #15
 8001520:	fb02 f204 	mul.w	r2, r2, r4
 8001524:	fa00 f202 	lsl.w	r2, r0, r2
 8001528:	430a      	orrs	r2, r1
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 81e6 	bne.w	8001908 <HAL_ADC_ConfigChannel+0x61c>
    {

      /* Channel sampling time configuration */
      /* Clear the old sample time then set the new one for the selected channel */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d937      	bls.n	80015b4 <HAL_ADC_ConfigChannel+0x2c8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6991      	ldr	r1, [r2, #24]
 800154e:	2238      	movs	r2, #56	; 0x38
 8001550:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001558:	fa92 f2a2 	rbit	r2, r2
 800155c:	67fa      	str	r2, [r7, #124]	; 0x7c
  return(result);
 800155e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001560:	fab2 f282 	clz	r2, r2
 8001564:	4610      	mov	r0, r2
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	3a0a      	subs	r2, #10
 800156c:	fb02 f200 	mul.w	r2, r2, r0
 8001570:	2007      	movs	r0, #7
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	43d2      	mvns	r2, r2
 8001578:	4011      	ands	r1, r2
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	6890      	ldr	r0, [r2, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001588:	fa92 f2a2 	rbit	r2, r2
 800158c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001590:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001594:	fab2 f282 	clz	r2, r2
 8001598:	4614      	mov	r4, r2
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	3a0a      	subs	r2, #10
 80015a0:	fb02 f204 	mul.w	r2, r2, r4
 80015a4:	fa00 f202 	lsl.w	r2, r0, r2
 80015a8:	430a      	orrs	r2, r1
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	e02e      	b.n	800160c <HAL_ADC_ConfigChannel+0x320>
 80015ae:	bf00      	nop
 80015b0:	58026000 	.word	0x58026000
                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel));
      }
      else /* For channels 0 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	6951      	ldr	r1, [r2, #20]
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	673a      	str	r2, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015c4:	fa92 f2a2 	rbit	r2, r2
 80015c8:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 80015ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015cc:	fab2 f282 	clz	r2, r2
 80015d0:	4610      	mov	r0, r2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	fb02 f200 	mul.w	r2, r2, r0
 80015da:	2007      	movs	r0, #7
 80015dc:	fa00 f202 	lsl.w	r2, r0, r2
 80015e0:	43d2      	mvns	r2, r2
 80015e2:	4011      	ands	r1, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	6890      	ldr	r0, [r2, #8]
 80015e8:	2238      	movs	r2, #56	; 0x38
 80015ea:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	677a      	str	r2, [r7, #116]	; 0x74
  return(result);
 80015f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f6:	fab2 f282 	clz	r2, r2
 80015fa:	4614      	mov	r4, r2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	fb02 f204 	mul.w	r2, r2, r4
 8001604:	fa00 f202 	lsl.w	r2, r0, r2
 8001608:	430a      	orrs	r2, r1
 800160a:	615a      	str	r2, [r3, #20]

      /* Configure the offset: offset enable/disable, channel, offset value, Signed saturation feature */
     
      /* Shift the offset in function of the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     
      switch (sConfig->OffsetNumber)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	3b01      	subs	r3, #1
 800162c:	2b03      	cmp	r3, #3
 800162e:	f200 80f6 	bhi.w	800181e <HAL_ADC_ConfigChannel+0x532>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <HAL_ADC_ConfigChannel+0x34c>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	080016bd 	.word	0x080016bd
 8001640:	08001733 	.word	0x08001733
 8001644:	080017a9 	.word	0x080017a9
         /* - Enable offset                                                      */
         /* - Set channel number                                                 */
         /* - Set offset value                                                   */
         /* - Set Right shift after offset application                           */
        case ADC_OFFSET_1:
           MODIFY_REG(hadc->Instance->OFR1,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001652:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	6810      	ldr	r0, [r2, #0]
 800165a:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 800165e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001662:	fa92 f2a2 	rbit	r2, r2
 8001666:	667a      	str	r2, [r7, #100]	; 0x64
  return(result);
 8001668:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800166a:	fab2 f282 	clz	r2, r2
 800166e:	4090      	lsls	r0, r2
 8001670:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001674:	4302      	orrs	r2, r0
 8001676:	430a      	orrs	r2, r1
 8001678:	661a      	str	r2, [r3, #96]	; 0x60
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	6912      	ldr	r2, [r2, #16]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	7e09      	ldrb	r1, [r1, #24]
 800168c:	430a      	orrs	r2, r1
 800168e:	611a      	str	r2, [r3, #16]
           /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7e5b      	ldrb	r3, [r3, #25]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x3be>
           {
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80016a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	661a      	str	r2, [r3, #96]	; 0x60
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
           }
          break;
 80016a8:	e12e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80016b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016b8:	661a      	str	r2, [r3, #96]	; 0x60
          break;
 80016ba:	e125      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_2:
          MODIFY_REG(hadc->Instance->OFR2,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80016c6:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	6810      	ldr	r0, [r2, #0]
 80016ce:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80016d2:	663a      	str	r2, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d6:	fa92 f2a2 	rbit	r2, r2
 80016da:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 80016dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016de:	fab2 f282 	clz	r2, r2
 80016e2:	4090      	lsls	r0, r2
 80016e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80016e8:	4302      	orrs	r2, r0
 80016ea:	430a      	orrs	r2, r1
 80016ec:	665a      	str	r2, [r3, #100]	; 0x64
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	6912      	ldr	r2, [r2, #16]
 80016f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	7e09      	ldrb	r1, [r1, #24]
 8001700:	0049      	lsls	r1, r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_ADC_ConfigChannel+0x434>
           {
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001718:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800171c:	665a      	str	r2, [r3, #100]	; 0x64
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
           }
          break;
 800171e:	e0f3      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800172a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172e:	665a      	str	r2, [r3, #100]	; 0x64
          break;
 8001730:	e0ea      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_3:
          MODIFY_REG(hadc->Instance->OFR3,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800173c:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	6810      	ldr	r0, [r2, #0]
 8001744:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001748:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800174c:	fa92 f2a2 	rbit	r2, r2
 8001750:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	4090      	lsls	r0, r2
 800175a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800175e:	4302      	orrs	r2, r0
 8001760:	430a      	orrs	r2, r1
 8001762:	669a      	str	r2, [r3, #104]	; 0x68
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	6912      	ldr	r2, [r2, #16]
 800176e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	7e09      	ldrb	r1, [r1, #24]
 8001776:	0089      	lsls	r1, r1, #2
 8001778:	430a      	orrs	r2, r1
 800177a:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	7e5b      	ldrb	r3, [r3, #25]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_ADC_ConfigChannel+0x4aa>
           {
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800178e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001792:	669a      	str	r2, [r3, #104]	; 0x68
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
           }
          break;
 8001794:	e0b8      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017a4:	669a      	str	r2, [r3, #104]	; 0x68
          break;
 80017a6:	e0af      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_4:
          MODIFY_REG(hadc->Instance->OFR4,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80017b2:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	6810      	ldr	r0, [r2, #0]
 80017ba:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80017be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017c2:	fa92 f2a2 	rbit	r2, r2
 80017c6:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 80017c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ca:	fab2 f282 	clz	r2, r2
 80017ce:	4090      	lsls	r0, r2
 80017d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80017d4:	4302      	orrs	r2, r0
 80017d6:	430a      	orrs	r2, r1
 80017d8:	66da      	str	r2, [r3, #108]	; 0x6c
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	6912      	ldr	r2, [r2, #16]
 80017e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	7e09      	ldrb	r1, [r1, #24]
 80017ec:	00c9      	lsls	r1, r1, #3
 80017ee:	430a      	orrs	r2, r1
 80017f0:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
          if(sConfig->OffsetSignedSaturation != DISABLE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	7e5b      	ldrb	r3, [r3, #25]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_ADC_ConfigChannel+0x520>
          {
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001804:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001808:	66da      	str	r2, [r3, #108]	; 0x6c
          }
          else
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
          }
          break;
 800180a:	e07d      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800181a:	66da      	str	r2, [r3, #108]	; 0x6c
          break;
 800181c:	e074      	b.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
        /* Case ADC_OFFSET_NONE */
        default :
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800183a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001852:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001856:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800185e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 800186a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	429a      	cmp	r2, r3
 8001880:	d107      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x5a6>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800188c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001890:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d107      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x61a>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001900:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001904:	66da      	str	r2, [r3, #108]	; 0x6c
          }
          break;
 8001906:	bf00      	nop

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x63c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x63c>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_ADC_ConfigChannel+0x63e>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 8197 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x972>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001938:	d00f      	beq.n	800195a <HAL_ADC_ConfigChannel+0x66e>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	2001      	movs	r0, #1
 800194c:	fa00 f202 	lsl.w	r2, r0, r2
 8001950:	43d2      	mvns	r2, r2
 8001952:	400a      	ands	r2, r1
 8001954:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001958:	e06e      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x74c>
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	2001      	movs	r0, #1
 800196c:	fa00 f202 	lsl.w	r2, r0, r2
 8001970:	430a      	orrs	r2, r1
 8001972:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* For channels 9 to 15 (ADC1, ADC2) or to 11 (ADC3), SMPR2 register
           must be configured */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d92e      	bls.n	80019dc <HAL_ADC_ConfigChannel+0x6f0>
        {
          MODIFY_REG(hadc->Instance->SMPR2,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	6991      	ldr	r1, [r2, #24]
 8001988:	2238      	movs	r2, #56	; 0x38
 800198a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	fa92 f2a2 	rbit	r2, r2
 8001992:	61fa      	str	r2, [r7, #28]
  return(result);
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	4610      	mov	r0, r2
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	3a09      	subs	r2, #9
 80019a2:	fb02 f200 	mul.w	r2, r2, r0
 80019a6:	2007      	movs	r0, #7
 80019a8:	fa00 f202 	lsl.w	r2, r0, r2
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	4011      	ands	r1, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	6890      	ldr	r0, [r2, #8]
 80019b4:	2238      	movs	r2, #56	; 0x38
 80019b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	fa92 f2a2 	rbit	r2, r2
 80019be:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	4614      	mov	r4, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	3a09      	subs	r2, #9
 80019ce:	fb02 f204 	mul.w	r2, r2, r4
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	430a      	orrs	r2, r1
 80019d8:	619a      	str	r2, [r3, #24]
 80019da:	e02d      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x74c>
                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1),
                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1));
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          MODIFY_REG(hadc->Instance->SMPR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6951      	ldr	r1, [r2, #20]
 80019e6:	2238      	movs	r2, #56	; 0x38
 80019e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	60fa      	str	r2, [r7, #12]
  return(result);
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	fab2 f282 	clz	r2, r2
 80019f8:	4610      	mov	r0, r2
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	3201      	adds	r2, #1
 8001a00:	fb02 f200 	mul.w	r2, r2, r0
 8001a04:	2007      	movs	r0, #7
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	43d2      	mvns	r2, r2
 8001a0c:	4011      	ands	r1, r2
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	6890      	ldr	r0, [r2, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	fa92 f2a2 	rbit	r2, r2
 8001a1c:	617a      	str	r2, [r7, #20]
  return(result);
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	4614      	mov	r4, r2
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	3201      	adds	r2, #1
 8001a2c:	fb02 f204 	mul.w	r2, r2, r4
 8001a30:	fa00 f202 	lsl.w	r2, r0, r2
 8001a34:	430a      	orrs	r2, r1
 8001a36:	615a      	str	r2, [r3, #20]
      /*  paths.                                                                */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
    
      /* Configuration of common ADC parameters                                 */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a8d      	ldr	r2, [pc, #564]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x760>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a8c      	ldr	r2, [pc, #560]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d103      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x768>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8001a4c:	4b8b      	ldr	r3, [pc, #556]	; (8001c7c <HAL_ADC_ConfigChannel+0x990>)
 8001a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x76e>
      }
      else
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8001a54:	4b8a      	ldr	r3, [pc, #552]	; (8001c80 <HAL_ADC_ConfigChannel+0x994>)
 8001a56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
    
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x784>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d017      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0x7b4>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a74:	2b11      	cmp	r3, #17
 8001a76:	d106      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x79a>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0x7b4>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a8a:	2b13      	cmp	r3, #19
 8001a8c:	f040 80e7 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x972>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80df 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x972>
      {
        /* Configuration of common ADC parameters (continuation)                */
    
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x7d4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x7d4>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x7d6>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80b6 	bne.w	8001c34 <HAL_ADC_ConfigChannel+0x948>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001acc:	4a69      	ldr	r2, [pc, #420]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11d      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x822>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001ad2:	4b69      	ldr	r3, [pc, #420]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x7fe>
 8001ade:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d00b      	beq.n	8001b02 <HAL_ADC_ConfigChannel+0x816>
 8001aea:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x81a>
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x81a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x81c>
 8001b06:	2300      	movs	r3, #0
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d04b      	beq.n	8001ba4 <HAL_ADC_ConfigChannel+0x8b8>
 8001b0c:	e092      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x948>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d120      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x86e>
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x844>
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00b      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x85c>
 8001b30:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x860>
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x860>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x862>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d120      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x8ae>
 8001b58:	e013      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x896>
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x88a>
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_ADC_ConfigChannel+0x988>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x88a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x88c>
 8001b76:	2300      	movs	r3, #0
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x8ae>
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x8b2>
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_ADC_ConfigChannel+0x98c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x8b2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x8b4>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d147      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x948>
        {
          /* Enable Temperature sensor measurement path (channel 18)            */
          /* Note: Temp. sensor internal channels available on ADC3    */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b12      	cmp	r3, #18
 8001baa:	d11f      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x900>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d11a      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x900>
          {
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bc4:	609a      	str	r2, [r3, #8]
    
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially          */
            /*       CPU processing cycles.                                 */
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_ADC_ConfigChannel+0x99c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_ADC_ConfigChannel+0x9a0>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0cda      	lsrs	r2, r3, #19
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x8f8>
            {
              wait_loop_index--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x8f2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001bea:	e037      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x970>
            }
          }
          /* If Channel 18 is selected, enable VBAT measurement path.           */
          /* Note: VBAT internal internal channels available on ADC1 and ADC3   */
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b11      	cmp	r3, #17
 8001bf2:	d10d      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x924>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d108      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x924>
          {
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c0c:	609a      	str	r2, [r3, #8]
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001c0e:	e025      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x970>
          }
          /* If Channel 19 is selected, enable VREFINT measurement path          */
          /* Note: VBAT internal internal channels available on ADC1 only       */
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b13      	cmp	r3, #19
 8001c16:	d121      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x970>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_ADC_ConfigChannel+0x998>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11c      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x970>
          {
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c30:	609a      	str	r2, [r3, #8]
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001c32:	e013      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x970>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
          tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c46:	e00a      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x972>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f043 0220 	orr.w	r2, r3, #32
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c5a:	e000      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x972>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	37d8      	adds	r7, #216	; 0xd8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc90      	pop	{r4, r7}
 8001c72:	4770      	bx	lr
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40022100 	.word	0x40022100
 8001c7c:	40022300 	.word	0x40022300
 8001c80:	58026300 	.word	0x58026300
 8001c84:	58026000 	.word	0x58026000
 8001c88:	20000020 	.word	0x20000020
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <ADC_Enable+0x2c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <ADC_Enable+0x2c>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <ADC_Enable+0x2e>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d144      	bne.n	8001d4c <ADC_Enable+0xbc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <ADC_Enable+0xc8>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e030      	b.n	8001d4e <ADC_Enable+0xbe>
    }

    /* Enable the ADC peripheral */
    ADC_ENABLE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	6892      	ldr	r2, [r2, #8]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	609a      	str	r2, [r3, #8]


    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fcca 	bl	8000694 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d02:	e01c      	b.n	8001d3e <ADC_Enable+0xae>
          has been cleared (after a calibration), ADEN bit is reset by the
          calibration logic.
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      ADC_ENABLE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	609a      	str	r2, [r3, #8]

      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
 8001d14:	f7fe fcbe 	bl	8000694 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d90d      	bls.n	8001d3e <ADC_Enable+0xae>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e007      	b.n	8001d4e <ADC_Enable+0xbe>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d1db      	bne.n	8001d04 <ADC_Enable+0x74>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	8000003f 	.word	0x8000003f

08001d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: Master ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b09f      	sub	sp, #124	; 0x7c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0ab      	b.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e001      	b.n	8001dfa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e08e      	b.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                           */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d176      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x154>
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d170      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {

    /* Pointer to the common control register */
    tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8001e34:	673b      	str	r3, [r7, #112]	; 0x70

    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d039      	beq.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 9 clock cycles for 14 bits,                             */
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8001e70:	2300      	movs	r3, #0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d158      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8001e92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d147      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8001e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x190>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6811      	ldr	r1, [r2, #0]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6892      	ldr	r2, [r2, #8]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb0:	e03a      	b.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
               multimode->Mode | multimode->TwoSamplingDelay );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d121      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x142>
 8001f00:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d110      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x190>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f10:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f12:	e009      	b.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status  = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f26:	e000      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f28:	bf00      	nop
  }


  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status ;
 8001f32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	377c      	adds	r7, #124	; 0x7c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40022100 	.word	0x40022100
 8001f4c:	40022300 	.word	0x40022300
 8001f50:	fffff0e0 	.word	0xfffff0e0

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	05fa0000 	.word	0x05fa0000

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fca:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	f002 021f 	and.w	r2, r2, #31
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	490d      	ldr	r1, [pc, #52]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	4909      	ldr	r1, [pc, #36]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	2201      	movs	r2, #1
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	401a      	ands	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208e:	2101      	movs	r1, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff90 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff2b 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff42 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff92 	bl	8002048 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff61 	bl	8001ff4 <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff35 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffa4 	bl	80020ac <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e014      	b.n	80021aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_DAC_Init+0x28>
  {  
  /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f008 fb79 	bl	800a888 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	795b      	ldrb	r3, [r3, #5]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_DAC_Start+0x16>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e03a      	b.n	800223e <HAL_DAC_Start+0x8c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	2001      	movs	r0, #1
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_DAC_Start+0x5e>
  {
    
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d118      	bne.n	8002230 <HAL_DAC_Start+0x7e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	6852      	ldr	r2, [r2, #4]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e00f      	b.n	8002230 <HAL_DAC_Start+0x7e>
    }
  }
  else
  {  
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 800221a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800221e:	d107      	bne.n	8002230 <HAL_DAC_Start+0x7e>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	6852      	ldr	r2, [r2, #4]
 800222a:	f042 0202 	orr.w	r2, r2, #2
 800222e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002260:	d120      	bne.n	80022a4 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1 */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002270:	d118      	bne.n	80022a4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2204      	movs	r2, #4
 8002276:	711a      	strb	r2, [r3, #4]
      
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	611a      	str	r2, [r3, #16]
      
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800229c:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f852 	bl	8002348 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b2:	d120      	bne.n	80022f6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 1 */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022c2:	d118      	bne.n	80022f6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	711a      	strb	r2, [r3, #4]
      
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
      
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f927 	bl	8002544 <HAL_DACEx_DMAUnderrunCallbackCh2>
    }
  }
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3308      	adds	r3, #8
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e004      	b.n	8002332 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3314      	adds	r3, #20
 8002330:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	461a      	mov	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	795b      	ldrb	r3, [r3, #5]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_DAC_ConfigChannel+0x24>
 800237c:	2302      	movs	r3, #2
 800237e:	e0da      	b.n	8002536 <HAL_DAC_ConfigChannel+0x1da>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2202      	movs	r2, #2
 800238a:	711a      	strb	r2, [r3, #4]
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d157      	bne.n	8002444 <HAL_DAC_ConfigChannel+0xe8>
  /* Sample on old configuration */ 
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d137      	bne.n	800240a <HAL_DAC_ConfigChannel+0xae>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800239a:	f7fe f97b 	bl	8000694 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]
      
      
      /* SHSR1 can be written when BWST1  equals RESET */
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 80023a0:	e011      	b.n	80023c6 <HAL_DAC_ConfigChannel+0x6a>
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023a2:	f7fe f977 	bl	8000694 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d90a      	bls.n	80023c6 <HAL_DAC_ConfigChannel+0x6a>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f043 0208 	orr.w	r2, r3, #8
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2203      	movs	r2, #3
 80023c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b7      	b.n	8002536 <HAL_DAC_ConfigChannel+0x1da>
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023cc:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <HAL_DAC_ConfigChannel+0x1e4>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e6      	bne.n	80023a2 <HAL_DAC_ConfigChannel+0x46>
        }
      }
      HAL_Delay(1);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7fe f969 	bl	80006ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	6992      	ldr	r2, [r2, #24]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
 80023e4:	e01e      	b.n	8002424 <HAL_DAC_ConfigChannel+0xc8>
      /* SHSR2 can be written when BWST2 equals RESET */

      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023e6:	f7fe f955 	bl	8000694 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d90a      	bls.n	800240a <HAL_DAC_ConfigChannel+0xae>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f043 0208 	orr.w	r2, r3, #8
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2203      	movs	r2, #3
 8002404:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e095      	b.n	8002536 <HAL_DAC_ConfigChannel+0x1da>
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	2b00      	cmp	r3, #0
 8002412:	dbe8      	blt.n	80023e6 <HAL_DAC_ConfigChannel+0x8a>
        }
      }
      HAL_Delay(1);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe f949 	bl	80006ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	6992      	ldr	r2, [r2, #24]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
    }
    /* HoldTime */
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	69d1      	ldr	r1, [r2, #28]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	6a11      	ldr	r1, [r2, #32]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d119      	bne.n	8002480 <HAL_DAC_ConfigChannel+0x124>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	61fb      	str	r3, [r7, #28]
  /* Clear trimming value */
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 8002454:	221f      	movs	r2, #31
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	61bb      	str	r3, [r7, #24]
  /* Calculate CCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	4313      	orrs	r3, r2
 8002476:	61fb      	str	r3, [r7, #28]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */
  
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODE2_0, DAC_MCR_MODE2_1 and DAC_MCR_MODE2_2 bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 8002488:	2207      	movs	r2, #7
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	4013      	ands	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	6811      	ldr	r1, [r2, #0]
 80024ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	fa00 f202 	lsl.w	r2, r0, r2
 80024d4:	43d2      	mvns	r2, r2
 80024d6:	400a      	ands	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 80024e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = (sConfig->DAC_Trigger);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	4313      	orrs	r3, r2
 8002506:	61fb      	str	r3, [r7, #28]

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	601a      	str	r2, [r3, #0]
      
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	6811      	ldr	r1, [r2, #0]
 800251a:	20c0      	movs	r0, #192	; 0xc0
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	43d2      	mvns	r2, r2
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20008000 	.word	0x20008000

08002544 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e098      	b.n	800269c <HAL_DMA_Abort_IT+0x144>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e08d      	b.n	800269c <HAL_DMA_Abort_IT+0x144>
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_DMA_Abort_IT+0x14c>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d907      	bls.n	800259c <HAL_DMA_Abort_IT+0x44>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HAL_DMA_Abort_IT+0x150>)
 8002594:	429a      	cmp	r2, r3
 8002596:	d801      	bhi.n	800259c <HAL_DMA_Abort_IT+0x44>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_DMA_Abort_IT+0x46>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d021      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x8e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_DMA_Abort_IT+0x14c>)
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d90e      	bls.n	80025d4 <HAL_DMA_Abort_IT+0x7c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_DMA_Abort_IT+0x150>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d808      	bhi.n	80025d4 <HAL_DMA_Abort_IT+0x7c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e062      	b.n	800269a <HAL_DMA_Abort_IT+0x142>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e059      	b.n	800269a <HAL_DMA_Abort_IT+0x142>
    }
    else /* D3 Domain BDMA */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f022 020e 	bic.w	r2, r2, #14
 80025f4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_DMA_Abort_IT+0x14c>)
 80025fe:	429a      	cmp	r2, r3
 8002600:	d90e      	bls.n	8002620 <HAL_DMA_Abort_IT+0xc8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_DMA_Abort_IT+0x150>)
 800260a:	429a      	cmp	r2, r3
 800260c:	d808      	bhi.n	8002620 <HAL_DMA_Abort_IT+0xc8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e007      	b.n	8002630 <HAL_DMA_Abort_IT+0xd8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_DMA_Abort_IT+0x154>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	6053      	str	r3, [r2, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002656:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00c      	beq.n	800267a <HAL_DMA_Abort_IT+0x122>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800266e:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002678:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_DMA_Abort_IT+0x142>
      {
        hdma->XferAbortCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	4002000f 	.word	0x4002000f
 80026a8:	400204b8 	.word	0x400204b8
 80026ac:	58025400 	.word	0x58025400

080026b0 <HAL_FDCAN_Init>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef* hfdcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Check FDCAN handle */
  if(hfdcan == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_FDCAN_Init+0x16>
  {
     return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e19e      	b.n	8002a04 <HAL_FDCAN_Init+0x354>
  }

  /* Check FDCAN instance */
  if(hfdcan->Instance == FDCAN1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_FDCAN_Init+0x1f0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d106      	bne.n	80026de <HAL_FDCAN_Init+0x2e>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

  if(hfdcan->State == HAL_FDCAN_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_FDCAN_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

    /* Init the low level hardware */
    HAL_FDCAN_MspInit(hfdcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f008 f916 	bl	800a924 <HAL_FDCAN_MspInit>
  }

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	6992      	ldr	r2, [r2, #24]
 8002702:	f022 0210 	bic.w	r2, r2, #16
 8002706:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7fd ffc4 	bl	8000694 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800270e:	e014      	b.n	800273a <HAL_FDCAN_Init+0x8a>
  {
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002710:	f7fd ffc0 	bl	8000694 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d90d      	bls.n	800273a <HAL_FDCAN_Init+0x8a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e164      	b.n	8002a04 <HAL_FDCAN_Init+0x354>
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d0e3      	beq.n	8002710 <HAL_FDCAN_Init+0x60>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	6992      	ldr	r2, [r2, #24]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fd ff9c 	bl	8000694 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 800275e:	e014      	b.n	800278a <HAL_FDCAN_Init+0xda>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002760:	f7fd ff98 	bl	8000694 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b0a      	cmp	r3, #10
 800276c:	d90d      	bls.n	800278a <HAL_FDCAN_Init+0xda>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e13c      	b.n	8002a04 <HAL_FDCAN_Init+0x354>
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0e3      	beq.n	8002760 <HAL_FDCAN_Init+0xb0>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	6992      	ldr	r2, [r2, #24]
 80027a2:	f042 0202 	orr.w	r2, r2, #2
 80027a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if(hfdcan->Init.AutoRetransmission == ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7c1b      	ldrb	r3, [r3, #16]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d108      	bne.n	80027c2 <HAL_FDCAN_Init+0x112>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	6992      	ldr	r2, [r2, #24]
 80027ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	e007      	b.n	80027d2 <HAL_FDCAN_Init+0x122>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	6992      	ldr	r2, [r2, #24]
 80027cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if(hfdcan->Init.TransmitPause == ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7c5b      	ldrb	r3, [r3, #17]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <HAL_FDCAN_Init+0x13c>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6992      	ldr	r2, [r2, #24]
 80027e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027e8:	619a      	str	r2, [r3, #24]
 80027ea:	e007      	b.n	80027fc <HAL_FDCAN_Init+0x14c>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	6992      	ldr	r2, [r2, #24]
 80027f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if(hfdcan->Init.ProtocolException == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7c9b      	ldrb	r3, [r3, #18]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_FDCAN_Init+0x166>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6992      	ldr	r2, [r2, #24]
 800280e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002812:	619a      	str	r2, [r3, #24]
 8002814:	e007      	b.n	8002826 <HAL_FDCAN_Init+0x176>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	6992      	ldr	r2, [r2, #24]
 8002820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002824:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	6992      	ldr	r2, [r2, #24]
 8002830:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	430a      	orrs	r2, r1
 800283a:	619a      	str	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if(hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d108      	bne.n	8002856 <HAL_FDCAN_Init+0x1a6>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	6992      	ldr	r2, [r2, #24]
 800284e:	f042 0204 	orr.w	r2, r2, #4
 8002852:	619a      	str	r2, [r3, #24]
 8002854:	e02e      	b.n	80028b4 <HAL_FDCAN_Init+0x204>
  }
  else if(hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02a      	beq.n	80028b4 <HAL_FDCAN_Init+0x204>
  {
    if(hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d01e      	beq.n	80028a4 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	6992      	ldr	r2, [r2, #24]
 8002870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002874:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	6912      	ldr	r2, [r2, #16]
 8002880:	f042 0210 	orr.w	r2, r2, #16
 8002884:	611a      	str	r2, [r3, #16]

      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d112      	bne.n	80028b4 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	6992      	ldr	r2, [r2, #24]
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e009      	b.n	80028b4 <HAL_FDCAN_Init+0x204>
 80028a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	6992      	ldr	r2, [r2, #24]
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	619a      	str	r2, [r3, #24]
    }
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6992      	ldr	r2, [r2, #24]
 80028bc:	3a01      	subs	r2, #1
 80028be:	0651      	lsls	r1, r2, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	69d2      	ldr	r2, [r2, #28]
 80028c4:	3a01      	subs	r2, #1
 80028c6:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80028c8:	4311      	orrs	r1, r2
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a12      	ldr	r2, [r2, #32]
 80028ce:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 80028d0:	4311      	orrs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6952      	ldr	r2, [r2, #20]
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0412      	lsls	r2, r2, #16
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 80028da:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80028dc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e6:	d114      	bne.n	8002912 <HAL_FDCAN_Init+0x262>
  {
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028f0:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0212      	lsls	r2, r2, #8
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 80028fa:	4311      	orrs	r1, r2
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002900:	3a01      	subs	r2, #1
 8002902:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8002904:	4311      	orrs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1) << 16));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290a:	3a01      	subs	r2, #1
 800290c:	0412      	lsls	r2, r2, #16
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 800290e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8002910:	60da      	str	r2, [r3, #12]
  }

  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_FDCAN_Init+0x280>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800292a:	430a      	orrs	r2, r1
 800292c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	4413      	add	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <HAL_FDCAN_Init+0x2ac>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 800294a:	f022 0207 	bic.w	r2, r2, #7
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002952:	482e      	ldr	r0, [pc, #184]	; (8002a0c <HAL_FDCAN_Init+0x35c>)
 8002954:	5c41      	ldrb	r1, [r0, r1]
 8002956:	430a      	orrs	r2, r1
 8002958:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_FDCAN_Init+0x2d2>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, CvtEltSize[hfdcan->Init.RxFifo0ElmtSize]);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8002970:	f022 0207 	bic.w	r2, r2, #7
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002978:	4824      	ldr	r0, [pc, #144]	; (8002a0c <HAL_FDCAN_Init+0x35c>)
 800297a:	5c41      	ldrb	r1, [r0, r1]
 800297c:	430a      	orrs	r2, r1
 800297e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00f      	beq.n	80029aa <HAL_FDCAN_Init+0x2fa>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << 4));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8002996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800299e:	481b      	ldr	r0, [pc, #108]	; (8002a0c <HAL_FDCAN_Init+0x35c>)
 80029a0:	5c41      	ldrb	r1, [r0, r1]
 80029a2:	0109      	lsls	r1, r1, #4
 80029a4:	430a      	orrs	r2, r1
 80029a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if(hfdcan->Init.RxBuffersNbr > 0)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00f      	beq.n	80029d2 <HAL_FDCAN_Init+0x322>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << 8));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80029be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80029c6:	4811      	ldr	r0, [pc, #68]	; (8002a0c <HAL_FDCAN_Init+0x35c>)
 80029c8:	5c41      	ldrb	r1, [r0, r1]
 80029ca:	0209      	lsls	r1, r1, #8
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if(hfdcan->Instance == FDCAN1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_FDCAN_Init+0x360>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d107      	bne.n	80029ec <HAL_FDCAN_Init+0x33c>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6852      	ldr	r2, [r2, #4]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	f022 0203 	bic.w	r2, r2, #3
 80029ea:	609a      	str	r2, [r3, #8]
  }

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fc0b 	bl	8003208 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0800b288 	.word	0x0800b288
 8002a10:	4000a000 	.word	0x4000a000

08002a14 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	; 0x40
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002a1c:	4b96      	ldr	r3, [pc, #600]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	079b      	lsls	r3, r3, #30
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002a24:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	079b      	lsls	r3, r3, #30
 8002a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a44:	4013      	ands	r3, r2
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a74:	4013      	ands	r3, r2
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  ErrStatus = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	f003 537f 	and.w	r3, r3, #1069547520	; 0x3fc00000
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  ErrStatus &= hfdcan->Instance->IE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* High Priority Message interrupt management *******************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <HAL_FDCAN_IRQHandler+0xc6>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d016      	beq.n	8002ada <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Disable the High Priority Message interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
 8002abc:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002abe:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	6153      	str	r3, [r2, #20]

      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002acc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ace:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]

      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fb55 	bl	8003184 <HAL_FDCAN_HighPriorityMessageCallback>
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d035      	beq.n	8002b54 <HAL_FDCAN_IRQHandler+0x140>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02e      	beq.n	8002b54 <HAL_FDCAN_IRQHandler+0x140>
    {
      /* Disable the Transmission Cancellation interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
 8002b06:	4a5c      	ldr	r2, [pc, #368]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	6153      	str	r3, [r2, #20]

      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b22:	4013      	ands	r3, r2
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Disable the Tx Buffer Cancellation Finished Interrupt */
      CLEAR_BIT(hfdcan->Instance->TXBCIE, AbortedBuffers);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 8002b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b34:	43d2      	mvns	r2, r2
 8002b36:	400a      	ands	r2, r1
 8002b38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]

      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 faef 	bl	8003132 <HAL_FDCAN_TxBufferAbortCallback>
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if(ClkCalibrationITs != 0U)
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d020      	beq.n	8002b9c <HAL_FDCAN_IRQHandler+0x188>
  {
    /* Disable the Clock Calibration interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, ClkCalibrationITs);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002b68:	4003      	ands	r3, r0
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	6553      	str	r3, [r2, #84]	; 0x54
 8002b70:	4941      	ldr	r1, [pc, #260]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	0f9b      	lsrs	r3, r3, #30
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	614b      	str	r3, [r1, #20]

    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002b88:	400b      	ands	r3, r1
 8002b8a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b8c:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	0f9b      	lsrs	r3, r3, #30
 8002b92:	6113      	str	r3, [r2, #16]

    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa8a 	bl	80030b0 <HAL_FDCAN_ClockCalibrationCallback>
  }

  /* Tx event FIFO interrupts management **************************************/
  if(TxEventFifoITs != 0U)
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d020      	beq.n	8002be4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    /* Disable the Tx Event FIFO interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, TxEventFifoITs);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bae:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002bb0:	4003      	ands	r3, r0
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	6553      	str	r3, [r2, #84]	; 0x54
 8002bb8:	492f      	ldr	r1, [pc, #188]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	0f9b      	lsrs	r3, r3, #30
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	614b      	str	r3, [r1, #20]

    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6513      	str	r3, [r2, #80]	; 0x50
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	0f9b      	lsrs	r3, r3, #30
 8002bda:	6113      	str	r3, [r2, #16]

    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa71 	bl	80030c6 <HAL_FDCAN_TxEventFifoCallback>
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if(RxFifo0ITs != 0U)
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <HAL_FDCAN_IRQHandler+0x218>
  {
    /* Disable the Rx FIFO 0 interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo0ITs);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bf6:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002bf8:	4003      	ands	r3, r0
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	6553      	str	r3, [r2, #84]	; 0x54
 8002c00:	491d      	ldr	r1, [pc, #116]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	0f9b      	lsrs	r3, r3, #30
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	614b      	str	r3, [r1, #20]

    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002c18:	400b      	ands	r3, r1
 8002c1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	0f9b      	lsrs	r3, r3, #30
 8002c22:	6113      	str	r3, [r2, #16]

    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002c24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa58 	bl	80030dc <HAL_FDCAN_RxFifo0Callback>
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if(RxFifo1ITs != 0U)
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d026      	beq.n	8002c80 <HAL_FDCAN_IRQHandler+0x26c>
  {
    /* Disable the Rx FIFO 1 interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo1ITs);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002c40:	4003      	ands	r3, r0
 8002c42:	43db      	mvns	r3, r3
 8002c44:	400b      	ands	r3, r1
 8002c46:	6553      	str	r3, [r2, #84]	; 0x54
 8002c48:	490b      	ldr	r1, [pc, #44]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	0f9b      	lsrs	r3, r3, #30
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4013      	ands	r3, r2
 8002c56:	614b      	str	r3, [r1, #20]

    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_FDCAN_IRQHandler+0x268>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	6513      	str	r3, [r2, #80]	; 0x50
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_FDCAN_IRQHandler+0x264>)
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	0f9b      	lsrs	r3, r3, #30
 8002c6a:	6113      	str	r3, [r2, #16]

    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa3f 	bl	80030f2 <HAL_FDCAN_RxFifo1Callback>
 8002c74:	e004      	b.n	8002c80 <HAL_FDCAN_IRQHandler+0x26c>
 8002c76:	bf00      	nop
 8002c78:	4000a800 	.word	0x4000a800
 8002c7c:	3fcfffff 	.word	0x3fcfffff
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01d      	beq.n	8002cca <HAL_FDCAN_IRQHandler+0x2b6>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_FDCAN_IRQHandler+0x2b6>
    {
      /* Disable the Tx FIFO empty interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_FIFO_EMPTY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
 8002cac:	4a8d      	ldr	r2, [pc, #564]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002cae:	4b8d      	ldr	r3, [pc, #564]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	6153      	str	r3, [r2, #20]

      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8002cbe:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]

      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa1f 	bl	8003108 <HAL_FDCAN_TxFifoEmptyCallback>
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d035      	beq.n	8002d44 <HAL_FDCAN_IRQHandler+0x330>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02e      	beq.n	8002d44 <HAL_FDCAN_IRQHandler+0x330>
    {
      /* Disable the Transmission Complete interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_COMPLETE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
 8002cf6:	4a7b      	ldr	r2, [pc, #492]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002cf8:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	6153      	str	r3, [r2, #20]

      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	4013      	ands	r3, r2
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Disable the Tx Buffer Transmission Interrupt */
      CLEAR_BIT(hfdcan->Instance->TXBTIE, TransmittedBuffers);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	43d2      	mvns	r2, r2
 8002d26:	400a      	ands	r2, r1
 8002d28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	651a      	str	r2, [r3, #80]	; 0x50
 8002d36:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]

      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9ec 	bl	800311c <HAL_FDCAN_TxBufferCompleteCallback>
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <HAL_FDCAN_IRQHandler+0x37a>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d016      	beq.n	8002d8e <HAL_FDCAN_IRQHandler+0x37a>
    {
      /* Disable the Rx Buffer New Message interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d6a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d70:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	6153      	str	r3, [r2, #20]

      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
 8002d82:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]

      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9dd 	bl	8003148 <HAL_FDCAN_RxBufferNewMessageCallback>
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_FDCAN_IRQHandler+0x3c4>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_FDCAN_IRQHandler+0x3c4>
    {
      /* Disable the Timestamp Wraparound interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
 8002dba:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	6153      	str	r3, [r2, #20]

      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dca:	651a      	str	r2, [r3, #80]	; 0x50
 8002dcc:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]

      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9c2 	bl	800315c <HAL_FDCAN_TimestampWraparoundCallback>
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01d      	beq.n	8002e22 <HAL_FDCAN_IRQHandler+0x40e>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_FDCAN_IRQHandler+0x40e>
    {
      /* Disable the Timeout Occurred interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002dfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
 8002e04:	4a37      	ldr	r2, [pc, #220]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e06:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	6153      	str	r3, [r2, #20]

      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e14:	651a      	str	r2, [r3, #80]	; 0x50
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]

      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9a7 	bl	8003170 <HAL_FDCAN_TimeoutOccurredCallback>
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d022      	beq.n	8002e76 <HAL_FDCAN_IRQHandler+0x462>
  {
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01b      	beq.n	8002e76 <HAL_FDCAN_IRQHandler+0x462>
    {
      /* Disable the Timeout Occurred interrupt */
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e4e:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	6153      	str	r3, [r2, #20]

      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
  }

  /* Error interrupts management **********************************************/
  if(ErrStatus != 0U)
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d024      	beq.n	8002ec6 <HAL_FDCAN_IRQHandler+0x4b2>
  {
    /* Disable the Error interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, ErrStatus);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_FDCAN_IRQHandler+0x4d4>)
 8002e8a:	4003      	ands	r3, r0
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	400b      	ands	r3, r1
 8002e90:	6553      	str	r3, [r2, #84]	; 0x54
 8002e92:	4914      	ldr	r1, [pc, #80]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	0f9b      	lsrs	r3, r3, #30
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	614b      	str	r3, [r1, #20]

    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrStatus);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_FDCAN_IRQHandler+0x4d4>)
 8002eaa:	400b      	ands	r3, r1
 8002eac:	6513      	str	r3, [r2, #80]	; 0x50
 8002eae:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_FDCAN_IRQHandler+0x4d0>)
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	0f9b      	lsrs	r3, r3, #30
 8002eb4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= ErrStatus;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  if((hfdcan->Instance == FDCAN1) && \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_FDCAN_IRQHandler+0x4d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f040 80e2 	bne.w	8003096 <HAL_FDCAN_IRQHandler+0x682>
     ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
  if((hfdcan->Instance == FDCAN1) && \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80da 	beq.w	8003096 <HAL_FDCAN_IRQHandler+0x682>
 8002ee2:	e005      	b.n	8002ef0 <HAL_FDCAN_IRQHandler+0x4dc>
 8002ee4:	4000a800 	.word	0x4000a800
 8002ee8:	3fcfffff 	.word	0x3fcfffff
 8002eec:	4000a000 	.word	0x4000a000
  {
    TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	623b      	str	r3, [r7, #32]
    TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	4013      	ands	r3, r2
 8002f06:	623b      	str	r3, [r7, #32]
    TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f12:	61fb      	str	r3, [r7, #28]
    TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
    TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f2a:	61bb      	str	r3, [r7, #24]
    TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002f42:	617b      	str	r3, [r7, #20]
    TTDistErrors &= hfdcan->ttcan->TTIE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
    TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002f5a:	613b      	str	r3, [r7, #16]
    TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

    /* TT Schedule Synchronization interrupts management **********************/
    if(TTSchedSyncITs != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_FDCAN_IRQHandler+0x57c>
    {
      /* Disable the TT Schedule Synchronization interrupts */
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTSchedSyncITs);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	43d2      	mvns	r2, r2
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear the TT Schedule Synchronization flags */
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	621a      	str	r2, [r3, #32]

      /* TT Schedule Synchronization Callback */
      HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002f88:	6a39      	ldr	r1, [r7, #32]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f90e 	bl	80031ac <HAL_FDCAN_TT_ScheduleSyncCallback>
    }

    /* TT Time Mark interrupts management *************************************/
    if(TTTimeMarkITs != 0U)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_FDCAN_IRQHandler+0x5a4>
    {
      /* Disable the TT Time Mark interrupts */
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTTimeMarkITs);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	43d2      	mvns	r2, r2
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear the TT Time Mark flags */
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	621a      	str	r2, [r3, #32]

      /* TT Time Mark Callback */
      HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002fb0:	69f9      	ldr	r1, [r7, #28]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f905 	bl	80031c2 <HAL_FDCAN_TT_TimeMarkCallback>
    }

    /* TT Stop Watch interrupt management *************************************/
    if(__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d023      	beq.n	800300e <HAL_FDCAN_IRQHandler+0x5fa>
    {
      if(__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01c      	beq.n	800300e <HAL_FDCAN_IRQHandler+0x5fa>
      {
        /* Disable the TT Stop Watch interrupt */
        __HAL_FDCAN_TT_DISABLE_IT(hfdcan, FDCAN_TT_IT_STOP_WATCH);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6852      	ldr	r2, [r2, #4]
 8002fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Retrieve Stop watch Time and Cycle count */
        SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> 16);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	0c1b      	lsrs	r3, r3, #16
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	60fb      	str	r3, [r7, #12]
        SWCycleCount = hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffa:	60bb      	str	r3, [r7, #8]

        /* Clear the TT Stop Watch flag */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	621a      	str	r2, [r3, #32]

        /* TT Stop Watch Callback */
        HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8e5 	bl	80031d8 <HAL_FDCAN_TT_StopWatchCallback>
      }
    }

    /* TT Global Time interrupts management ***********************************/
    if(TTGlobTimeITs != 0U)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_FDCAN_IRQHandler+0x622>
    {
      /* Disable the TT Global Time interrupts */
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTGlobTimeITs);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6852      	ldr	r2, [r2, #4]
 800301c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	43d2      	mvns	r2, r2
 8003022:	400a      	ands	r2, r1
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear the TT Global Time flags */
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	621a      	str	r2, [r3, #32]

      /* TT Global Time Callback */
      HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8dd 	bl	80031f0 <HAL_FDCAN_TT_GlobalTimeCallback>
    }

    /* TT Disturbing Error interrupts management ******************************/
    if(TTDistErrors != 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d014      	beq.n	8003066 <HAL_FDCAN_IRQHandler+0x652>
    {
      /* Disable the TT Disturbing Error interrupts */
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTDistErrors);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6852      	ldr	r2, [r2, #4]
 8003044:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	43d2      	mvns	r2, r2
 800304a:	400a      	ands	r2, r1
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear the TT Disturbing Error flags */
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]

      /* Update error code */
      hfdcan->ErrorCode |= TTDistErrors;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    /* TT Fatal Error interrupts management ***********************************/
    if(TTFatalErrors != 0U)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d014      	beq.n	8003096 <HAL_FDCAN_IRQHandler+0x682>
    {
      /* Disable the TT Fatal Error interrupts */
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTFatalErrors);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6852      	ldr	r2, [r2, #4]
 8003074:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	43d2      	mvns	r2, r2
 800307a:	400a      	ands	r2, r1
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear the TT Fatal Error flags */
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	621a      	str	r2, [r3, #32]

      /* Update error code */
      hfdcan->ErrorCode |= TTFatalErrors;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
  }

  if(hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_FDCAN_IRQHandler+0x692>
  {
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f879 	bl	8003198 <HAL_FDCAN_ErrorCallback>
  }
}
 80030a6:	bf00      	nop
 80030a8:	3740      	adds	r7, #64	; 0x40
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop

080030b0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs: indicates which Clock Calibration interrupts are signalled.
  *                            This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs: indicates which Tx Event FIFO interrupts are signalled.
  *                         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *                     This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs: indicates which Rx FIFO 1 interrupts are signalled.
  *                     This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes: Indexes of the transmitted buffers.
  *                        This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes: Indexes of the aborted buffers.
  *                        This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs: indicates which TT Schedule Synchronization interrupts are signalled.
  *                         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TTSchedSyncCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs: indicates which TT Schedule Synchronization interrupts are signalled.
  *                        This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TTTimeMarkCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount: Cycle count value captured together with SWTime.
  *                       This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TTStopWatchCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs: indicates which TT Global Time interrupts are signalled.
  *                        This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TTGlobalTimeCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *                 the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;

  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003224:	4ba7      	ldr	r3, [pc, #668]	; (80034c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003226:	400b      	ands	r3, r1
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800322c:	0089      	lsls	r1, r1, #2
 800322e:	430b      	orrs	r3, r1
 8003230:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003240:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003248:	0412      	lsls	r2, r2, #16
 800324a:	430a      	orrs	r2, r1
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800326a:	4b96      	ldr	r3, [pc, #600]	; (80034c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800326c:	400b      	ands	r3, r1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8003272:	0089      	lsls	r1, r1, #2
 8003274:	430b      	orrs	r3, r1
 8003276:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003286:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328e:	0412      	lsls	r2, r2, #16
 8003290:	430a      	orrs	r2, r1
 8003292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	675a      	str	r2, [r3, #116]	; 0x74
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (hfdcan->msgRam.RxFIFO0SA << 2));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80032b2:	4b84      	ldr	r3, [pc, #528]	; (80034c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80032b4:	400b      	ands	r3, r1
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	6f49      	ldr	r1, [r1, #116]	; 0x74
 80032ba:	0089      	lsls	r1, r1, #2
 80032bc:	430b      	orrs	r3, r1
 80032be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << 16));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80032ce:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032d6:	0412      	lsls	r2, r2, #16
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	441a      	add	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003300:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << 16));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800331c:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003324:	0412      	lsls	r2, r2, #16
 8003326:	430a      	orrs	r2, r1
 8003328:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (hfdcan->msgRam.RxBufferSA << 2));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800334e:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	430a      	orrs	r2, r1
 800335a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003382:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003384:	400b      	ands	r3, r1
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 800338c:	0089      	lsls	r1, r1, #2
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80033a0:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033a8:	0412      	lsls	r2, r2, #16
 80033aa:	430a      	orrs	r2, r1
 80033ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (hfdcan->msgRam.TxBufferSA << 2));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 80033d0:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	430a      	orrs	r2, r1
 80033de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << 16));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 80033ee:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033f6:	0412      	lsls	r2, r2, #16
 80033f8:	430a      	orrs	r2, r1
 80033fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003424:	f022 517c 	bic.w	r1, r2, #1056964608	; 0x3f000000
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800342c:	0612      	lsls	r2, r2, #24
 800342e:	430a      	orrs	r2, r1
 8003430:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>)
 800343a:	4413      	add	r3, r2
 800343c:	009a      	lsls	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	e003      	b.n	80034cc <FDCAN_CalcultateRamBlockAddresses+0x2c4>
 80034c4:	ffff0003 	.word	0xffff0003
 80034c8:	10002b00 	.word	0x10002b00
 80034cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <FDCAN_CalcultateRamBlockAddresses+0x348>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d909      	bls.n	8003522 <FDCAN_CalcultateRamBlockAddresses+0x31a>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e010      	b.n	8003544 <FDCAN_CalcultateRamBlockAddresses+0x33c>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e005      	b.n	8003536 <FDCAN_CalcultateRamBlockAddresses+0x32e>
    {
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	d8f3      	bhi.n	800352a <FDCAN_CalcultateRamBlockAddresses+0x322>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	4000b5fc 	.word	0x4000b5fc

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <HAL_GPIO_Init+0x248>)
 8003570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e196      	b.n	80038a6 <HAL_GPIO_Init+0x352>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003578:	2201      	movs	r2, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	f040 8185 	bne.w	80038a0 <HAL_GPIO_Init+0x34c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x52>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b12      	cmp	r3, #18
 80035a4:	d123      	bne.n	80035ee <HAL_GPIO_Init+0x9a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0203 	and.w	r2, r3, #3
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00b      	beq.n	8003642 <HAL_GPIO_Init+0xee>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003636:	2b11      	cmp	r3, #17
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b12      	cmp	r3, #18
 8003640:	d130      	bne.n	80036a4 <HAL_GPIO_Init+0x150>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003678:	2201      	movs	r2, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 0201 	and.w	r2, r3, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80df 	beq.w	80038a0 <HAL_GPIO_Init+0x34c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <HAL_GPIO_Init+0x24c>)
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_GPIO_Init+0x24c>)
 80036e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_GPIO_Init+0x24c>)
 80036f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_GPIO_Init+0x250>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a20      	ldr	r2, [pc, #128]	; (80037a8 <HAL_GPIO_Init+0x254>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d051      	beq.n	80037d0 <HAL_GPIO_Init+0x27c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_GPIO_Init+0x258>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d031      	beq.n	8003798 <HAL_GPIO_Init+0x244>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_GPIO_Init+0x25c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d02b      	beq.n	8003794 <HAL_GPIO_Init+0x240>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_GPIO_Init+0x260>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d025      	beq.n	8003790 <HAL_GPIO_Init+0x23c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_GPIO_Init+0x264>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01f      	beq.n	800378c <HAL_GPIO_Init+0x238>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_GPIO_Init+0x268>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d019      	beq.n	8003788 <HAL_GPIO_Init+0x234>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <HAL_GPIO_Init+0x26c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_GPIO_Init+0x230>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_GPIO_Init+0x270>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00d      	beq.n	8003780 <HAL_GPIO_Init+0x22c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_GPIO_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x228>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_GPIO_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_GPIO_Init+0x224>
 8003774:	2309      	movs	r3, #9
 8003776:	e02c      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003778:	230a      	movs	r3, #10
 800377a:	e02a      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 800377c:	2308      	movs	r3, #8
 800377e:	e028      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003780:	2307      	movs	r3, #7
 8003782:	e026      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003784:	2306      	movs	r3, #6
 8003786:	e024      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003788:	2305      	movs	r3, #5
 800378a:	e022      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 800378c:	2304      	movs	r3, #4
 800378e:	e020      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003790:	2303      	movs	r3, #3
 8003792:	e01e      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003794:	2302      	movs	r3, #2
 8003796:	e01c      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 8003798:	2301      	movs	r3, #1
 800379a:	e01a      	b.n	80037d2 <HAL_GPIO_Init+0x27e>
 800379c:	58000080 	.word	0x58000080
 80037a0:	58024400 	.word	0x58024400
 80037a4:	58000400 	.word	0x58000400
 80037a8:	58020000 	.word	0x58020000
 80037ac:	58020400 	.word	0x58020400
 80037b0:	58020800 	.word	0x58020800
 80037b4:	58020c00 	.word	0x58020c00
 80037b8:	58021000 	.word	0x58021000
 80037bc:	58021400 	.word	0x58021400
 80037c0:	58021800 	.word	0x58021800
 80037c4:	58021c00 	.word	0x58021c00
 80037c8:	58022000 	.word	0x58022000
 80037cc:	58022400 	.word	0x58022400
 80037d0:	2300      	movs	r3, #0
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	f002 0203 	and.w	r2, r2, #3
 80037d8:	0092      	lsls	r2, r2, #2
 80037da:	4093      	lsls	r3, r2
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037e2:	4936      	ldr	r1, [pc, #216]	; (80038bc <HAL_GPIO_Init+0x368>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->IMR1 = temp;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	601a      	str	r2, [r3, #0]

        temp = EXTI_Ptr->EMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x2ea>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->EMR1 = temp;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	605a      	str	r2, [r3, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x316>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800386a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x344>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3301      	adds	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b0f      	cmp	r3, #15
 80038aa:	f67f ae65 	bls.w	8003578 <HAL_GPIO_Init+0x24>
      }      
    }
  }
}
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	58000400 	.word	0x58000400

080038c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d0:	787b      	ldrb	r3, [r7, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	887a      	ldrh	r2, [r7, #2]
 80038da:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80038dc:	e002      	b.n	80038e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	887a      	ldrh	r2, [r7, #2]
 80038e2:	835a      	strh	r2, [r3, #26]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b08f      	sub	sp, #60	; 0x3c
 80038f4:	af0a      	add	r7, sp, #40	; 0x28
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e105      	b.n	8003b12 <HAL_PCD_Init+0x222>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f007 fa30 	bl	800ad74 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f005 fabb 	bl	8008e94 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	687e      	ldr	r6, [r7, #4]
 8003926:	466d      	mov	r5, sp
 8003928:	f106 0410 	add.w	r4, r6, #16
 800392c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800392e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003938:	e885 0003 	stmia.w	r5, {r0, r1}
 800393c:	1d33      	adds	r3, r6, #4
 800393e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003940:	6838      	ldr	r0, [r7, #0]
 8003942:	f005 fa55 	bl	8008df0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f005 fab2 	bl	8008eb6 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e04c      	b.n	80039f2 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3339      	adds	r3, #57	; 0x39
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	b2d8      	uxtb	r0, r3
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	3338      	adds	r3, #56	; 0x38
 8003980:	4602      	mov	r2, r0
 8003982:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	b298      	uxth	r0, r3
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	333e      	adds	r3, #62	; 0x3e
 8003998:	4602      	mov	r2, r0
 800399a:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	333b      	adds	r3, #59	; 0x3b
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3340      	adds	r3, #64	; 0x40
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3344      	adds	r3, #68	; 0x44
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	334c      	adds	r3, #76	; 0x4c
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b0e      	cmp	r3, #14
 80039f6:	d9af      	bls.n	8003958 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0; i < 15 ; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e05a      	b.n	8003ab4 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	b2d8      	uxtb	r0, r3
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	b298      	uxth	r0, r3
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333e      	adds	r3, #62	; 0x3e
 8003a42:	4602      	mov	r2, r0
 8003a44:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3340      	adds	r3, #64	; 0x40
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b0e      	cmp	r3, #14
 8003ab8:	d9a1      	bls.n	80039fe <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	687e      	ldr	r6, [r7, #4]
 8003ac2:	466d      	mov	r5, sp
 8003ac4:	f106 0410 	add.w	r4, r6, #16
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad8:	1d33      	adds	r3, r6, #4
 8003ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f005 fa11 	bl	8008f04 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f812 	bl	8003b1c <HAL_PCDEx_ActivateLPM>
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_PCD_Init+0x216>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f82f 	bl	8003b64 <HAL_PCDEx_ActivateBCD>
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f005 fb98 	bl	8009240 <USB_DevDisconnect>
 return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	10000003 	.word	0x10000003

08003b64 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = ENABLE; 
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bba:	4b93      	ldr	r3, [pc, #588]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x3e>
 8003bc6:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bce:	2b18      	cmp	r3, #24
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x56>
 8003bd2:	4b8d      	ldr	r3, [pc, #564]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bde:	4b8a      	ldr	r3, [pc, #552]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d06c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x124>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d168      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e364      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x6e>
 8003c00:	4a81      	ldr	r2, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c02:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e02e      	b.n	8003c6c <HAL_RCC_OscConfig+0xcc>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x90>
 8003c16:	4a7c      	ldr	r2, [pc, #496]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c18:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4a79      	ldr	r2, [pc, #484]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c24:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xcc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0xb4>
 8003c3a:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c3c:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4a70      	ldr	r2, [pc, #448]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c48:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xcc>
 8003c54:	4a6c      	ldr	r2, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c62:	4b69      	ldr	r3, [pc, #420]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fc fd0e 	bl	8000694 <HAL_GetTick>
 8003c78:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xee>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fc fd0a 	bl	8000694 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e318      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xdc>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fc fcfa 	bl	8000694 <HAL_GetTick>
 8003ca0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x116>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fc fcf6 	bl	8000694 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e304      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b54      	ldr	r3, [pc, #336]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x104>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a2 	beq.w	8003e18 <HAL_RCC_OscConfig+0x278>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x158>
 8003ce0:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce8:	2b18      	cmp	r3, #24
 8003cea:	d143      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1d4>
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1d4>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x170>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e2d7      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d10:	493d      	ldr	r1, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0219 	bic.w	r2, r3, #25
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fc fcb7 	bl	8000694 <HAL_GetTick>
 8003d26:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fc fcb3 	bl	8000694 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e2c1      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	4b32      	ldr	r3, [pc, #200]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x18a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	482f      	ldr	r0, [pc, #188]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d72:	e051      	b.n	8003e18 <HAL_RCC_OscConfig+0x278>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d031      	beq.n	8003de0 <HAL_RCC_OscConfig+0x240>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d7c:	4922      	ldr	r1, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 0219 	bic.w	r2, r3, #25
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fc fc81 	bl	8000694 <HAL_GetTick>
 8003d92:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x208>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fc fc7d 	bl	8000694 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e28b      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4814      	ldr	r0, [pc, #80]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6919      	ldr	r1, [r3, #16]
 8003dc2:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	6043      	str	r3, [r0, #4]
 8003dde:	e01b      	b.n	8003e18 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de0:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_OscConfig+0x268>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fc fc52 	bl	8000694 <HAL_GetTick>
 8003df0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x26c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df4:	f7fc fc4e 	bl	8000694 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d904      	bls.n	8003e0c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e25c      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0c:	4ba0      	ldr	r3, [pc, #640]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ed      	bne.n	8003df4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07f      	beq.n	8003f24 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e24:	4b9a      	ldr	r3, [pc, #616]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d00b      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2a8>
 8003e30:	4b97      	ldr	r3, [pc, #604]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e38:	2b18      	cmp	r3, #24
 8003e3a:	d127      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2ec>
 8003e3c:	4b94      	ldr	r3, [pc, #592]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d121      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2ec>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e48:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2c0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2c0>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e22f      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e60:	488b      	ldr	r0, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a19      	ldr	r1, [r3, #32]
 8003e6e:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8003e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e8a:	e04b      	b.n	8003f24 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02e      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x352>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e94:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e96:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fc fbf8 	bl	8000694 <HAL_GetTick>
 8003ea4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x31a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ea8:	f7fc fbf4 	bl	8000694 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e202      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003eba:	4b75      	ldr	r3, [pc, #468]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec6:	4872      	ldr	r0, [pc, #456]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003ec8:	4b71      	ldr	r3, [pc, #452]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a19      	ldr	r1, [r3, #32]
 8003ed4:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8003ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	4313      	orrs	r3, r2
 8003eee:	6043      	str	r3, [r0, #4]
 8003ef0:	e018      	b.n	8003f24 <HAL_RCC_OscConfig+0x384>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ef2:	4a67      	ldr	r2, [pc, #412]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fc fbc9 	bl	8000694 <HAL_GetTick>
 8003f02:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x378>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f06:	f7fc fbc5 	bl	8000694 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1d3      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003f18:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d036      	beq.n	8003f9e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d019      	beq.n	8003f6c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f3a:	4b55      	ldr	r3, [pc, #340]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fc fba6 	bl	8000694 <HAL_GetTick>
 8003f48:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x3be>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fc fba2 	bl	8000694 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1b0      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x3ac>
 8003f6a:	e018      	b.n	8003f9e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6c:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f6e:	4b48      	ldr	r3, [pc, #288]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fc fb8c 	bl	8000694 <HAL_GetTick>
 8003f7c:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x3f2>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fc fb88 	bl	8000694 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e196      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x3e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d019      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x446>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fb2:	4a37      	ldr	r2, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fbc:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fbe:	f7fc fb69 	bl	8000694 <HAL_GetTick>
 8003fc2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fc6:	f7fc fb65 	bl	8000694 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e173      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x426>
 8003fe4:	e018      	b.n	8004018 <HAL_RCC_OscConfig+0x478>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff0:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ff2:	f7fc fb4f 	bl	8000694 <HAL_GetTick>
 8003ff6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ffa:	f7fc fb4b 	bl	8000694 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e159      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x45a>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8085 	beq.w	8004130 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004032:	f7fc fb2f 	bl	8000694 <HAL_GetTick>
 8004036:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x4ac>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800403a:	f7fc fb2b 	bl	8000694 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b64      	cmp	r3, #100	; 0x64
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x4ac>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e139      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x49a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x4ce>
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	e031      	b.n	80040d2 <HAL_RCC_OscConfig+0x532>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d110      	bne.n	8004098 <HAL_RCC_OscConfig+0x4f8>
 8004076:	4a06      	ldr	r2, [pc, #24]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	6713      	str	r3, [r2, #112]	; 0x70
 8004082:	4a03      	ldr	r2, [pc, #12]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8004084:	4b02      	ldr	r3, [pc, #8]	; (8004090 <HAL_RCC_OscConfig+0x4f0>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	e020      	b.n	80040d2 <HAL_RCC_OscConfig+0x532>
 8004090:	58024400 	.word	0x58024400
 8004094:	58024800 	.word	0x58024800
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_OscConfig+0x51a>
 80040a0:	4a89      	ldr	r2, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040a2:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	4a86      	ldr	r2, [pc, #536]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040ae:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x532>
 80040ba:	4a83      	ldr	r2, [pc, #524]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040bc:	4b82      	ldr	r3, [pc, #520]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
 80040c6:	4a80      	ldr	r2, [pc, #512]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040c8:	4b7f      	ldr	r3, [pc, #508]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d015      	beq.n	8004106 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fc fadb 	bl	8000694 <HAL_GetTick>
 80040de:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x558>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fc fad7 	bl	8000694 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0e3      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCC_OscConfig+0x542>
 8004104:	e014      	b.n	8004130 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fc fac5 	bl	8000694 <HAL_GetTick>
 800410a:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x584>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fc fac1 	bl	8000694 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0cd      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	4b68      	ldr	r3, [pc, #416]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x56e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80c2 	beq.w	80042be <HAL_RCC_OscConfig+0x71e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800413a:	4b63      	ldr	r3, [pc, #396]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004142:	2b18      	cmp	r3, #24
 8004144:	f000 80b9 	beq.w	80042ba <HAL_RCC_OscConfig+0x71a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b02      	cmp	r3, #2
 800414e:	f040 809a 	bne.w	8004286 <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004154:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fc fa99 	bl	8000694 <HAL_GetTick>
 8004162:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x5d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004166:	f7fc fa95 	bl	8000694 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0a3      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	4850      	ldr	r0, [pc, #320]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004186:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	4b50      	ldr	r3, [pc, #320]	; (80042cc <HAL_RCC_OscConfig+0x72c>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	430a      	orrs	r2, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	6283      	str	r3, [r0, #40]	; 0x28
 800419e:	494a      	ldr	r1, [pc, #296]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	3b01      	subs	r3, #1
 80041a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	3b01      	subs	r3, #1
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	3b01      	subs	r3, #1
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	3b01      	subs	r3, #1
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041d0:	4313      	orrs	r3, r2
 80041d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041d4:	483c      	ldr	r0, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80041d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <HAL_RCC_OscConfig+0x730>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041e2:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80041e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	fa92 f2a2 	rbit	r2, r2
 80041ee:	60fa      	str	r2, [r7, #12]
  return(result);
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	4313      	orrs	r3, r2
 80041fc:	6343      	str	r3, [r0, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */ 
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041fe:	4932      	ldr	r1, [pc, #200]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f023 020c 	bic.w	r2, r3, #12
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4313      	orrs	r3, r2
 800420e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004210:	492d      	ldr	r1, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f023 0202 	bic.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	4313      	orrs	r3, r2
 8004220:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004224:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004238:	62d3      	str	r3, [r2, #44]	; 0x2c
 
        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800423a:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004246:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fc fa19 	bl	8000694 <HAL_GetTick>
 8004262:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x6d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fc fa15 	bl	8000694 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e023      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x6c6>
 8004284:	e01b      	b.n	80042be <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fc f9ff 	bl	8000694 <HAL_GetTick>
 8004296:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x70c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429a:	f7fc f9fb 	bl	8000694 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e009      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_RCC_OscConfig+0x728>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCC_OscConfig+0x6fa>
 80042b8:	e001      	b.n	80042be <HAL_RCC_OscConfig+0x71e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_RCC_OscConfig+0x720>
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3738      	adds	r7, #56	; 0x38
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	58024400 	.word	0x58024400
 80042cc:	fffffc0c 	.word	0xfffffc0c
 80042d0:	ffff0007 	.word	0xffff0007

080042d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80042e2:	4b9d      	ldr	r3, [pc, #628]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d210      	bcs.n	8004312 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f0:	4999      	ldr	r1, [pc, #612]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 80042f2:	4b99      	ldr	r3, [pc, #612]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004300:	4b95      	ldr	r3, [pc, #596]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0207 	and.w	r2, r3, #7
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e11d      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
    }

  }
   /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_RCC_ClockConfig+0x5c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431e:	498f      	ldr	r1, [pc, #572]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004320:	4b8e      	ldr	r3, [pc, #568]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f023 020f 	bic.w	r2, r3, #15
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	618b      	str	r3, [r1, #24]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8097 	beq.w	800446c <HAL_RCC_ClockConfig+0x198>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800433e:	4987      	ldr	r1, [pc, #540]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004340:	4b86      	ldr	r3, [pc, #536]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d107      	bne.n	8004368 <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004358:	4b80      	ldr	r3, [pc, #512]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d121      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0f2      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d107      	bne.n	8004380 <HAL_RCC_ClockConfig+0xac>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004370:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0e6      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0xc4>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8004388:	4b74      	ldr	r3, [pc, #464]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0da      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b70      	ldr	r3, [pc, #448]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0d2      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043a8:	496c      	ldr	r1, [pc, #432]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80043aa:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fc f96b 	bl	8000694 <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d112      	bne.n	80043ee <HAL_RCC_ClockConfig+0x11a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_ClockConfig+0x10c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ca:	f7fc f963 	bl	8000694 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0b6      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80043e0:	4b5e      	ldr	r3, [pc, #376]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d1ee      	bne.n	80043ca <HAL_RCC_ClockConfig+0xf6>
 80043ec:	e03e      	b.n	800446c <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d112      	bne.n	800441c <HAL_RCC_ClockConfig+0x148>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_ClockConfig+0x13a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f8:	f7fc f94c 	bl	8000694 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_ClockConfig+0x13a>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e09f      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800440e:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004416:	2b18      	cmp	r3, #24
 8004418:	d1ee      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x124>
 800441a:	e027      	b.n	800446c <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d11d      	bne.n	8004460 <HAL_RCC_ClockConfig+0x18c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8004424:	e00a      	b.n	800443c <HAL_RCC_ClockConfig+0x168>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004426:	f7fc f935 	bl	8000694 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_ClockConfig+0x168>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e088      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 800443c:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004444:	2b08      	cmp	r3, #8
 8004446:	d1ee      	bne.n	8004426 <HAL_RCC_ClockConfig+0x152>
 8004448:	e010      	b.n	800446c <HAL_RCC_ClockConfig+0x198>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444a:	f7fc f923 	bl	8000694 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_ClockConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e076      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8004460:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ee      	bne.n	800444a <HAL_RCC_ClockConfig+0x176>
        }
      }
    }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800446c:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0207 	and.w	r2, r3, #7
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d910      	bls.n	800449c <HAL_RCC_ClockConfig+0x1c8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4937      	ldr	r1, [pc, #220]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 0207 	bic.w	r2, r3, #7
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800448a:	4b33      	ldr	r3, [pc, #204]	; (8004558 <HAL_RCC_ClockConfig+0x284>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0207 	and.w	r2, r3, #7
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x1c8>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e058      	b.n	800454e <HAL_RCC_ClockConfig+0x27a>
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCC_ClockConfig+0x1e6>
  {
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044a8:	492c      	ldr	r1, [pc, #176]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	618b      	str	r3, [r1, #24]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044c6:	4925      	ldr	r1, [pc, #148]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61cb      	str	r3, [r1, #28]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x222>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e4:	491d      	ldr	r1, [pc, #116]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61cb      	str	r3, [r1, #28]
  }


  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_RCC_ClockConfig+0x240>
  {
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004502:	4916      	ldr	r1, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004504:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	620b      	str	r3, [r1, #32]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8004514:	f000 f828 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004518:	4601      	mov	r1, r0
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCC_ClockConfig+0x288>)
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x28c>)
 800453c:	5cd3      	ldrb	r3, [r2, r3]
 800453e:	fa21 f303 	lsr.w	r3, r1, r3
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_RCC_ClockConfig+0x290>)
 8004544:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004546:	2000      	movs	r0, #0
 8004548:	f7fc f860 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	52002000 	.word	0x52002000
 800455c:	58024400 	.word	0x58024400
 8004560:	0800b2b4 	.word	0x0800b2b4
 8004564:	20000020 	.word	0x20000020

08004568 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	2300      	movs	r3, #0
 8004580:	607b      	str	r3, [r7, #4]
 float fracn1=0, pllvco = 0;
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 uint32_t sysclockfreq = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004592:	4ba8      	ldr	r3, [pc, #672]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800459a:	2b18      	cmp	r3, #24
 800459c:	f200 813f 	bhi.w	800481e <HAL_RCC_GetSysClockFreq+0x2b6>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCC_GetSysClockFreq+0x40>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	0800481f 	.word	0x0800481f
 80045b0:	0800481f 	.word	0x0800481f
 80045b4:	0800481f 	.word	0x0800481f
 80045b8:	0800481f 	.word	0x0800481f
 80045bc:	0800481f 	.word	0x0800481f
 80045c0:	0800481f 	.word	0x0800481f
 80045c4:	0800481f 	.word	0x0800481f
 80045c8:	08004633 	.word	0x08004633
 80045cc:	0800481f 	.word	0x0800481f
 80045d0:	0800481f 	.word	0x0800481f
 80045d4:	0800481f 	.word	0x0800481f
 80045d8:	0800481f 	.word	0x0800481f
 80045dc:	0800481f 	.word	0x0800481f
 80045e0:	0800481f 	.word	0x0800481f
 80045e4:	0800481f 	.word	0x0800481f
 80045e8:	08004639 	.word	0x08004639
 80045ec:	0800481f 	.word	0x0800481f
 80045f0:	0800481f 	.word	0x0800481f
 80045f4:	0800481f 	.word	0x0800481f
 80045f8:	0800481f 	.word	0x0800481f
 80045fc:	0800481f 	.word	0x0800481f
 8004600:	0800481f 	.word	0x0800481f
 8004604:	0800481f 	.word	0x0800481f
 8004608:	0800463f 	.word	0x0800463f
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800460c:	4b89      	ldr	r3, [pc, #548]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0xc4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004618:	4b86      	ldr	r3, [pc, #536]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	4a85      	ldr	r2, [pc, #532]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }
      
    break;
 800462a:	e0fb      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x2bc>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800462c:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800462e:	61bb      	str	r3, [r7, #24]
    break;
 8004630:	e0f8      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004634:	61bb      	str	r3, [r7, #24]
    break;
 8004636:	e0f5      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004638:	4b81      	ldr	r3, [pc, #516]	; (8004840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800463a:	61bb      	str	r3, [r7, #24]
    break;
 800463c:	e0f2      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x2bc>
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463e:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004648:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004652:	60fb      	str	r3, [r7, #12]
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004654:	4b77      	ldr	r3, [pc, #476]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800465e:	4b75      	ldr	r3, [pc, #468]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	edc7 7a00 	vstr	s15, [r7]

    switch (pllsource)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d055      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004680:	2b01      	cmp	r3, #1
 8004682:	d302      	bcc.n	800468a <HAL_RCC_GetSysClockFreq+0x122>
 8004684:	2b02      	cmp	r3, #2
 8004686:	d072      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x206>
 8004688:	e092      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
    case 0x00:  /* HSI used as PLL clock source */

     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800468a:	4b6a      	ldr	r3, [pc, #424]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d029      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x182>
      {
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004696:	4b67      	ldr	r3, [pc, #412]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	08db      	lsrs	r3, r3, #3
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80046a2:	fa22 f303 	lsr.w	r3, r2, r3
 80046a6:	607b      	str	r3, [r7, #4]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b8:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c8:	ed97 6a00 	vldr	s12, [r7]
 80046cc:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2dc>
 80046d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      }
      break;
 80046e8:	e083      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x28a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80046ea:	4a53      	ldr	r2, [pc, #332]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046fa:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a00 	vldr	s12, [r7]
 800470e:	eddf 5a4d 	vldr	s11, [pc, #308]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800472a:	e062      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x01:  /* CSI used as PLL clock source */
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800472c:	4a43      	ldr	r2, [pc, #268]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800473c:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474c:	ed97 6a00 	vldr	s12, [r7]
 8004750:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800476c:	e041      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800476e:	4a34      	ldr	r2, [pc, #208]	; (8004840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800477e:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a00 	vldr	s12, [r7]
 8004792:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ae:	e020      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x28a>

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80047b0:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d0:	ed97 6a00 	vldr	s12, [r7]
 80047d4:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2dc>
 80047d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f0:	bf00      	nop
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	0a5b      	lsrs	r3, r3, #9
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fc:	3301      	adds	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800480a:	edd7 6a07 	vldr	s13, [r7, #28]
 800480e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004816:	ee17 3a90 	vmov	r3, s15
 800481a:	61bb      	str	r3, [r7, #24]
    break;
 800481c:	e002      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x2bc>

  default:
    sysclockfreq = CSI_VALUE;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004820:	61bb      	str	r3, [r7, #24]
    break;
 8004822:	bf00      	nop
  }

  return sysclockfreq;
 8004824:	69bb      	ldr	r3, [r7, #24]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	; 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	58024400 	.word	0x58024400
 8004838:	03d09000 	.word	0x03d09000
 800483c:	003d0900 	.word	0x003d0900
 8004840:	007a1200 	.word	0x007a1200
 8004844:	46000000 	.word	0x46000000

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 800484e:	f001 fa15 	bl	8005c7c <HAL_RCCEx_GetD1SysClockFreq>
 8004852:	4601      	mov	r1, r0
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_RCC_GetHCLKFreq+0x44>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	2301      	movs	r3, #1
 800485e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	603b      	str	r3, [r7, #0]
  return(result);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_RCC_GetHCLKFreq+0x48>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	fa21 f303 	lsr.w	r3, r1, r3
 800487a:	4a06      	ldr	r2, [pc, #24]	; (8004894 <HAL_RCC_GetHCLKFreq+0x4c>)
 800487c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetHCLKFreq+0x4c>)
 8004880:	681b      	ldr	r3, [r3, #0]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400
 8004890:	0800b2b4 	.word	0x0800b2b4
 8004894:	20000024 	.word	0x20000024

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 800489e:	f7ff ffd3 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 80048a2:	4601      	mov	r1, r0
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048ac:	2310      	movs	r3, #16
 80048ae:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	603b      	str	r3, [r7, #0]
  return(result);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	0800b2b4 	.word	0x0800b2b4

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80048e2:	f7ff ffb1 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 80048e6:	4601      	mov	r1, r0
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048f4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	603b      	str	r3, [r7, #0]
  return(result);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_RCC_GetPCLK2Freq+0x40>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58024400 	.word	0x58024400
 800491c:	0800b2b4 	.word	0x0800b2b4

08004920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004928:	2300      	movs	r3, #0
 800492a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800492c:	2300      	movs	r3, #0
 800492e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d03f      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004944:	d013      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d802      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004950:	e01f      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004956:	d013      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004958:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800495c:	d01c      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800495e:	e018      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4ab1      	ldr	r2, [pc, #708]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004962:	4bb1      	ldr	r3, [pc, #708]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800496c:	e015      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2102      	movs	r1, #2
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f9a9 	bl	8005ccc <RCCEx_PLL2_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800497e:	e00c      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3324      	adds	r3, #36	; 0x24
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fa3a 	bl	8005e00 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
      break;
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049a0:	49a1      	ldr	r1, [pc, #644]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049a2:	4ba1      	ldr	r3, [pc, #644]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ae:	4313      	orrs	r3, r2
 80049b0:	650b      	str	r3, [r1, #80]	; 0x50
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80049b4:	7dba      	ldrb	r2, [r7, #22]
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03f      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d826      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049ed 	.word	0x080049ed
 80049dc:	080049fb 	.word	0x080049fb
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a25 	.word	0x08004a25
 80049e8:	08004a25 	.word	0x08004a25
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4a8e      	ldr	r2, [pc, #568]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049ee:	4b8e      	ldr	r3, [pc, #568]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049f8:	e015      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f963 	bl	8005ccc <RCCEx_PLL2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a0a:	e00c      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f9f4 	bl	8005e00 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
      break;
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a2c:	497e      	ldr	r1, [pc, #504]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a2e:	4b7e      	ldr	r3, [pc, #504]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a3e:	e003      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004a40:	7dba      	ldrb	r2, [r7, #22]
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d040      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d01c      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d804      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d00d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004a68:	e01e      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6c:	d01f      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d01e      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a74:	e018      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a76:	4a6c      	ldr	r2, [pc, #432]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a78:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a82:	e017      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f91e 	bl	8005ccc <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f9af 	bl	8005e00 <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aa6:	e005      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 8004ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004aba:	495b      	ldr	r1, [pc, #364]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004abc:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	650b      	str	r3, [r1, #80]	; 0x50
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004ace:	7dba      	ldrb	r2, [r7, #22]
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d046      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aec:	d01f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af2:	d805      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004afc:	d00e      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004afe:	e01f      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004b00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b04:	d01f      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
 8004b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b0a:	d01e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b0c:	e018      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0e:	4a46      	ldr	r2, [pc, #280]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e017      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f8d2 	bl	8005ccc <RCCEx_PLL2_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b2c:	e00e      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3324      	adds	r3, #36	; 0x24
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f963 	bl	8005e00 <RCCEx_PLL3_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 8004b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b52:	4935      	ldr	r1, [pc, #212]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b54:	4b34      	ldr	r3, [pc, #208]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b62:	4313      	orrs	r3, r2
 8004b64:	658b      	str	r3, [r1, #88]	; 0x58
 8004b66:	e003      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004b68:	7dba      	ldrb	r2, [r7, #22]
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d046      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b86:	d01f      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8c:	d805      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b96:	d00e      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b98:	e01f      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004b9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b9e:	d01f      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ba4:	d01e      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004ba6:	e018      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004baa:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bb4:	e017      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f885 	bl	8005ccc <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bc6:	e00e      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3324      	adds	r3, #36	; 0x24
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 f916 	bl	8005e00 <RCCEx_PLL3_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bd8:	e005      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bec:	490e      	ldr	r1, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	658b      	str	r3, [r1, #88]	; 0x58
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004c02:	7dba      	ldrb	r2, [r7, #22]
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d036      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d00b      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d804      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c26:	e016      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d015      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8004c34:	e00f      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c36:	4aae      	ldr	r2, [pc, #696]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c38:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c42:	e00e      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x342>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f83e 	bl	8005ccc <RCCEx_PLL2_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c54:	e005      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x342>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8004c5c:	bf00      	nop
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8004c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c68:	49a1      	ldr	r1, [pc, #644]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6a:	4ba1      	ldr	r3, [pc, #644]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c76:	4313      	orrs	r3, r2
 8004c78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004c7c:	7dba      	ldrb	r2, [r7, #22]
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d044      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d01f      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d805      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004caa:	e01f      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004cac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb0:	d01f      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb6:	d01e      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8004cb8:	e018      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cba:	4a8d      	ldr	r2, [pc, #564]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cc6:	e017      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fffc 	bl	8005ccc <RCCEx_PLL2_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cd8:	e00e      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3324      	adds	r3, #36	; 0x24
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f88d 	bl	8005e00 <RCCEx_PLL3_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cea:	e005      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf0:	e002      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 8004cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cfe:	497c      	ldr	r1, [pc, #496]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d00:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	650b      	str	r3, [r1, #80]	; 0x50
 8004d10:	e003      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004d12:	7dba      	ldrb	r2, [r7, #22]
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d044      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2e:	d01b      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d34:	d805      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d022      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004d40:	e01b      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8004d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d46:	d01d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d4c:	d01c      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004d4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d52:	d01b      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004d54:	e011      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 ffb5 	bl	8005ccc <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d66:	e012      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3324      	adds	r3, #36	; 0x24
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 f846 	bl	8005e00 <RCCEx_PLL3_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d78:	e009      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8004d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d94:	4956      	ldr	r1, [pc, #344]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d96:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	4313      	orrs	r3, r2
 8004da4:	650b      	str	r3, [r1, #80]	; 0x50
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004da8:	7dba      	ldrb	r2, [r7, #22]
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d046      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc6:	d01b      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dcc:	d805      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d022      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004dd8:	e01b      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d01d      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d01c      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dea:	d01b      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dec:	e011      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 ff69 	bl	8005ccc <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e012      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fffa 	bl	8005e00 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e10:	e009      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
      break;
 8004e16:	e006      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004e18:	bf00      	nop
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e2c:	4930      	ldr	r1, [pc, #192]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	658b      	str	r3, [r1, #88]	; 0x58
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004e42:	7dba      	ldrb	r2, [r7, #22]
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	75bb      	strb	r3, [r7, #22]
  }


#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d02f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e64:	d009      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d013      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e6a:	e00f      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6c:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e78:	e00c      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x574>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 ff23 	bl	8005ccc <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e8a:	e003      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x574>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x574>
      break;
 8004e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e9a:	4915      	ldr	r1, [pc, #84]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004eae:	7dba      	ldrb	r2, [r7, #22]
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d036      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d81d      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f0d 	.word	0x08004f0d
 8004ed4:	08004ee1 	.word	0x08004ee1
 8004ed8:	08004ef5 	.word	0x08004ef5
 8004edc:	08004f0d 	.word	0x08004f0d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee0:	4a03      	ldr	r2, [pc, #12]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee2:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004eec:	e00f      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fee6 	bl	8005ccc <RCCEx_PLL2_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f14:	49b0      	ldr	r1, [pc, #704]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f16:	4bb0      	ldr	r3, [pc, #704]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4313      	orrs	r3, r2
 8004f24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f26:	e003      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004f28:	7dba      	ldrb	r2, [r7, #22]
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 808a 	beq.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x732>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3e:	4aa7      	ldr	r2, [pc, #668]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f40:	4ba6      	ldr	r3, [pc, #664]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4a:	f7fb fba3 	bl	8000694 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f50:	e009      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x646>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f52:	f7fb fb9f 	bl	8000694 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d902      	bls.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        ret = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	75fb      	strb	r3, [r7, #23]
        break;
 8004f64:	e005      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x652>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f66:	4b9d      	ldr	r3, [pc, #628]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ef      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x632>
      }
    }

    if(ret == HAL_OK)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d168      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x72a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f78:	4b97      	ldr	r3, [pc, #604]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f82:	4053      	eors	r3, r2
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f8c:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f96:	4a90      	ldr	r2, [pc, #576]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f98:	4b8f      	ldr	r3, [pc, #572]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa2:	4a8d      	ldr	r2, [pc, #564]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004fa4:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fae:	4a8a      	ldr	r2, [pc, #552]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbe:	d115      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fb fb68 	bl	8000694 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fb fb64 	bl	8000694 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d902      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
          {
            ret = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	75fb      	strb	r3, [r7, #23]
            break;
 8004fde:	e005      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	4b7d      	ldr	r3, [pc, #500]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0ed      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
          }
        }
      }

      if(ret == HAL_OK)
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d126      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x720>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005000:	d10d      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8005002:	4875      	ldr	r0, [pc, #468]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005004:	4b74      	ldr	r3, [pc, #464]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005012:	0919      	lsrs	r1, r3, #4
 8005014:	4b72      	ldr	r3, [pc, #456]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005016:	400b      	ands	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	6103      	str	r3, [r0, #16]
 800501c:	e005      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800501e:	4a6e      	ldr	r2, [pc, #440]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005020:	4b6d      	ldr	r3, [pc, #436]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005028:	6113      	str	r3, [r2, #16]
 800502a:	496b      	ldr	r1, [pc, #428]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800502c:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800502e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503a:	4313      	orrs	r3, r2
 800503c:	670b      	str	r3, [r1, #112]	; 0x70
 800503e:	e008      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
      else
      {
        /* set overall return value */
        status |= ret;
 8005040:	7dba      	ldrb	r2, [r7, #22]
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	4313      	orrs	r3, r2
 8005046:	75bb      	strb	r3, [r7, #22]
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800504a:	7dba      	ldrb	r2, [r7, #22]
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	4313      	orrs	r3, r2
 8005050:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07f      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005062:	2b28      	cmp	r3, #40	; 0x28
 8005064:	d866      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	0800513b 	.word	0x0800513b
 8005070:	08005135 	.word	0x08005135
 8005074:	08005135 	.word	0x08005135
 8005078:	08005135 	.word	0x08005135
 800507c:	08005135 	.word	0x08005135
 8005080:	08005135 	.word	0x08005135
 8005084:	08005135 	.word	0x08005135
 8005088:	08005135 	.word	0x08005135
 800508c:	08005111 	.word	0x08005111
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	08005135 	.word	0x08005135
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005135 	.word	0x08005135
 80050a4:	08005135 	.word	0x08005135
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005123 	.word	0x08005123
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005135 	.word	0x08005135
 80050b8:	08005135 	.word	0x08005135
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	08005135 	.word	0x08005135
 80050c8:	08005135 	.word	0x08005135
 80050cc:	0800513b 	.word	0x0800513b
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	08005135 	.word	0x08005135
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005135 	.word	0x08005135
 80050e4:	08005135 	.word	0x08005135
 80050e8:	08005135 	.word	0x08005135
 80050ec:	0800513b 	.word	0x0800513b
 80050f0:	08005135 	.word	0x08005135
 80050f4:	08005135 	.word	0x08005135
 80050f8:	08005135 	.word	0x08005135
 80050fc:	08005135 	.word	0x08005135
 8005100:	08005135 	.word	0x08005135
 8005104:	08005135 	.word	0x08005135
 8005108:	08005135 	.word	0x08005135
 800510c:	0800513b 	.word	0x0800513b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fdd8 	bl	8005ccc <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005120:	e00c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3324      	adds	r3, #36	; 0x24
 8005126:	2101      	movs	r1, #1
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fe69 	bl	8005e00 <RCCEx_PLL3_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005132:	e003      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
      break;
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      break;
 800513a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005142:	4925      	ldr	r1, [pc, #148]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005150:	4313      	orrs	r3, r2
 8005152:	654b      	str	r3, [r1, #84]	; 0x54
 8005154:	e003      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005156:	7dba      	ldrb	r2, [r7, #22]
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	4313      	orrs	r3, r2
 800515c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d040      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	2b05      	cmp	r3, #5
 8005170:	d820      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	080051bb 	.word	0x080051bb
 800517c:	08005191 	.word	0x08005191
 8005180:	080051a3 	.word	0x080051a3
 8005184:	080051bb 	.word	0x080051bb
 8005188:	080051bb 	.word	0x080051bb
 800518c:	080051bb 	.word	0x080051bb
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd98 	bl	8005ccc <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051a0:	e00c      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x89c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3324      	adds	r3, #36	; 0x24
 80051a6:	2101      	movs	r1, #1
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fe29 	bl	8005e00 <RCCEx_PLL3_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051b2:	e003      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x89c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
      break;
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x89c>
      break;
 80051ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051c2:	4905      	ldr	r1, [pc, #20]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f023 0207 	bic.w	r2, r3, #7
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	4313      	orrs	r3, r2
 80051d2:	654b      	str	r3, [r1, #84]	; 0x54
 80051d4:	e00a      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	58024800 	.word	0x58024800
 80051e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80051e4:	7dba      	ldrb	r2, [r7, #22]
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d820      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800524b 	.word	0x0800524b
 800520c:	08005221 	.word	0x08005221
 8005210:	08005233 	.word	0x08005233
 8005214:	0800524b 	.word	0x0800524b
 8005218:	0800524b 	.word	0x0800524b
 800521c:	0800524b 	.word	0x0800524b
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd50 	bl	8005ccc <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005230:	e00c      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x92c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3324      	adds	r3, #36	; 0x24
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fde1 	bl	8005e00 <RCCEx_PLL3_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005242:	e003      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
      break;
 8005248:	e000      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      break;
 800524a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005252:	49b7      	ldr	r1, [pc, #732]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005254:	4bb6      	ldr	r3, [pc, #728]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f023 0207 	bic.w	r2, r3, #7
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	4313      	orrs	r3, r2
 8005264:	658b      	str	r3, [r1, #88]	; 0x58
 8005266:	e003      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005268:	7dba      	ldrb	r2, [r7, #22]
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	4313      	orrs	r3, r2
 800526e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d046      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005286:	d01b      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528c:	d805      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d022      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8005292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8005298:	e01b      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d01d      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80052a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a4:	d01c      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 80052a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052aa:	d01b      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fd09 	bl	8005ccc <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052be:	e012      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd9a 	bl	8005e00 <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052d0:	e009      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
      break;
 80052d6:	e006      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80052d8:	bf00      	nop
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80052e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ec:	4990      	ldr	r1, [pc, #576]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80052ee:	4b90      	ldr	r3, [pc, #576]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fc:	4313      	orrs	r3, r2
 80052fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005302:	7dba      	ldrb	r2, [r7, #22]
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	4313      	orrs	r3, r2
 8005308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d046      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005320:	d01b      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005326:	d805      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d022      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xa52>
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005332:	e01b      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d01d      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa56>
 800533a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800533e:	d01c      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8005340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005344:	d01b      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005346:	e011      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fcbc 	bl	8005ccc <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005358:	e012      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd4d 	bl	8005e00 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800536a:	e009      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 800537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005386:	496a      	ldr	r1, [pc, #424]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005388:	4b69      	ldr	r3, [pc, #420]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005396:	4313      	orrs	r3, r2
 8005398:	658b      	str	r3, [r1, #88]	; 0x58
 800539a:	e003      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800539c:	7dba      	ldrb	r2, [r7, #22]
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d046      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ba:	d01b      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80053bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c0:	d805      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d022      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80053c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80053cc:	e01b      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d2:	d01d      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80053d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053d8:	d01c      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 80053da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053de:	d01b      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80053e0:	e011      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xae6>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fc6f 	bl	8005ccc <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053f2:	e012      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3324      	adds	r3, #36	; 0x24
 80053f8:	2102      	movs	r1, #2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fd00 	bl	8005e00 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005404:	e009      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
      break;
 800540a:	e006      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 800540c:	bf00      	nop
 800540e:	e004      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8005410:	bf00      	nop
 8005412:	e002      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8005418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005420:	4943      	ldr	r1, [pc, #268]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005422:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005430:	4313      	orrs	r3, r2
 8005432:	658b      	str	r3, [r1, #88]	; 0x58
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005436:	7dba      	ldrb	r2, [r7, #22]
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	4313      	orrs	r3, r2
 800543c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01b      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d10b      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3324      	adds	r3, #36	; 0x24
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fccf 	bl	8005e00 <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	7dbb      	ldrb	r3, [r7, #22]
 8005468:	4313      	orrs	r3, r2
 800546a:	75bb      	strb	r3, [r7, #22]
 800546c:	e009      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800546e:	4930      	ldr	r1, [pc, #192]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005470:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547e:	4313      	orrs	r3, r2
 8005480:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01b      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d10b      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	; 0x24
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fcad 	bl	8005e00 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	7dbb      	ldrb	r3, [r7, #22]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	75bb      	strb	r3, [r7, #22]
 80054b0:	e009      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054b2:	491f      	ldr	r1, [pc, #124]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80054b4:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c2:	4313      	orrs	r3, r2
 80054c4:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d034      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054dc:	d00d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80054de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e2:	d016      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d111      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xbec>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fbec 	bl	8005ccc <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054f8:	e00c      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xbf4>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fc7d 	bl	8005e00 <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      break;
 8005512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800551a:	4905      	ldr	r1, [pc, #20]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800552a:	4313      	orrs	r3, r2
 800552c:	658b      	str	r3, [r1, #88]	; 0x58
 800552e:	e005      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 8005530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005534:	7dba      	ldrb	r2, [r7, #22]
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	4313      	orrs	r3, r2
 800553a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d031      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005552:	d00c      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005558:	d015      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d10f      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4a7c      	ldr	r2, [pc, #496]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005562:	4b7c      	ldr	r3, [pc, #496]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800556c:	e00c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc68>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3324      	adds	r3, #36	; 0x24
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fc43 	bl	8005e00 <RCCEx_PLL3_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800557e:	e003      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
      break;
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      break;
 8005586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558e:	4971      	ldr	r1, [pc, #452]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005590:	4b70      	ldr	r3, [pc, #448]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559e:	4313      	orrs	r3, r2
 80055a0:	654b      	str	r3, [r1, #84]	; 0x54
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80055a4:	7dba      	ldrb	r2, [r7, #22]
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02b      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d007      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 80055c6:	e00f      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c8:	4a62      	ldr	r2, [pc, #392]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80055ca:	4b62      	ldr	r3, [pc, #392]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055d4:	e00b      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb75 	bl	8005ccc <RCCEx_PLL2_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055e6:	e002      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
      break;
 80055ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055f4:	4957      	ldr	r1, [pc, #348]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	4313      	orrs	r3, r2
 8005604:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005606:	e003      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8005608:	7dba      	ldrb	r2, [r7, #22]
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	4313      	orrs	r3, r2
 800560e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fbec 	bl	8005e00 <RCCEx_PLL3_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	7dbb      	ldrb	r3, [r7, #22]
 800562e:	4313      	orrs	r3, r2
 8005630:	75bb      	strb	r3, [r7, #22]
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d031      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {

    switch(PeriphClkInit->RngClockSelection)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d00c      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564c:	d802      	bhi.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d011      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005652:	e00d      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8005654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005658:	d00f      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
 800565a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800565e:	d00e      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd50>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005664:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800566e:	e007      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800567e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005686:	4933      	ldr	r1, [pc, #204]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005688:	4b32      	ldr	r3, [pc, #200]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	4313      	orrs	r3, r2
 8005696:	654b      	str	r3, [r1, #84]	; 0x54
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800569a:	7dba      	ldrb	r2, [r7, #22]
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	4313      	orrs	r3, r2
 80056a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056ae:	4929      	ldr	r1, [pc, #164]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4313      	orrs	r3, r2
 80056be:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056cc:	4921      	ldr	r1, [pc, #132]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056ce:	4b21      	ldr	r3, [pc, #132]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056dc:	4313      	orrs	r3, r2
 80056de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ec:	4919      	ldr	r1, [pc, #100]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80056f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fa:	4313      	orrs	r3, r2
 80056fc:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800570a:	4a12      	ldr	r2, [pc, #72]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800570c:	4b11      	ldr	r3, [pc, #68]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005714:	6113      	str	r3, [r2, #16]
 8005716:	490f      	ldr	r1, [pc, #60]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da08      	bge.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xe20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800572e:	4909      	ldr	r1, [pc, #36]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	4313      	orrs	r3, r2
 800573e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005740:	7dbb      	ldrb	r3, [r7, #22]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xe2a>
  {
    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe2c>
  }
  return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	58024400 	.word	0x58024400

08005758 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 800575e:	f7ff f873 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8005762:	4601      	mov	r1, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCCEx_GetD3PCLK1Freq+0x3c>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800576c:	2310      	movs	r3, #16
 800576e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	603b      	str	r3, [r7, #0]
  return(result);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	fab3 f383 	clz	r3, r3
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_RCCEx_GetD3PCLK1Freq+0x40>)
 8005784:	5cd3      	ldrb	r3, [r2, r3]
 8005786:	fa21 f303 	lsr.w	r3, r1, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400
 8005798:	0800b2b4 	.word	0x0800b2b4

0800579c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t  pllsource = 0, pll2m = 1 ,  pll2fracen = 0, hsivalue = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  float fracn2 =0 ,pll2vco = 0;
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057c0:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80057ca:	4b8b      	ldr	r3, [pc, #556]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	0b1b      	lsrs	r3, r3, #12
 80057d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80057d6:	4b88      	ldr	r3, [pc, #544]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	613b      	str	r3, [r7, #16]
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80057e0:	4b85      	ldr	r3, [pc, #532]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f8:	edc7 7a02 	vstr	s15, [r7, #8]

  switch (pllsource)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d055      	beq.n	80058ae <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 8005802:	2b01      	cmp	r3, #1
 8005804:	d302      	bcc.n	800580c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005806:	2b02      	cmp	r3, #2
 8005808:	d072      	beq.n	80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800580a:	e092      	b.n	8005932 <HAL_RCCEx_GetPLL2ClockFreq+0x196>
  {

  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580c:	4b7a      	ldr	r3, [pc, #488]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d029      	beq.n	800586c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005818:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	08db      	lsrs	r3, r3, #3
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	4a76      	ldr	r2, [pc, #472]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	60fb      	str	r3, [r7, #12]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800583a:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a02 	vldr	s12, [r7, #8]
 800584e:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    }
    break;
 800586a:	e083      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800586c:	4a63      	ldr	r2, [pc, #396]	; (80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800587c:	4b5e      	ldr	r3, [pc, #376]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005890:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8005894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a8:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80058ac:	e062      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x01:  /* HSI used as PLL clock source */
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80058ae:	4a55      	ldr	r2, [pc, #340]	; (8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058be:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d2:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80058ee:	e041      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80058f0:	4a45      	ldr	r2, [pc, #276]	; (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x26c>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005900:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005910:	ed97 6a02 	vldr	s12, [r7, #8]
 8005914:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8005918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592c:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005930:	e020      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005932:	4a34      	ldr	r2, [pc, #208]	; (8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a02 	vldr	s12, [r7, #8]
 8005956:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005972:	bf00      	nop
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8005974:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	0a5b      	lsrs	r3, r3, #9
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	3301      	adds	r3, #1
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005988:	edd7 6a07 	vldr	s13, [r7, #28]
 800598c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005994:	ee17 2a90 	vmov	r2, s15
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 800599c:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a6:	3301      	adds	r3, #1
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059bc:	ee17 2a90 	vmov	r2, s15
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	0e1b      	lsrs	r3, r3, #24
 80059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ce:	3301      	adds	r3, #1
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80059dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e4:	ee17 2a90 	vmov	r2, s15
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]


}
 80059ec:	bf00      	nop
 80059ee:	3724      	adds	r7, #36	; 0x24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	58024400 	.word	0x58024400
 80059fc:	03d09000 	.word	0x03d09000
 8005a00:	46000000 	.word	0x46000000
 8005a04:	003d0900 	.word	0x003d0900
 8005a08:	007a1200 	.word	0x007a1200

08005a0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  float fracn3 =0 , pll3vco = 0;
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a30:	4b8d      	ldr	r3, [pc, #564]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	0d1b      	lsrs	r3, r3, #20
 8005a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a44:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005a46:	4b88      	ldr	r3, [pc, #544]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	613b      	str	r3, [r7, #16]
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005a50:	4b85      	ldr	r3, [pc, #532]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d055      	beq.n	8005b1e <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d302      	bcc.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d072      	beq.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8005a7a:	e092      	b.n	8005ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
  {
  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a7c:	4b7a      	ldr	r3, [pc, #488]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d029      	beq.n	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a88:	4b77      	ldr	r3, [pc, #476]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	08db      	lsrs	r3, r3, #3
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	4a76      	ldr	r2, [pc, #472]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	60fb      	str	r3, [r7, #12]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aaa:	4b6f      	ldr	r3, [pc, #444]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005abe:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    }
    break;
 8005ada:	e083      	b.n	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005adc:	4a63      	ldr	r2, [pc, #396]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aec:	4b5e      	ldr	r3, [pc, #376]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b00:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8005b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b18:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005b1c:	e062      	b.n	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  case 0x01:  /* HSI used as PLL clock source */
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005b1e:	4a55      	ldr	r2, [pc, #340]	; (8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b2e:	4b4e      	ldr	r3, [pc, #312]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b42:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8005b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005b5e:	e041      	b.n	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005b60:	4a45      	ldr	r2, [pc, #276]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x26c>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b70:	4b3d      	ldr	r3, [pc, #244]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b80:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b84:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8005b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9c:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005ba0:	e020      	b.n	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005ba2:	4a34      	ldr	r2, [pc, #208]	; (8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bc6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8005be2:	bf00      	nop
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	0a5b      	lsrs	r3, r3, #9
 8005bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bee:	3301      	adds	r3, #1
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c04:	ee17 2a90 	vmov	r2, s15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c16:	3301      	adds	r3, #1
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3e:	3301      	adds	r3, #1
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c54:	ee17 2a90 	vmov	r2, s15
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]

}
 8005c5c:	bf00      	nop
 8005c5e:	3724      	adds	r7, #36	; 0x24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	03d09000 	.word	0x03d09000
 8005c70:	46000000 	.word	0x46000000
 8005c74:	003d0900 	.word	0x003d0900
 8005c78:	007a1200 	.word	0x007a1200

08005c7c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8005c82:	f7fe fc71 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8005c86:	4601      	mov	r1, r0
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <HAL_RCCEx_GetD1SysClockFreq+0x44>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fa93 f3a3 	rbit	r3, r3
 8005c9c:	603b      	str	r3, [r7, #0]
  return(result);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	fab3 f383 	clz	r3, r3
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <HAL_RCCEx_GetD1SysClockFreq+0x48>)
 8005caa:	5cd3      	ldrb	r3, [r2, r3]
 8005cac:	fa21 f303 	lsr.w	r3, r1, r3
 8005cb0:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 8005cb2:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	0800b2b4 	.word	0x0800b2b4
 8005cc8:	20000020 	.word	0x20000020

08005ccc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cda:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d101      	bne.n	8005cea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e083      	b.n	8005df2 <RCCEx_PLL2_Config+0x126>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cea:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005cec:	4b43      	ldr	r3, [pc, #268]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf6:	f7fa fccd 	bl	8000694 <HAL_GetTick>
 8005cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005cfc:	e008      	b.n	8005d10 <RCCEx_PLL2_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cfe:	f7fa fcc9 	bl	8000694 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e070      	b.n	8005df2 <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005d10:	4b3a      	ldr	r3, [pc, #232]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d1c:	4937      	ldr	r1, [pc, #220]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d1e:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	031b      	lsls	r3, r3, #12
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d30:	4932      	ldr	r1, [pc, #200]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	025b      	lsls	r3, r3, #9
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d62:	4313      	orrs	r3, r2
 8005d64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d66:	4925      	ldr	r1, [pc, #148]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d68:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d78:	4920      	ldr	r1, [pc, #128]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f023 0220 	bic.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <RCCEx_PLL2_Config+0xd2>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d90:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d92:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d9c:	e00f      	b.n	8005dbe <RCCEx_PLL2_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d106      	bne.n	8005db2 <RCCEx_PLL2_Config+0xe6>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005db0:	e005      	b.n	8005dbe <RCCEx_PLL2_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dca:	f7fa fc63 	bl	8000694 <HAL_GetTick>
 8005dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8005dd0:	e008      	b.n	8005de4 <RCCEx_PLL2_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dd2:	f7fa fc5f 	bl	8000694 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <RCCEx_PLL2_Config+0x118>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e006      	b.n	8005df2 <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <RCCEx_PLL2_Config+0x130>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <RCCEx_PLL2_Config+0x106>
    }

  }


  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400

08005e00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e0e:	4b48      	ldr	r3, [pc, #288]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d101      	bne.n	8005e1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e083      	b.n	8005f26 <RCCEx_PLL3_Config+0x126>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e1e:	4a44      	ldr	r2, [pc, #272]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e20:	4b43      	ldr	r3, [pc, #268]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2a:	f7fa fc33 	bl	8000694 <HAL_GetTick>
 8005e2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8005e30:	e008      	b.n	8005e44 <RCCEx_PLL3_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e32:	f7fa fc2f 	bl	8000694 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e070      	b.n	8005f26 <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8005e44:	4b3a      	ldr	r3, [pc, #232]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e50:	4937      	ldr	r1, [pc, #220]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e52:	4b37      	ldr	r3, [pc, #220]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	051b      	lsls	r3, r3, #20
 8005e60:	4313      	orrs	r3, r2
 8005e62:	628b      	str	r3, [r1, #40]	; 0x28
 8005e64:	4932      	ldr	r1, [pc, #200]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	025b      	lsls	r3, r3, #9
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e96:	4313      	orrs	r3, r2
 8005e98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e9a:	4925      	ldr	r1, [pc, #148]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e9c:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005eac:	4920      	ldr	r1, [pc, #128]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005eae:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <RCCEx_PLL3_Config+0xd2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed0:	e00f      	b.n	8005ef2 <RCCEx_PLL3_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLL3_Config+0xe6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee4:	e005      	b.n	8005ef2 <RCCEx_PLL3_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ef2:	4a0f      	ldr	r2, [pc, #60]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fa fbc9 	bl	8000694 <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8005f04:	e008      	b.n	8005f18 <RCCEx_PLL3_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f06:	f7fa fbc5 	bl	8000694 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <RCCEx_PLL3_Config+0x118>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <RCCEx_PLL3_Config+0x130>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <RCCEx_PLL3_Config+0x106>
    }

  }


  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400

08005f34 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e01d      	b.n	8005f82 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_TIM_Base_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f004 fd44 	bl	800a9e8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f000 fd0a 	bl	800698c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	68d2      	ldr	r2, [r2, #12]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	8812      	ldrh	r2, [r2, #0]
 8005fac:	b292      	uxth	r2, r2
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	801a      	strh	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e01d      	b.n	8006012 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f815 	bl	800601a <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f000 fcc2 	bl	800698c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_TIM_OC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e01d      	b.n	800607c <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f815 	bl	8006084 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f000 fc8d 	bl	800698c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f8ac 	bl	8007208 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_TIM_PWM_Start+0x84>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x4a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_TIM_PWM_Start+0x88>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x4a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <HAL_TIM_PWM_Start+0x8c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x4a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <HAL_TIM_PWM_Start+0x90>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x4a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <HAL_TIM_PWM_Start+0x94>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x4e>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <HAL_TIM_PWM_Start+0x50>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80060f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	b292      	uxth	r2, r2
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	b292      	uxth	r2, r2
 800610e:	801a      	strh	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
} 
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f860 	bl	8007208 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2b      	ldr	r2, [pc, #172]	; (80061fc <HAL_TIM_PWM_Stop+0xcc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_TIM_PWM_Stop+0x4a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <HAL_TIM_PWM_Stop+0xd0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIM_PWM_Stop+0x4a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a28      	ldr	r2, [pc, #160]	; (8006204 <HAL_TIM_PWM_Stop+0xd4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIM_PWM_Stop+0x4a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a27      	ldr	r2, [pc, #156]	; (8006208 <HAL_TIM_PWM_Stop+0xd8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIM_PWM_Stop+0x4a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a25      	ldr	r2, [pc, #148]	; (800620c <HAL_TIM_PWM_Stop+0xdc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_TIM_PWM_Stop+0x4e>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_TIM_PWM_Stop+0x50>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d017      	beq.n	80061b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	f241 1311 	movw	r3, #4369	; 0x1111
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <HAL_TIM_PWM_Stop+0x84>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	f240 4344 	movw	r3, #1092	; 0x444
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_PWM_Stop+0x84>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d111      	bne.n	80061e8 <HAL_TIM_PWM_Stop+0xb8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	f240 4344 	movw	r3, #1092	; 0x444
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <HAL_TIM_PWM_Stop+0xb8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	8812      	ldrh	r2, [r2, #0]
 80061de:	b292      	uxth	r2, r2
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	b292      	uxth	r2, r2
 80061e6:	801a      	strh	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
} 
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40010400 	.word	0x40010400
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800

08006210 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0202 	mvn.w	r2, #2
 800623c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb7c 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb6e 	bl	800693c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb7f 	bl	8006964 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0204 	mvn.w	r2, #4
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb52 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb44 	bl	800693c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb55 	bl	8006964 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0208 	mvn.w	r2, #8
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb28 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fb1a 	bl	800693c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fb2b 	bl	8006964 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b10      	cmp	r3, #16
 8006320:	d122      	bne.n	8006368 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b10      	cmp	r3, #16
 800632e:	d11b      	bne.n	8006368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0210 	mvn.w	r2, #16
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2208      	movs	r2, #8
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fafe 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 faf0 	bl	800693c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fb01 	bl	8006964 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0201 	mvn.w	r2, #1
 800638c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f003 f86e 	bl	8009470 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d10e      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f824 	bl	8007408 <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ce:	d10e      	bne.n	80063ee <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f80d 	bl	8007408 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d10e      	bne.n	800641a <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d107      	bne.n	800641a <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006412:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 faaf 	bl	8006978 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b20      	cmp	r3, #32
 8006426:	d10e      	bne.n	8006446 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d107      	bne.n	8006446 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f06f 0220 	mvn.w	r2, #32
 800643e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ffd7 	bl	80073f4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Process Locked */
  __HAL_LOCK(htim); 
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006466:	2302      	movs	r3, #2
 8006468:	e06c      	b.n	8006544 <HAL_TIM_OC_ConfigChannel+0xf4>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  switch (Channel)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b14      	cmp	r3, #20
 800647e:	d857      	bhi.n	8006530 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064dd 	.word	0x080064dd
 800648c:	08006531 	.word	0x08006531
 8006490:	08006531 	.word	0x08006531
 8006494:	08006531 	.word	0x08006531
 8006498:	080064eb 	.word	0x080064eb
 800649c:	08006531 	.word	0x08006531
 80064a0:	08006531 	.word	0x08006531
 80064a4:	08006531 	.word	0x08006531
 80064a8:	080064f9 	.word	0x080064f9
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006531 	.word	0x08006531
 80064b4:	08006531 	.word	0x08006531
 80064b8:	08006507 	.word	0x08006507
 80064bc:	08006531 	.word	0x08006531
 80064c0:	08006531 	.word	0x08006531
 80064c4:	08006531 	.word	0x08006531
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006531 	.word	0x08006531
 80064d4:	08006531 	.word	0x08006531
 80064d8:	08006523 	.word	0x08006523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 faf2 	bl	8006acc <TIM_OC1_SetConfig>
    }
    break;
 80064e8:	e023      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fb81 	bl	8006bf8 <TIM_OC2_SetConfig>
    }
    break;
 80064f6:	e01c      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fc0a 	bl	8006d18 <TIM_OC3_SetConfig>
    }
    break;
 8006504:	e015      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fc8f 	bl	8006e30 <TIM_OC4_SetConfig>
    }
    break;
 8006512:	e00e      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fcf6 	bl	8006f0c <TIM_OC5_SetConfig>
    }
    break;
 8006520:	e007      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fd57 	bl	8006fdc <TIM_OC6_SetConfig>
    }
    break;
 800652e:	e000      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 8006530:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim); 
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));



  /* Process Locked */
  __HAL_LOCK(htim);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006562:	2302      	movs	r3, #2
 8006564:	e105      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2202      	movs	r2, #2
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b14      	cmp	r3, #20
 800657a:	f200 80f0 	bhi.w	800675e <HAL_TIM_PWM_ConfigChannel+0x212>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	080065d9 	.word	0x080065d9
 8006588:	0800675f 	.word	0x0800675f
 800658c:	0800675f 	.word	0x0800675f
 8006590:	0800675f 	.word	0x0800675f
 8006594:	08006619 	.word	0x08006619
 8006598:	0800675f 	.word	0x0800675f
 800659c:	0800675f 	.word	0x0800675f
 80065a0:	0800675f 	.word	0x0800675f
 80065a4:	0800665b 	.word	0x0800665b
 80065a8:	0800675f 	.word	0x0800675f
 80065ac:	0800675f 	.word	0x0800675f
 80065b0:	0800675f 	.word	0x0800675f
 80065b4:	0800669b 	.word	0x0800669b
 80065b8:	0800675f 	.word	0x0800675f
 80065bc:	0800675f 	.word	0x0800675f
 80065c0:	0800675f 	.word	0x0800675f
 80065c4:	080066dd 	.word	0x080066dd
 80065c8:	0800675f 	.word	0x0800675f
 80065cc:	0800675f 	.word	0x0800675f
 80065d0:	0800675f 	.word	0x0800675f
 80065d4:	0800671d 	.word	0x0800671d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fa74 	bl	8006acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	6992      	ldr	r2, [r2, #24]
 80065ee:	f042 0208 	orr.w	r2, r2, #8
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	6992      	ldr	r2, [r2, #24]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	6991      	ldr	r1, [r2, #24]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	6912      	ldr	r2, [r2, #16]
 8006612:	430a      	orrs	r2, r1
 8006614:	619a      	str	r2, [r3, #24]
    }
    break;
 8006616:	e0a3      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 faea 	bl	8006bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	6992      	ldr	r2, [r2, #24]
 800662e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	6992      	ldr	r2, [r2, #24]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	6991      	ldr	r1, [r2, #24]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	6912      	ldr	r2, [r2, #16]
 8006652:	0212      	lsls	r2, r2, #8
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]
    }
    break;
 8006658:	e082      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fb59 	bl	8006d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	69d2      	ldr	r2, [r2, #28]
 8006670:	f042 0208 	orr.w	r2, r2, #8
 8006674:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	69d2      	ldr	r2, [r2, #28]
 8006680:	f022 0204 	bic.w	r2, r2, #4
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	69d1      	ldr	r1, [r2, #28]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	6912      	ldr	r2, [r2, #16]
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]
    }
    break;
 8006698:	e062      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fbc5 	bl	8006e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	69d2      	ldr	r2, [r2, #28]
 80066b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	69d2      	ldr	r2, [r2, #28]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	69d1      	ldr	r1, [r2, #28]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	6912      	ldr	r2, [r2, #16]
 80066d4:	0212      	lsls	r2, r2, #8
 80066d6:	430a      	orrs	r2, r1
 80066d8:	61da      	str	r2, [r3, #28]
    }
    break;
 80066da:	e041      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fc12 	bl	8006f0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066f2:	f042 0208 	orr.w	r2, r2, #8
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006702:	f022 0204 	bic.w	r2, r2, #4
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	6912      	ldr	r2, [r2, #16]
 8006716:	430a      	orrs	r2, r1
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800671a:	e021      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fc5a 	bl	8006fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006736:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	6912      	ldr	r2, [r2, #16]
 8006756:	0212      	lsls	r2, r2, #8
 8006758:	430a      	orrs	r2, r1
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x214>

    default:
    break;
 800675e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop

0800677c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIM_ConfigClockSource+0x1c>
 8006794:	2302      	movs	r3, #2
 8006796:	e0c8      	b.n	800692a <HAL_TIM_ConfigClockSource+0x1ae>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4b60      	ldr	r3, [pc, #384]	; (8006934 <HAL_TIM_ConfigClockSource+0x1b8>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d077      	beq.n	80068c0 <HAL_TIM_ConfigClockSource+0x144>
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d80e      	bhi.n	80067f2 <HAL_TIM_ConfigClockSource+0x76>
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	f000 808a 	beq.w	80068ee <HAL_TIM_ConfigClockSource+0x172>
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d802      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x68>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d07e      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80067e2:	e099      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	f000 8089 	beq.w	80068fc <HAL_TIM_ConfigClockSource+0x180>
 80067ea:	2b30      	cmp	r3, #48	; 0x30
 80067ec:	f000 808d 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 80067f0:	e092      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80067f2:	2b70      	cmp	r3, #112	; 0x70
 80067f4:	d016      	beq.n	8006824 <HAL_TIM_ConfigClockSource+0xa8>
 80067f6:	2b70      	cmp	r3, #112	; 0x70
 80067f8:	d804      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x88>
 80067fa:	2b50      	cmp	r3, #80	; 0x50
 80067fc:	d040      	beq.n	8006880 <HAL_TIM_ConfigClockSource+0x104>
 80067fe:	2b60      	cmp	r3, #96	; 0x60
 8006800:	d04e      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8006802:	e089      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d003      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x96>
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	d024      	beq.n	800685a <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006810:	e082      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6899      	ldr	r1, [r3, #8]
 800681c:	4b46      	ldr	r3, [pc, #280]	; (8006938 <HAL_TIM_ConfigClockSource+0x1bc>)
 800681e:	400b      	ands	r3, r1
 8006820:	6093      	str	r3, [r2, #8]
    break;
 8006822:	e079      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6899      	ldr	r1, [r3, #8]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f000 fcc6 	bl	80071c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4b3c      	ldr	r3, [pc, #240]	; (8006934 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800684e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	609a      	str	r2, [r3, #8]
    break;
 8006858:	e05e      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6899      	ldr	r1, [r3, #8]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f000 fcab 	bl	80071c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	6892      	ldr	r2, [r2, #8]
 8006878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800687c:	609a      	str	r2, [r3, #8]
    break;
 800687e:	e04b      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	461a      	mov	r2, r3
 800688e:	f000 fc0f 	bl	80070b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2150      	movs	r1, #80	; 0x50
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fc71 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 800689e:	e03b      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	461a      	mov	r2, r3
 80068ae:	f000 fc32 	bl	8007116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2160      	movs	r1, #96	; 0x60
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fc61 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 80068be:	e02b      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	461a      	mov	r2, r3
 80068ce:	f000 fbef 	bl	80070b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2140      	movs	r1, #64	; 0x40
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fc51 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 80068de:	e01b      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fc4a 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 80068ec:	e014      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2110      	movs	r1, #16
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fc43 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 80068fa:	e00d      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2120      	movs	r1, #32
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fc3c 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 8006908:	e006      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2130      	movs	r1, #48	; 0x30
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fc35 	bl	8007180 <TIM_ITRx_SetConfig>
    break;
 8006916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	ffceff88 	.word	0xffceff88
 8006938:	fffefff8 	.word	0xfffefff8

0800693c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a41      	ldr	r2, [pc, #260]	; (8006aac <TIM_Base_SetConfig+0x120>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <TIM_Base_SetConfig+0x46>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d00f      	beq.n	80069d2 <TIM_Base_SetConfig+0x46>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a3e      	ldr	r2, [pc, #248]	; (8006ab0 <TIM_Base_SetConfig+0x124>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_Base_SetConfig+0x46>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a3d      	ldr	r2, [pc, #244]	; (8006ab4 <TIM_Base_SetConfig+0x128>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_Base_SetConfig+0x46>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a3c      	ldr	r2, [pc, #240]	; (8006ab8 <TIM_Base_SetConfig+0x12c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_Base_SetConfig+0x46>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a3b      	ldr	r2, [pc, #236]	; (8006abc <TIM_Base_SetConfig+0x130>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d108      	bne.n	80069e4 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a31      	ldr	r2, [pc, #196]	; (8006aac <TIM_Base_SetConfig+0x120>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d01f      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d01b      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a2e      	ldr	r2, [pc, #184]	; (8006ab0 <TIM_Base_SetConfig+0x124>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d017      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a2d      	ldr	r2, [pc, #180]	; (8006ab4 <TIM_Base_SetConfig+0x128>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a2c      	ldr	r2, [pc, #176]	; (8006ab8 <TIM_Base_SetConfig+0x12c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <TIM_Base_SetConfig+0x130>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a29      	ldr	r2, [pc, #164]	; (8006ac4 <TIM_Base_SetConfig+0x138>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_Base_SetConfig+0xa0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <TIM_Base_SetConfig+0x13c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a10      	ldr	r2, [pc, #64]	; (8006aac <TIM_Base_SetConfig+0x120>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00f      	beq.n	8006a8e <TIM_Base_SetConfig+0x102>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <TIM_Base_SetConfig+0x130>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <TIM_Base_SetConfig+0x102>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_Base_SetConfig+0x102>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <TIM_Base_SetConfig+0x138>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d003      	beq.n	8006a8e <TIM_Base_SetConfig+0x102>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0f      	ldr	r2, [pc, #60]	; (8006ac8 <TIM_Base_SetConfig+0x13c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d104      	bne.n	8006a98 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	615a      	str	r2, [r3, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800

08006acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4b37      	ldr	r3, [pc, #220]	; (8006be0 <TIM_OC1_SetConfig+0x114>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0302 	bic.w	r3, r3, #2
 8006b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <TIM_OC1_SetConfig+0x118>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_OC1_SetConfig+0x88>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a2c      	ldr	r2, [pc, #176]	; (8006be8 <TIM_OC1_SetConfig+0x11c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_OC1_SetConfig+0x88>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <TIM_OC1_SetConfig+0x120>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_OC1_SetConfig+0x88>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <TIM_OC1_SetConfig+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC1_SetConfig+0x88>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a29      	ldr	r2, [pc, #164]	; (8006bf4 <TIM_OC1_SetConfig+0x128>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10c      	bne.n	8006b6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0308 	bic.w	r3, r3, #8
 8006b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 0304 	bic.w	r3, r3, #4
 8006b6c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <TIM_OC1_SetConfig+0x118>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_OC1_SetConfig+0xca>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <TIM_OC1_SetConfig+0x11c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_OC1_SetConfig+0xca>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <TIM_OC1_SetConfig+0x120>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_OC1_SetConfig+0xca>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <TIM_OC1_SetConfig+0x124>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC1_SetConfig+0xca>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <TIM_OC1_SetConfig+0x128>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d111      	bne.n	8006bba <TIM_OC1_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
} 
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	fffeff8f 	.word	0xfffeff8f
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800

08006bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0210 	bic.w	r2, r3, #16
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4b34      	ldr	r3, [pc, #208]	; (8006d00 <TIM_OC2_SetConfig+0x108>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0320 	bic.w	r3, r3, #32
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <TIM_OC2_SetConfig+0x10c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC2_SetConfig+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <TIM_OC2_SetConfig+0x110>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10d      	bne.n	8006c88 <TIM_OC2_SetConfig+0x90>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <TIM_OC2_SetConfig+0x10c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xb8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1d      	ldr	r2, [pc, #116]	; (8006d08 <TIM_OC2_SetConfig+0x110>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xb8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <TIM_OC2_SetConfig+0x114>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xb8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <TIM_OC2_SetConfig+0x118>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xb8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <TIM_OC2_SetConfig+0x11c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d113      	bne.n	8006cd8 <TIM_OC2_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	feff8fff 	.word	0xfeff8fff
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a27      	ldr	r2, [pc, #156]	; (8006e1c <TIM_OC3_SetConfig+0x104>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_OC3_SetConfig+0x72>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <TIM_OC3_SetConfig+0x108>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10d      	bne.n	8006da6 <TIM_OC3_SetConfig+0x8e>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC3_SetConfig+0x104>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_OC3_SetConfig+0xb6>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <TIM_OC3_SetConfig+0x108>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_OC3_SetConfig+0xb6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <TIM_OC3_SetConfig+0x10c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_OC3_SetConfig+0xb6>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <TIM_OC3_SetConfig+0x110>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0xb6>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <TIM_OC3_SetConfig+0x114>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d113      	bne.n	8006df6 <TIM_OC3_SetConfig+0xde>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e72:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <TIM_OC4_SetConfig+0xc8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00f      	beq.n	8006ebc <TIM_OC4_SetConfig+0x8c>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <TIM_OC4_SetConfig+0xcc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00b      	beq.n	8006ebc <TIM_OC4_SetConfig+0x8c>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <TIM_OC4_SetConfig+0xd0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d007      	beq.n	8006ebc <TIM_OC4_SetConfig+0x8c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <TIM_OC4_SetConfig+0xd4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC4_SetConfig+0x8c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <TIM_OC4_SetConfig+0xd8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d109      	bne.n	8006ed0 <TIM_OC4_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000
 8006efc:	40010400 	.word	0x40010400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800

08006f0c <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f58:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <TIM_OC5_SetConfig+0xbc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00f      	beq.n	8006f8e <TIM_OC5_SetConfig+0x82>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <TIM_OC5_SetConfig+0xc0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00b      	beq.n	8006f8e <TIM_OC5_SetConfig+0x82>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <TIM_OC5_SetConfig+0xc4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <TIM_OC5_SetConfig+0x82>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <TIM_OC5_SetConfig+0xc8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC5_SetConfig+0x82>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a13      	ldr	r2, [pc, #76]	; (8006fd8 <TIM_OC5_SetConfig+0xcc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d109      	bne.n	8006fa2 <TIM_OC5_SetConfig+0x96>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800

08006fdc <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800702a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	051b      	lsls	r3, r3, #20
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <TIM_OC6_SetConfig+0xc0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_OC6_SetConfig+0x84>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <TIM_OC6_SetConfig+0xc4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_OC6_SetConfig+0x84>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a16      	ldr	r2, [pc, #88]	; (80070a4 <TIM_OC6_SetConfig+0xc8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_OC6_SetConfig+0x84>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <TIM_OC6_SetConfig+0xcc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC6_SetConfig+0x84>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a14      	ldr	r2, [pc, #80]	; (80070ac <TIM_OC6_SetConfig+0xd0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d109      	bne.n	8007074 <TIM_OC6_SetConfig+0x98>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
} 
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40010000 	.word	0x40010000
 80070a0:	40010400 	.word	0x40010400
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800

080070b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f023 030a 	bic.w	r3, r3, #10
 80070f4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007116:	b480      	push	{r7}
 8007118:	b087      	sub	sp, #28
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0210 	bic.w	r2, r3, #16
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800715a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <TIM_ITRx_SetConfig+0x40>)
 800719a:	4013      	ands	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	f043 0307 	orr.w	r3, r3, #7
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	609a      	str	r2, [r3, #8]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	ffcfff8f 	.word	0xffcfff8f

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	021a      	lsls	r2, r3, #8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	609a      	str	r2, [r3, #8]
} 
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8007218:	2201      	movs	r2, #1
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	43db      	mvns	r3, r3
 800722a:	401a      	ands	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1a      	ldr	r2, [r3, #32]
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e03d      	b.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d004      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800729a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
} 
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40010400 	.word	0x40010400

080072f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *          contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007310:	2302      	movs	r3, #2
 8007312:	e065      	b.n	80073e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d115      	bne.n	80073ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40010400 	.word	0x40010400

080073f4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e043      	b.n	80074b6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f003 fc44 	bl	800acd0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	; 0x24
 800744c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fab7 	bl	80079d4 <UART_SetConfig>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e022      	b.n	80074b6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 fa59 	bl	8008930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	6852      	ldr	r2, [r2, #4]
 8007488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800748c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	6892      	ldr	r2, [r2, #8]
 8007498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800749c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fae0 	bl	8008a74 <UART_CheckIdleState>
 80074b4:	4603      	mov	r3, r0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b088      	sub	sp, #32
 80074c2:	af02      	add	r7, sp, #8
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d177      	bne.n	80075ce <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_UART_Transmit+0x2c>
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e070      	b.n	80075d0 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_UART_Transmit+0x3e>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e069      	b.n	80075d0 <HAL_UART_Transmit+0x112>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2221      	movs	r2, #33	; 0x21
 800750e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007512:	f7f9 f8bf 	bl	8000694 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	88fa      	ldrh	r2, [r7, #6]
 800751c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    huart->TxXferCount = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 8007528:	e034      	b.n	8007594 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 fadd 	bl	8008b06 <UART_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e03c      	b.n	80075d0 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	d111      	bne.n	8007584 <HAL_UART_Transmit+0xc6>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	8812      	ldrh	r2, [r2, #0]
 8007574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007578:	b292      	uxth	r2, r2
 800757a:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	3302      	adds	r3, #2
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	e007      	b.n	8007594 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1c4      	bne.n	800752a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2200      	movs	r2, #0
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 faab 	bl	8008b06 <UART_WaitOnFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e00a      	b.n	80075d0 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e000      	b.n	80075d0 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
  }
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	f040 808b 	bne.w	800770a <HAL_UART_Receive_IT+0x132>
  {
    if((pData == NULL ) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_UART_Receive_IT+0x28>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e083      	b.n	800770c <HAL_UART_Receive_IT+0x134>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_UART_Receive_IT+0x3a>
 800760e:	2302      	movs	r3, #2
 8007610:	e07c      	b.n	800770c <HAL_UART_Receive_IT+0x134>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    huart->pRxBuffPtr = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	665a      	str	r2, [r3, #100]	; 0x64
    huart->RxXferSize = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->RxXferCount = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d10e      	bne.n	8007658 <HAL_UART_Receive_IT+0x80>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <HAL_UART_Receive_IT+0x76>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007648:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800764c:	e028      	b.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	22ff      	movs	r2, #255	; 0xff
 8007652:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8007656:	e023      	b.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10d      	bne.n	800767c <HAL_UART_Receive_IT+0xa4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_UART_Receive_IT+0x9a>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	22ff      	movs	r2, #255	; 0xff
 800766c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8007670:	e016      	b.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	227f      	movs	r2, #127	; 0x7f
 8007676:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800767a:	e011      	b.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007684:	d10c      	bne.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d104      	bne.n	8007698 <HAL_UART_Receive_IT+0xc0>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	227f      	movs	r2, #127	; 0x7f
 8007692:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8007696:	e003      	b.n	80076a0 <HAL_UART_Receive_IT+0xc8>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	223f      	movs	r2, #63	; 0x3f
 800769c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2222      	movs	r2, #34	; 0x22
 80076aa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error interupt and RX FIFO Threshold interrupt
       (if FIFO mode is enabled) or Data Register Not Empty interrupt
       (if FIFO mode is disabled).
    */
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d010      	beq.n	80076f6 <HAL_UART_Receive_IT+0x11e>
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	6892      	ldr	r2, [r2, #8]
 80076ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	e007      	b.n	8007706 <HAL_UART_Receive_IT+0x12e>
    }
    else
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007704:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_UART_Receive_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d112      	bne.n	800776c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00d      	beq.n	800776c <HAL_UART_IRQHandler+0x54>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <HAL_UART_IRQHandler+0x4c>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_UART_IRQHandler+0x54>
    {
      UART_Receive_IT(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 facc 	bl	8008d02 <UART_Receive_IT>
      return;
 800776a:	e117      	b.n	800799c <HAL_UART_IRQHandler+0x284>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80c4 	beq.w	80078fc <HAL_UART_IRQHandler+0x1e4>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <HAL_UART_IRQHandler+0x28c>)
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <HAL_UART_IRQHandler+0x72>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80b9 	beq.w	80078fc <HAL_UART_IRQHandler+0x1e4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <HAL_UART_IRQHandler+0x9a>
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_UART_IRQHandler+0x9a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2201      	movs	r2, #1
 80077a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077aa:	f043 0201 	orr.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <HAL_UART_IRQHandler+0xc2>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_UART_IRQHandler+0xc2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2202      	movs	r2, #2
 80077cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	f043 0204 	orr.w	r2, r3, #4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00e      	beq.n	8007802 <HAL_UART_IRQHandler+0xea>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_UART_IRQHandler+0xea>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2204      	movs	r2, #4
 80077f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077fa:	f043 0202 	orr.w	r2, r3, #2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d018      	beq.n	800783e <HAL_UART_IRQHandler+0x126>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <HAL_UART_IRQHandler+0x112>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_UART_IRQHandler+0x112>
             ((cr3its & USART_CR3_EIE) != RESET)) )
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 0301 	and.w	r3, r3, #1
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2208      	movs	r2, #8
 8007830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007836:	f043 0208 	orr.w	r2, r3, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80a9 	beq.w	800799a <HAL_UART_IRQHandler+0x282>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HAL_UART_IRQHandler+0x154>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <HAL_UART_IRQHandler+0x14e>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_UART_IRQHandler+0x154>
      {
        UART_Receive_IT(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fa4b 	bl	8008d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <HAL_UART_IRQHandler+0x16e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8007882:	2b00      	cmp	r3, #0
 8007884:	d031      	beq.n	80078ea <HAL_UART_IRQHandler+0x1d2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 f987 	bl	8008b9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d023      	beq.n	80078e2 <HAL_UART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	6892      	ldr	r2, [r2, #8]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d013      	beq.n	80078da <HAL_UART_IRQHandler+0x1c2>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b6:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <HAL_UART_IRQHandler+0x290>)
 80078b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fa fe4a 	bl	8002558 <HAL_DMA_Abort_IT>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d016      	beq.n	80078f8 <HAL_UART_IRQHandler+0x1e0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d8:	e00e      	b.n	80078f8 <HAL_UART_IRQHandler+0x1e0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f870 	bl	80079c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	e00a      	b.n	80078f8 <HAL_UART_IRQHandler+0x1e0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f86c 	bl	80079c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e006      	b.n	80078f8 <HAL_UART_IRQHandler+0x1e0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f868 	bl	80079c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80078f6:	e050      	b.n	800799a <HAL_UART_IRQHandler+0x282>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	bf00      	nop
    return;
 80078fa:	e04e      	b.n	800799a <HAL_UART_IRQHandler+0x282>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d015      	beq.n	8007932 <HAL_UART_IRQHandler+0x21a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <HAL_UART_IRQHandler+0x21a>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007918:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    HAL_UARTEx_WakeupCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fa55 	bl	8008dda <HAL_UARTEx_WakeupCallback>
    return;
 8007930:	e034      	b.n	800799c <HAL_UART_IRQHandler+0x284>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00d      	beq.n	8007958 <HAL_UART_IRQHandler+0x240>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_UART_IRQHandler+0x238>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_UART_IRQHandler+0x240>
  {
    UART_Transmit_IT(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f956 	bl	8008c02 <UART_Transmit_IT>
    return;
 8007956:	e021      	b.n	800799c <HAL_UART_IRQHandler+0x284>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_UART_IRQHandler+0x25c>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_UART_IRQHandler+0x25c>
  {
    UART_EndTransmit_IT(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f9b0 	bl	8008cd2 <UART_EndTransmit_IT>
    return;
 8007972:	e013      	b.n	800799c <HAL_UART_IRQHandler+0x284>
  }

  /* UART TX FIFO Empty  -----------------------------------------------------*/
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <HAL_UART_IRQHandler+0x284>
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_UART_IRQHandler+0x284>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e000      	b.n	800799c <HAL_UART_IRQHandler+0x284>
    return;
 800799a:	bf00      	nop
  }
}
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	10000001 	.word	0x10000001
 80079a8:	08008bd7 	.word	0x08008bd7

080079ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	b095      	sub	sp, #84	; 0x54
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg                     = 0x00000000U;
 80079de:	2300      	movs	r3, #0
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80079e2:	2380      	movs	r3, #128	; 0x80
 80079e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint16_t brrtemp                    = 0x0000U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t usartdiv                   = 0x0000U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef ret               = HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4ac0      	ldr	r2, [pc, #768]	; (8007d28 <UART_SetConfig+0x354>)
 8007a28:	401a      	ands	r2, r3
 8007a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	604b      	str	r3, [r1, #4]
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4bb6      	ldr	r3, [pc, #728]	; (8007d2c <UART_SetConfig+0x358>)
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d004      	beq.n	8007a60 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a68:	d107      	bne.n	8007a7a <UART_SetConfig+0xa6>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	431a      	orrs	r2, r3
 8007a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a76:	4313      	orrs	r3, r2
 8007a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4aaa      	ldr	r2, [pc, #680]	; (8007d30 <UART_SetConfig+0x35c>)
 8007a86:	401a      	ands	r2, r3
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	608b      	str	r3, [r1, #8]

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f023 020f 	bic.w	r2, r3, #15
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4ba2      	ldr	r3, [pc, #648]	; (8007d34 <UART_SetConfig+0x360>)
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d175      	bne.n	8007b9a <UART_SetConfig+0x1c6>
 8007aae:	4ba2      	ldr	r3, [pc, #648]	; (8007d38 <UART_SetConfig+0x364>)
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ab6:	2b28      	cmp	r3, #40	; 0x28
 8007ab8:	f200 8266 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0xf0>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007b69 	.word	0x08007b69
 8007ac8:	08007f89 	.word	0x08007f89
 8007acc:	08007f89 	.word	0x08007f89
 8007ad0:	08007f89 	.word	0x08007f89
 8007ad4:	08007f89 	.word	0x08007f89
 8007ad8:	08007f89 	.word	0x08007f89
 8007adc:	08007f89 	.word	0x08007f89
 8007ae0:	08007f89 	.word	0x08007f89
 8007ae4:	08007b71 	.word	0x08007b71
 8007ae8:	08007f89 	.word	0x08007f89
 8007aec:	08007f89 	.word	0x08007f89
 8007af0:	08007f89 	.word	0x08007f89
 8007af4:	08007f89 	.word	0x08007f89
 8007af8:	08007f89 	.word	0x08007f89
 8007afc:	08007f89 	.word	0x08007f89
 8007b00:	08007f89 	.word	0x08007f89
 8007b04:	08007b79 	.word	0x08007b79
 8007b08:	08007f89 	.word	0x08007f89
 8007b0c:	08007f89 	.word	0x08007f89
 8007b10:	08007f89 	.word	0x08007f89
 8007b14:	08007f89 	.word	0x08007f89
 8007b18:	08007f89 	.word	0x08007f89
 8007b1c:	08007f89 	.word	0x08007f89
 8007b20:	08007f89 	.word	0x08007f89
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007f89 	.word	0x08007f89
 8007b2c:	08007f89 	.word	0x08007f89
 8007b30:	08007f89 	.word	0x08007f89
 8007b34:	08007f89 	.word	0x08007f89
 8007b38:	08007f89 	.word	0x08007f89
 8007b3c:	08007f89 	.word	0x08007f89
 8007b40:	08007f89 	.word	0x08007f89
 8007b44:	08007b89 	.word	0x08007b89
 8007b48:	08007f89 	.word	0x08007f89
 8007b4c:	08007f89 	.word	0x08007f89
 8007b50:	08007f89 	.word	0x08007f89
 8007b54:	08007f89 	.word	0x08007f89
 8007b58:	08007f89 	.word	0x08007f89
 8007b5c:	08007f89 	.word	0x08007f89
 8007b60:	08007f89 	.word	0x08007f89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b6e:	e20a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b76:	e206      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b7e:	e202      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b80:	2308      	movs	r3, #8
 8007b82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b86:	e1fe      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b8e:	e1fa      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b90:	2320      	movs	r3, #32
 8007b92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b96:	bf00      	nop
 8007b98:	e1f5      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b67      	ldr	r3, [pc, #412]	; (8007d3c <UART_SetConfig+0x368>)
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d12e      	bne.n	8007c02 <UART_SetConfig+0x22e>
 8007ba4:	4b64      	ldr	r3, [pc, #400]	; (8007d38 <UART_SetConfig+0x364>)
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	f200 81eb 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007bb2:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0x1e4>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007bd1 	.word	0x08007bd1
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007be1 	.word	0x08007be1
 8007bc4:	08007be9 	.word	0x08007be9
 8007bc8:	08007bf1 	.word	0x08007bf1
 8007bcc:	08007bf9 	.word	0x08007bf9
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007bd6:	e1d6      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007bde:	e1d2      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007be6:	e1ce      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007bee:	e1ca      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007bf6:	e1c6      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007bfe:	bf00      	nop
 8007c00:	e1c1      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b4e      	ldr	r3, [pc, #312]	; (8007d40 <UART_SetConfig+0x36c>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d12e      	bne.n	8007c6a <UART_SetConfig+0x296>
 8007c0c:	4b4a      	ldr	r3, [pc, #296]	; (8007d38 <UART_SetConfig+0x364>)
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	f200 81b7 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x24c>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c49 	.word	0x08007c49
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c3e:	e1a2      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c46:	e19e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c48:	2340      	movs	r3, #64	; 0x40
 8007c4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c4e:	e19a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c56:	e196      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c5e:	e192      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007c66:	bf00      	nop
 8007c68:	e18d      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b35      	ldr	r3, [pc, #212]	; (8007d44 <UART_SetConfig+0x370>)
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d12e      	bne.n	8007cd2 <UART_SetConfig+0x2fe>
 8007c74:	4b30      	ldr	r3, [pc, #192]	; (8007d38 <UART_SetConfig+0x364>)
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	f200 8183 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <UART_SetConfig+0x2b4>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007ca1 	.word	0x08007ca1
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	08007cb1 	.word	0x08007cb1
 8007c94:	08007cb9 	.word	0x08007cb9
 8007c98:	08007cc1 	.word	0x08007cc1
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007ca6:	e16e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007cae:	e16a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007cb6:	e166      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007cb8:	2308      	movs	r3, #8
 8007cba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007cbe:	e162      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007cc6:	e15e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007cc8:	2320      	movs	r3, #32
 8007cca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007cce:	bf00      	nop
 8007cd0:	e159      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <UART_SetConfig+0x374>)
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d140      	bne.n	8007d5e <UART_SetConfig+0x38a>
 8007cdc:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <UART_SetConfig+0x364>)
 8007cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	2b05      	cmp	r3, #5
 8007ce6:	f200 814f 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x31c>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d09 	.word	0x08007d09
 8007cf4:	08007d11 	.word	0x08007d11
 8007cf8:	08007d19 	.word	0x08007d19
 8007cfc:	08007d21 	.word	0x08007d21
 8007d00:	08007d4d 	.word	0x08007d4d
 8007d04:	08007d55 	.word	0x08007d55
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d0e:	e13a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d10:	2304      	movs	r3, #4
 8007d12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d16:	e136      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d1e:	e132      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d26:	e12e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d28:	cfff69f3 	.word	0xcfff69f3
 8007d2c:	58000c00 	.word	0x58000c00
 8007d30:	11fff4ff 	.word	0x11fff4ff
 8007d34:	40011000 	.word	0x40011000
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	40004400 	.word	0x40004400
 8007d40:	40004800 	.word	0x40004800
 8007d44:	40004c00 	.word	0x40004c00
 8007d48:	40005000 	.word	0x40005000
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d52:	e118      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007d5a:	bf00      	nop
 8007d5c:	e113      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4bc5      	ldr	r3, [pc, #788]	; (8008078 <UART_SetConfig+0x6a4>)
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d174      	bne.n	8007e52 <UART_SetConfig+0x47e>
 8007d68:	4bc4      	ldr	r3, [pc, #784]	; (800807c <UART_SetConfig+0x6a8>)
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d70:	2b28      	cmp	r3, #40	; 0x28
 8007d72:	f200 8109 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <UART_SetConfig+0x3a8>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007f89 	.word	0x08007f89
 8007d84:	08007f89 	.word	0x08007f89
 8007d88:	08007f89 	.word	0x08007f89
 8007d8c:	08007f89 	.word	0x08007f89
 8007d90:	08007f89 	.word	0x08007f89
 8007d94:	08007f89 	.word	0x08007f89
 8007d98:	08007f89 	.word	0x08007f89
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007f89 	.word	0x08007f89
 8007da4:	08007f89 	.word	0x08007f89
 8007da8:	08007f89 	.word	0x08007f89
 8007dac:	08007f89 	.word	0x08007f89
 8007db0:	08007f89 	.word	0x08007f89
 8007db4:	08007f89 	.word	0x08007f89
 8007db8:	08007f89 	.word	0x08007f89
 8007dbc:	08007e31 	.word	0x08007e31
 8007dc0:	08007f89 	.word	0x08007f89
 8007dc4:	08007f89 	.word	0x08007f89
 8007dc8:	08007f89 	.word	0x08007f89
 8007dcc:	08007f89 	.word	0x08007f89
 8007dd0:	08007f89 	.word	0x08007f89
 8007dd4:	08007f89 	.word	0x08007f89
 8007dd8:	08007f89 	.word	0x08007f89
 8007ddc:	08007e39 	.word	0x08007e39
 8007de0:	08007f89 	.word	0x08007f89
 8007de4:	08007f89 	.word	0x08007f89
 8007de8:	08007f89 	.word	0x08007f89
 8007dec:	08007f89 	.word	0x08007f89
 8007df0:	08007f89 	.word	0x08007f89
 8007df4:	08007f89 	.word	0x08007f89
 8007df8:	08007f89 	.word	0x08007f89
 8007dfc:	08007e41 	.word	0x08007e41
 8007e00:	08007f89 	.word	0x08007f89
 8007e04:	08007f89 	.word	0x08007f89
 8007e08:	08007f89 	.word	0x08007f89
 8007e0c:	08007f89 	.word	0x08007f89
 8007e10:	08007f89 	.word	0x08007f89
 8007e14:	08007f89 	.word	0x08007f89
 8007e18:	08007f89 	.word	0x08007f89
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e26:	e0ae      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e2e:	e0aa      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e36:	e0a6      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e3e:	e0a2      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e46:	e09e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e4e:	bf00      	nop
 8007e50:	e099      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b8a      	ldr	r3, [pc, #552]	; (8008080 <UART_SetConfig+0x6ac>)
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d12e      	bne.n	8007eba <UART_SetConfig+0x4e6>
 8007e5c:	4b87      	ldr	r3, [pc, #540]	; (800807c <UART_SetConfig+0x6a8>)
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	f200 808f 	bhi.w	8007f88 <UART_SetConfig+0x5b4>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x49c>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007e91 	.word	0x08007e91
 8007e78:	08007e99 	.word	0x08007e99
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ea9 	.word	0x08007ea9
 8007e84:	08007eb1 	.word	0x08007eb1
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e8e:	e07a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e90:	2304      	movs	r3, #4
 8007e92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e96:	e076      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007e98:	2340      	movs	r3, #64	; 0x40
 8007e9a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007e9e:	e072      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007ea6:	e06e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007eae:	e06a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007eb6:	bf00      	nop
 8007eb8:	e065      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b71      	ldr	r3, [pc, #452]	; (8008084 <UART_SetConfig+0x6b0>)
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d12e      	bne.n	8007f22 <UART_SetConfig+0x54e>
 8007ec4:	4b6d      	ldr	r3, [pc, #436]	; (800807c <UART_SetConfig+0x6a8>)
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	d85b      	bhi.n	8007f88 <UART_SetConfig+0x5b4>
 8007ed0:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x504>)
 8007ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed6:	bf00      	nop
 8007ed8:	08007ef1 	.word	0x08007ef1
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f11 	.word	0x08007f11
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007ef6:	e046      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007ef8:	2304      	movs	r3, #4
 8007efa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007efe:	e042      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f06:	e03e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f0e:	e03a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f16:	e036      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f1e:	bf00      	nop
 8007f20:	e031      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b58      	ldr	r3, [pc, #352]	; (8008088 <UART_SetConfig+0x6b4>)
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d12d      	bne.n	8007f88 <UART_SetConfig+0x5b4>
 8007f2c:	4b53      	ldr	r3, [pc, #332]	; (800807c <UART_SetConfig+0x6a8>)
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d827      	bhi.n	8007f88 <UART_SetConfig+0x5b4>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <UART_SetConfig+0x56c>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f59 	.word	0x08007f59
 8007f44:	08007f61 	.word	0x08007f61
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f5e:	e012      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f66:	e00e      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f6e:	e00a      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f70:	2308      	movs	r3, #8
 8007f72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f76:	e006      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f7e:	e002      	b.n	8007f86 <UART_SetConfig+0x5b2>
 8007f80:	2320      	movs	r3, #32
 8007f82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f86:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <UART_SetConfig+0x6b4>)
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	f040 81f4 	bne.w	800837c <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch (clocksource)
 8007f98:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d021      	beq.n	8007fe4 <UART_SetConfig+0x610>
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	dc04      	bgt.n	8007fae <UART_SetConfig+0x5da>
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d009      	beq.n	8007fbc <UART_SetConfig+0x5e8>
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d00b      	beq.n	8007fc4 <UART_SetConfig+0x5f0>
 8007fac:	e033      	b.n	8008016 <UART_SetConfig+0x642>
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d02d      	beq.n	800800e <UART_SetConfig+0x63a>
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d00e      	beq.n	8007fd4 <UART_SetConfig+0x600>
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d026      	beq.n	8008008 <UART_SetConfig+0x634>
 8007fba:	e02c      	b.n	8008016 <UART_SetConfig+0x642>
    {
    case UART_CLOCKSOURCE_D3PCLK1:
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8007fbc:	f7fd fbcc 	bl	8005758 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fc0:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 8007fc2:	e02c      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd fbe7 	bl	800579c <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8007fd2:	e024      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fd17 	bl	8005a0c <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8007fe2:	e01c      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fe4:	4b25      	ldr	r3, [pc, #148]	; (800807c <UART_SetConfig+0x6a8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <UART_SetConfig+0x62e>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ff0:	4b22      	ldr	r3, [pc, #136]	; (800807c <UART_SetConfig+0x6a8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	08db      	lsrs	r3, r3, #3
 8007ff6:	f003 0203 	and.w	r2, r3, #3
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <UART_SetConfig+0x6b8>)
 8007ffc:	40d3      	lsrs	r3, r2
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8008000:	e00d      	b.n	800801e <UART_SetConfig+0x64a>
        tmpreg = (uint32_t) HSI_VALUE;
 8008002:	4b22      	ldr	r3, [pc, #136]	; (800808c <UART_SetConfig+0x6b8>)
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8008006:	e00a      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_CSI:
      tmpreg =(uint32_t) CSI_VALUE;
 8008008:	4b21      	ldr	r3, [pc, #132]	; (8008090 <UART_SetConfig+0x6bc>)
 800800a:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 800800c:	e007      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 800800e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8008014:	e003      	b.n	800801e <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800801c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0U)
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8475 	beq.w	8008910 <UART_SetConfig+0xf3c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	441a      	add	r2, r3
 8008030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008032:	429a      	cmp	r2, r3
 8008034:	d805      	bhi.n	8008042 <UART_SetConfig+0x66e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800803c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803e:	429a      	cmp	r2, r3
 8008040:	d204      	bcs.n	800804c <UART_SetConfig+0x678>
      {
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008048:	f000 bc62 	b.w	8008910 <UART_SetConfig+0xf3c>
      }
      else
      {
        switch (clocksource)
 800804c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008050:	2b08      	cmp	r3, #8
 8008052:	f000 80bb 	beq.w	80081cc <UART_SetConfig+0x7f8>
 8008056:	2b08      	cmp	r3, #8
 8008058:	dc04      	bgt.n	8008064 <UART_SetConfig+0x690>
 800805a:	2b02      	cmp	r3, #2
 800805c:	d01a      	beq.n	8008094 <UART_SetConfig+0x6c0>
 800805e:	2b04      	cmp	r3, #4
 8008060:	d04a      	beq.n	80080f8 <UART_SetConfig+0x724>
 8008062:	e16d      	b.n	8008340 <UART_SetConfig+0x96c>
 8008064:	2b20      	cmp	r3, #32
 8008066:	f000 8146 	beq.w	80082f6 <UART_SetConfig+0x922>
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d079      	beq.n	8008162 <UART_SetConfig+0x78e>
 800806e:	2b10      	cmp	r3, #16
 8008070:	f000 8115 	beq.w	800829e <UART_SetConfig+0x8ca>
 8008074:	e164      	b.n	8008340 <UART_SetConfig+0x96c>
 8008076:	bf00      	nop
 8008078:	40011400 	.word	0x40011400
 800807c:	58024400 	.word	0x58024400
 8008080:	40007800 	.word	0x40007800
 8008084:	40007c00 	.word	0x40007c00
 8008088:	58000c00 	.word	0x58000c00
 800808c:	03d09000 	.word	0x03d09000
 8008090:	003d0900 	.word	0x003d0900
        {
        case UART_CLOCKSOURCE_D3PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8008094:	f7fd fb60 	bl	8005758 <HAL_RCCEx_GetD3PCLK1Freq>
 8008098:	4603      	mov	r3, r0
 800809a:	4618      	mov	r0, r3
 800809c:	f04f 0100 	mov.w	r1, #0
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	4ab1      	ldr	r2, [pc, #708]	; (800836c <UART_SetConfig+0x998>)
 80080a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f04f 0400 	mov.w	r4, #0
 80080b0:	461a      	mov	r2, r3
 80080b2:	4623      	mov	r3, r4
 80080b4:	f7f8 f910 	bl	80002d8 <__aeabi_uldivmod>
 80080b8:	4603      	mov	r3, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	0222      	lsls	r2, r4, #8
 80080be:	61fa      	str	r2, [r7, #28]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80080c6:	61fa      	str	r2, [r7, #28]
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	f04f 0400 	mov.w	r4, #0
 80080d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080da:	18c0      	adds	r0, r0, r3
 80080dc:	eb41 0104 	adc.w	r1, r1, r4
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f04f 0400 	mov.w	r4, #0
 80080e8:	461a      	mov	r2, r3
 80080ea:	4623      	mov	r3, r4
 80080ec:	f7f8 f8f4 	bl	80002d8 <__aeabi_uldivmod>
 80080f0:	4603      	mov	r3, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80080f6:	e127      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL2:
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fd fb4d 	bl	800579c <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8008102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008104:	4618      	mov	r0, r3
 8008106:	f04f 0100 	mov.w	r1, #0
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	4a97      	ldr	r2, [pc, #604]	; (800836c <UART_SetConfig+0x998>)
 8008110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f04f 0400 	mov.w	r4, #0
 800811a:	461a      	mov	r2, r3
 800811c:	4623      	mov	r3, r4
 800811e:	f7f8 f8db 	bl	80002d8 <__aeabi_uldivmod>
 8008122:	4603      	mov	r3, r0
 8008124:	460c      	mov	r4, r1
 8008126:	0222      	lsls	r2, r4, #8
 8008128:	617a      	str	r2, [r7, #20]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8008130:	617a      	str	r2, [r7, #20]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	f04f 0400 	mov.w	r4, #0
 8008140:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008144:	18c0      	adds	r0, r0, r3
 8008146:	eb41 0104 	adc.w	r1, r1, r4
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f04f 0400 	mov.w	r4, #0
 8008152:	461a      	mov	r2, r3
 8008154:	4623      	mov	r3, r4
 8008156:	f7f8 f8bf 	bl	80002d8 <__aeabi_uldivmod>
 800815a:	4603      	mov	r3, r0
 800815c:	460c      	mov	r4, r1
 800815e:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8008160:	e0f2      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL3:
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008166:	4618      	mov	r0, r3
 8008168:	f7fd fc50 	bl	8005a0c <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	4618      	mov	r0, r3
 8008170:	f04f 0100 	mov.w	r1, #0
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	4a7c      	ldr	r2, [pc, #496]	; (800836c <UART_SetConfig+0x998>)
 800817a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f04f 0400 	mov.w	r4, #0
 8008184:	461a      	mov	r2, r3
 8008186:	4623      	mov	r3, r4
 8008188:	f7f8 f8a6 	bl	80002d8 <__aeabi_uldivmod>
 800818c:	4603      	mov	r3, r0
 800818e:	460c      	mov	r4, r1
 8008190:	0222      	lsls	r2, r4, #8
 8008192:	60fa      	str	r2, [r7, #12]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800819a:	60fa      	str	r2, [r7, #12]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	f04f 0400 	mov.w	r4, #0
 80081aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081ae:	18c0      	adds	r0, r0, r3
 80081b0:	eb41 0104 	adc.w	r1, r1, r4
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f04f 0400 	mov.w	r4, #0
 80081bc:	461a      	mov	r2, r3
 80081be:	4623      	mov	r3, r4
 80081c0:	f7f8 f88a 	bl	80002d8 <__aeabi_uldivmod>
 80081c4:	4603      	mov	r3, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80081ca:	e0bd      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_HSI:
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081cc:	4b68      	ldr	r3, [pc, #416]	; (8008370 <UART_SetConfig+0x99c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d036      	beq.n	8008246 <UART_SetConfig+0x872>
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80081d8:	4b65      	ldr	r3, [pc, #404]	; (8008370 <UART_SetConfig+0x99c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	4a64      	ldr	r2, [pc, #400]	; (8008374 <UART_SetConfig+0x9a0>)
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	4618      	mov	r0, r3
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	4a5e      	ldr	r2, [pc, #376]	; (800836c <UART_SetConfig+0x998>)
 80081f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f04f 0400 	mov.w	r4, #0
 80081fe:	461a      	mov	r2, r3
 8008200:	4623      	mov	r3, r4
 8008202:	f7f8 f869 	bl	80002d8 <__aeabi_uldivmod>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	0222      	lsls	r2, r4, #8
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	085b      	lsrs	r3, r3, #1
 8008220:	f04f 0400 	mov.w	r4, #0
 8008224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008228:	18c0      	adds	r0, r0, r3
 800822a:	eb41 0104 	adc.w	r1, r1, r4
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	461a      	mov	r2, r3
 8008238:	4623      	mov	r3, r4
 800823a:	f7f8 f84d 	bl	80002d8 <__aeabi_uldivmod>
 800823e:	4603      	mov	r3, r0
 8008240:	460c      	mov	r4, r1
 8008242:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          else
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
          }
          break;
 8008244:	e080      	b.n	8008348 <UART_SetConfig+0x974>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	4a48      	ldr	r2, [pc, #288]	; (800836c <UART_SetConfig+0x998>)
 800824c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f04f 0400 	mov.w	r4, #0
 8008256:	461a      	mov	r2, r3
 8008258:	4623      	mov	r3, r4
 800825a:	4846      	ldr	r0, [pc, #280]	; (8008374 <UART_SetConfig+0x9a0>)
 800825c:	f04f 0100 	mov.w	r1, #0
 8008260:	f7f8 f83a 	bl	80002d8 <__aeabi_uldivmod>
 8008264:	4603      	mov	r3, r0
 8008266:	460c      	mov	r4, r1
 8008268:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 800826c:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 8008270:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	f04f 0400 	mov.w	r4, #0
 800827e:	eb1a 0003 	adds.w	r0, sl, r3
 8008282:	eb4b 0104 	adc.w	r1, fp, r4
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f04f 0400 	mov.w	r4, #0
 800828e:	461a      	mov	r2, r3
 8008290:	4623      	mov	r3, r4
 8008292:	f7f8 f821 	bl	80002d8 <__aeabi_uldivmod>
 8008296:	4603      	mov	r3, r0
 8008298:	460c      	mov	r4, r1
 800829a:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 800829c:	e054      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_CSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	4a32      	ldr	r2, [pc, #200]	; (800836c <UART_SetConfig+0x998>)
 80082a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	461a      	mov	r2, r3
 80082b0:	4623      	mov	r3, r4
 80082b2:	4831      	ldr	r0, [pc, #196]	; (8008378 <UART_SetConfig+0x9a4>)
 80082b4:	f04f 0100 	mov.w	r1, #0
 80082b8:	f7f8 f80e 	bl	80002d8 <__aeabi_uldivmod>
 80082bc:	4603      	mov	r3, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80082c4:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80082c8:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	f04f 0400 	mov.w	r4, #0
 80082d6:	eb18 0003 	adds.w	r0, r8, r3
 80082da:	eb49 0104 	adc.w	r1, r9, r4
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f04f 0400 	mov.w	r4, #0
 80082e6:	461a      	mov	r2, r3
 80082e8:	4623      	mov	r3, r4
 80082ea:	f7f7 fff5 	bl	80002d8 <__aeabi_uldivmod>
 80082ee:	4603      	mov	r3, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80082f4:	e028      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	4a1c      	ldr	r2, [pc, #112]	; (800836c <UART_SetConfig+0x998>)
 80082fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	b29b      	uxth	r3, r3
 800830a:	b29b      	uxth	r3, r3
 800830c:	f04f 0400 	mov.w	r4, #0
 8008310:	0226      	lsls	r6, r4, #8
 8008312:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8008316:	021d      	lsls	r5, r3, #8
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	f04f 0400 	mov.w	r4, #0
 8008322:	18e8      	adds	r0, r5, r3
 8008324:	eb46 0104 	adc.w	r1, r6, r4
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f04f 0400 	mov.w	r4, #0
 8008330:	461a      	mov	r2, r3
 8008332:	4623      	mov	r3, r4
 8008334:	f7f7 ffd0 	bl	80002d8 <__aeabi_uldivmod>
 8008338:	4603      	mov	r3, r0
 800833a:	460c      	mov	r4, r1
 800833c:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 800833e:	e003      	b.n	8008348 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          break;
 8008346:	bf00      	nop
        }

        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800834e:	d308      	bcc.n	8008362 <UART_SetConfig+0x98e>
 8008350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008356:	d204      	bcs.n	8008362 <UART_SetConfig+0x98e>
        {
           huart->Instance->BRR = tmpreg;
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800835e:	60da      	str	r2, [r3, #12]
 8008360:	e2d6      	b.n	8008910 <UART_SetConfig+0xf3c>
        }
        else
        {
          ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008368:	e2d2      	b.n	8008910 <UART_SetConfig+0xf3c>
 800836a:	bf00      	nop
 800836c:	0800b29c 	.word	0x0800b29c
 8008370:	58024400 	.word	0x58024400
 8008374:	03d09000 	.word	0x03d09000
 8008378:	003d0900 	.word	0x003d0900
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008384:	f040 8165 	bne.w	8008652 <UART_SetConfig+0xc7e>
  {
    switch (clocksource)
 8008388:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	f200 8144 	bhi.w	800861a <UART_SetConfig+0xc46>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x9c4>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	0800849d 	.word	0x0800849d
 800839c:	080084c9 	.word	0x080084c9
 80083a0:	0800861b 	.word	0x0800861b
 80083a4:	0800861b 	.word	0x0800861b
 80083a8:	080084f5 	.word	0x080084f5
 80083ac:	0800861b 	.word	0x0800861b
 80083b0:	0800861b 	.word	0x0800861b
 80083b4:	0800861b 	.word	0x0800861b
 80083b8:	08008559 	.word	0x08008559
 80083bc:	0800861b 	.word	0x0800861b
 80083c0:	0800861b 	.word	0x0800861b
 80083c4:	0800861b 	.word	0x0800861b
 80083c8:	0800861b 	.word	0x0800861b
 80083cc:	0800861b 	.word	0x0800861b
 80083d0:	0800861b 	.word	0x0800861b
 80083d4:	0800861b 	.word	0x0800861b
 80083d8:	080085c5 	.word	0x080085c5
 80083dc:	0800861b 	.word	0x0800861b
 80083e0:	0800861b 	.word	0x0800861b
 80083e4:	0800861b 	.word	0x0800861b
 80083e8:	0800861b 	.word	0x0800861b
 80083ec:	0800861b 	.word	0x0800861b
 80083f0:	0800861b 	.word	0x0800861b
 80083f4:	0800861b 	.word	0x0800861b
 80083f8:	0800861b 	.word	0x0800861b
 80083fc:	0800861b 	.word	0x0800861b
 8008400:	0800861b 	.word	0x0800861b
 8008404:	0800861b 	.word	0x0800861b
 8008408:	0800861b 	.word	0x0800861b
 800840c:	0800861b 	.word	0x0800861b
 8008410:	0800861b 	.word	0x0800861b
 8008414:	0800861b 	.word	0x0800861b
 8008418:	080085ef 	.word	0x080085ef
 800841c:	0800861b 	.word	0x0800861b
 8008420:	0800861b 	.word	0x0800861b
 8008424:	0800861b 	.word	0x0800861b
 8008428:	0800861b 	.word	0x0800861b
 800842c:	0800861b 	.word	0x0800861b
 8008430:	0800861b 	.word	0x0800861b
 8008434:	0800861b 	.word	0x0800861b
 8008438:	0800861b 	.word	0x0800861b
 800843c:	0800861b 	.word	0x0800861b
 8008440:	0800861b 	.word	0x0800861b
 8008444:	0800861b 	.word	0x0800861b
 8008448:	0800861b 	.word	0x0800861b
 800844c:	0800861b 	.word	0x0800861b
 8008450:	0800861b 	.word	0x0800861b
 8008454:	0800861b 	.word	0x0800861b
 8008458:	0800861b 	.word	0x0800861b
 800845c:	0800861b 	.word	0x0800861b
 8008460:	0800861b 	.word	0x0800861b
 8008464:	0800861b 	.word	0x0800861b
 8008468:	0800861b 	.word	0x0800861b
 800846c:	0800861b 	.word	0x0800861b
 8008470:	0800861b 	.word	0x0800861b
 8008474:	0800861b 	.word	0x0800861b
 8008478:	0800861b 	.word	0x0800861b
 800847c:	0800861b 	.word	0x0800861b
 8008480:	0800861b 	.word	0x0800861b
 8008484:	0800861b 	.word	0x0800861b
 8008488:	0800861b 	.word	0x0800861b
 800848c:	0800861b 	.word	0x0800861b
 8008490:	0800861b 	.word	0x0800861b
 8008494:	0800861b 	.word	0x0800861b
 8008498:	08008527 	.word	0x08008527
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800849c:	f7fc f9fc 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80084a0:	4601      	mov	r1, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	4ac7      	ldr	r2, [pc, #796]	; (80087c4 <UART_SetConfig+0xdf0>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80084b0:	005a      	lsls	r2, r3, #1
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	441a      	add	r2, r3
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80084c6:	e0ac      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80084c8:	f7fc fa08 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 80084cc:	4601      	mov	r1, r0
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	4abc      	ldr	r2, [pc, #752]	; (80087c4 <UART_SetConfig+0xdf0>)
 80084d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80084dc:	005a      	lsls	r2, r3, #1
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	441a      	add	r2, r3
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80084f2:	e096      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd f94f 	bl	800579c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008502:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008504:	49af      	ldr	r1, [pc, #700]	; (80087c4 <UART_SetConfig+0xdf0>)
 8008506:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800850a:	fbb3 f3f2 	udiv	r3, r3, r2
 800850e:	005a      	lsls	r2, r3, #1
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	441a      	add	r2, r3
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8008524:	e07d      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd fa6e 	bl	8005a0c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008536:	49a3      	ldr	r1, [pc, #652]	; (80087c4 <UART_SetConfig+0xdf0>)
 8008538:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800853c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008540:	005a      	lsls	r2, r3, #1
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	441a      	add	r2, r3
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008552:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8008556:	e064      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008558:	4b9b      	ldr	r3, [pc, #620]	; (80087c8 <UART_SetConfig+0xdf4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01a      	beq.n	800859a <UART_SetConfig+0xbc6>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8008564:	4b98      	ldr	r3, [pc, #608]	; (80087c8 <UART_SetConfig+0xdf4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	08db      	lsrs	r3, r3, #3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	4a97      	ldr	r2, [pc, #604]	; (80087cc <UART_SetConfig+0xdf8>)
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008578:	4992      	ldr	r1, [pc, #584]	; (80087c4 <UART_SetConfig+0xdf0>)
 800857a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800857e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008582:	005a      	lsls	r2, r3, #1
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	085b      	lsrs	r3, r3, #1
 800858a:	441a      	add	r2, r3
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 8008598:	e043      	b.n	8008622 <UART_SetConfig+0xc4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	4a89      	ldr	r2, [pc, #548]	; (80087c4 <UART_SetConfig+0xdf0>)
 80085a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a4:	461a      	mov	r2, r3
 80085a6:	4b89      	ldr	r3, [pc, #548]	; (80087cc <UART_SetConfig+0xdf8>)
 80085a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ac:	005a      	lsls	r2, r3, #1
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	085b      	lsrs	r3, r3, #1
 80085b4:	441a      	add	r2, r3
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80085be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80085c2:	e02e      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	4a7e      	ldr	r2, [pc, #504]	; (80087c4 <UART_SetConfig+0xdf0>)
 80085ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ce:	461a      	mov	r2, r3
 80085d0:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <UART_SetConfig+0xdfc>)
 80085d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d6:	005a      	lsls	r2, r3, #1
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	441a      	add	r2, r3
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80085ec:	e019      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	4a74      	ldr	r2, [pc, #464]	; (80087c4 <UART_SetConfig+0xdf0>)
 80085f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	b29b      	uxth	r3, r3
 8008602:	005a      	lsls	r2, r3, #1
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	441a      	add	r2, r3
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	fbb2 f3f3 	udiv	r3, r2, r3
 8008614:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8008618:	e003      	b.n	8008622 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008620:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008622:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008626:	f023 030f 	bic.w	r3, r3, #15
 800862a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800862e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008632:	105b      	asrs	r3, r3, #1
 8008634:	b29b      	uxth	r3, r3
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008640:	4313      	orrs	r3, r2
 8008642:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    huart->Instance->BRR = brrtemp;
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800864e:	60da      	str	r2, [r3, #12]
 8008650:	e15e      	b.n	8008910 <UART_SetConfig+0xf3c>
  }
  else
  {
    switch (clocksource)
 8008652:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	f200 8156 	bhi.w	8008908 <UART_SetConfig+0xf34>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0xc90>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008769 	.word	0x08008769
 8008668:	08008797 	.word	0x08008797
 800866c:	08008909 	.word	0x08008909
 8008670:	08008909 	.word	0x08008909
 8008674:	080087d5 	.word	0x080087d5
 8008678:	08008909 	.word	0x08008909
 800867c:	08008909 	.word	0x08008909
 8008680:	08008909 	.word	0x08008909
 8008684:	0800883d 	.word	0x0800883d
 8008688:	08008909 	.word	0x08008909
 800868c:	08008909 	.word	0x08008909
 8008690:	08008909 	.word	0x08008909
 8008694:	08008909 	.word	0x08008909
 8008698:	08008909 	.word	0x08008909
 800869c:	08008909 	.word	0x08008909
 80086a0:	08008909 	.word	0x08008909
 80086a4:	080088ad 	.word	0x080088ad
 80086a8:	08008909 	.word	0x08008909
 80086ac:	08008909 	.word	0x08008909
 80086b0:	08008909 	.word	0x08008909
 80086b4:	08008909 	.word	0x08008909
 80086b8:	08008909 	.word	0x08008909
 80086bc:	08008909 	.word	0x08008909
 80086c0:	08008909 	.word	0x08008909
 80086c4:	08008909 	.word	0x08008909
 80086c8:	08008909 	.word	0x08008909
 80086cc:	08008909 	.word	0x08008909
 80086d0:	08008909 	.word	0x08008909
 80086d4:	08008909 	.word	0x08008909
 80086d8:	08008909 	.word	0x08008909
 80086dc:	08008909 	.word	0x08008909
 80086e0:	08008909 	.word	0x08008909
 80086e4:	080088d9 	.word	0x080088d9
 80086e8:	08008909 	.word	0x08008909
 80086ec:	08008909 	.word	0x08008909
 80086f0:	08008909 	.word	0x08008909
 80086f4:	08008909 	.word	0x08008909
 80086f8:	08008909 	.word	0x08008909
 80086fc:	08008909 	.word	0x08008909
 8008700:	08008909 	.word	0x08008909
 8008704:	08008909 	.word	0x08008909
 8008708:	08008909 	.word	0x08008909
 800870c:	08008909 	.word	0x08008909
 8008710:	08008909 	.word	0x08008909
 8008714:	08008909 	.word	0x08008909
 8008718:	08008909 	.word	0x08008909
 800871c:	08008909 	.word	0x08008909
 8008720:	08008909 	.word	0x08008909
 8008724:	08008909 	.word	0x08008909
 8008728:	08008909 	.word	0x08008909
 800872c:	08008909 	.word	0x08008909
 8008730:	08008909 	.word	0x08008909
 8008734:	08008909 	.word	0x08008909
 8008738:	08008909 	.word	0x08008909
 800873c:	08008909 	.word	0x08008909
 8008740:	08008909 	.word	0x08008909
 8008744:	08008909 	.word	0x08008909
 8008748:	08008909 	.word	0x08008909
 800874c:	08008909 	.word	0x08008909
 8008750:	08008909 	.word	0x08008909
 8008754:	08008909 	.word	0x08008909
 8008758:	08008909 	.word	0x08008909
 800875c:	08008909 	.word	0x08008909
 8008760:	08008909 	.word	0x08008909
 8008764:	08008809 	.word	0x08008809
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	681c      	ldr	r4, [r3, #0]
 800876c:	f7fc f894 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8008770:	4601      	mov	r1, r0
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <UART_SetConfig+0xdf0>)
 8008778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800877c:	fbb1 f2f3 	udiv	r2, r1, r3
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	441a      	add	r2, r3
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008790:	b29b      	uxth	r3, r3
 8008792:	60e3      	str	r3, [r4, #12]
      break;
 8008794:	e0bc      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_D2PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	f7fc f89f 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 800879e:	4601      	mov	r1, r0
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	4a07      	ldr	r2, [pc, #28]	; (80087c4 <UART_SetConfig+0xdf0>)
 80087a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087aa:	fbb1 f2f3 	udiv	r2, r1, r3
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80087be:	b29b      	uxth	r3, r3
 80087c0:	60e3      	str	r3, [r4, #12]
      break;
 80087c2:	e0a5      	b.n	8008910 <UART_SetConfig+0xf3c>
 80087c4:	0800b29c 	.word	0x0800b29c
 80087c8:	58024400 	.word	0x58024400
 80087cc:	03d09000 	.word	0x03d09000
 80087d0:	003d0900 	.word	0x003d0900
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fc ffdf 	bl	800579c <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087e6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80087e8:	484d      	ldr	r0, [pc, #308]	; (8008920 <UART_SetConfig+0xf4c>)
 80087ea:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80087ee:	fbb2 f1f1 	udiv	r1, r2, r1
 80087f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f4:	6852      	ldr	r2, [r2, #4]
 80087f6:	0852      	lsrs	r2, r2, #1
 80087f8:	4411      	add	r1, r2
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	6852      	ldr	r2, [r2, #4]
 80087fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8008802:	b292      	uxth	r2, r2
 8008804:	60da      	str	r2, [r3, #12]
      break;
 8008806:	e083      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd f8fd 	bl	8005a0c <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800881a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800881c:	4840      	ldr	r0, [pc, #256]	; (8008920 <UART_SetConfig+0xf4c>)
 800881e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8008822:	fbb2 f1f1 	udiv	r1, r2, r1
 8008826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008828:	6852      	ldr	r2, [r2, #4]
 800882a:	0852      	lsrs	r2, r2, #1
 800882c:	4411      	add	r1, r2
 800882e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008830:	6852      	ldr	r2, [r2, #4]
 8008832:	fbb1 f2f2 	udiv	r2, r1, r2
 8008836:	b292      	uxth	r2, r2
 8008838:	60da      	str	r2, [r3, #12]
      break;
 800883a:	e069      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800883c:	4b39      	ldr	r3, [pc, #228]	; (8008924 <UART_SetConfig+0xf50>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01b      	beq.n	8008880 <UART_SetConfig+0xeac>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a35      	ldr	r2, [pc, #212]	; (8008924 <UART_SetConfig+0xf50>)
 800884e:	6812      	ldr	r2, [r2, #0]
 8008850:	08d2      	lsrs	r2, r2, #3
 8008852:	f002 0203 	and.w	r2, r2, #3
 8008856:	4934      	ldr	r1, [pc, #208]	; (8008928 <UART_SetConfig+0xf54>)
 8008858:	fa21 f202 	lsr.w	r2, r1, r2
 800885c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800885e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8008860:	482f      	ldr	r0, [pc, #188]	; (8008920 <UART_SetConfig+0xf4c>)
 8008862:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8008866:	fbb2 f1f1 	udiv	r1, r2, r1
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	6852      	ldr	r2, [r2, #4]
 800886e:	0852      	lsrs	r2, r2, #1
 8008870:	4411      	add	r1, r2
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	6852      	ldr	r2, [r2, #4]
 8008876:	fbb1 f2f2 	udiv	r2, r1, r2
 800887a:	b292      	uxth	r2, r2
 800887c:	60da      	str	r2, [r3, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 800887e:	e047      	b.n	8008910 <UART_SetConfig+0xf3c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008888:	4925      	ldr	r1, [pc, #148]	; (8008920 <UART_SetConfig+0xf4c>)
 800888a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800888e:	4611      	mov	r1, r2
 8008890:	4a25      	ldr	r2, [pc, #148]	; (8008928 <UART_SetConfig+0xf54>)
 8008892:	fbb2 f1f1 	udiv	r1, r2, r1
 8008896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008898:	6852      	ldr	r2, [r2, #4]
 800889a:	0852      	lsrs	r2, r2, #1
 800889c:	4411      	add	r1, r2
 800889e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a0:	6852      	ldr	r2, [r2, #4]
 80088a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80088a6:	b292      	uxth	r2, r2
 80088a8:	60da      	str	r2, [r3, #12]
      break;
 80088aa:	e031      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_CSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088b4:	491a      	ldr	r1, [pc, #104]	; (8008920 <UART_SetConfig+0xf4c>)
 80088b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4a1b      	ldr	r2, [pc, #108]	; (800892c <UART_SetConfig+0xf58>)
 80088be:	fbb2 f1f1 	udiv	r1, r2, r1
 80088c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c4:	6852      	ldr	r2, [r2, #4]
 80088c6:	0852      	lsrs	r2, r2, #1
 80088c8:	4411      	add	r1, r2
 80088ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088cc:	6852      	ldr	r2, [r2, #4]
 80088ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80088d2:	b292      	uxth	r2, r2
 80088d4:	60da      	str	r2, [r3, #12]
      break;
 80088d6:	e01b      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088e0:	490f      	ldr	r1, [pc, #60]	; (8008920 <UART_SetConfig+0xf4c>)
 80088e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80088e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088ea:	fbb1 f2f2 	udiv	r2, r1, r2
 80088ee:	b292      	uxth	r2, r2
 80088f0:	4611      	mov	r1, r2
 80088f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f4:	6852      	ldr	r2, [r2, #4]
 80088f6:	0852      	lsrs	r2, r2, #1
 80088f8:	4411      	add	r1, r2
 80088fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fc:	6852      	ldr	r2, [r2, #4]
 80088fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8008902:	b292      	uxth	r2, r2
 8008904:	60da      	str	r2, [r3, #12]
      break;
 8008906:	e003      	b.n	8008910 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800890e:	bf00      	nop
    }
  }

  return ret;
 8008910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008914:	4618      	mov	r0, r3
 8008916:	3754      	adds	r7, #84	; 0x54
 8008918:	46bd      	mov	sp, r7
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	bf00      	nop
 8008920:	0800b29c 	.word	0x0800b29c
 8008924:	58024400 	.word	0x58024400
 8008928:	03d09000 	.word	0x03d09000
 800892c:	003d0900 	.word	0x003d0900

08008930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	6852      	ldr	r2, [r2, #4]
 800894e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	6852      	ldr	r2, [r2, #4]
 8008970:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008978:	430a      	orrs	r2, r1
 800897a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	6852      	ldr	r2, [r2, #4]
 8008992:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	6852      	ldr	r2, [r2, #4]
 80089b4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	6892      	ldr	r2, [r2, #8]
 80089d6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089de:	430a      	orrs	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	6892      	ldr	r2, [r2, #8]
 80089f8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a00:	430a      	orrs	r2, r1
 8008a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01a      	beq.n	8008a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	6852      	ldr	r2, [r2, #4]
 8008a1a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a2e:	d10a      	bne.n	8008a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6812      	ldr	r2, [r2, #0]
 8008a38:	6852      	ldr	r2, [r2, #4]
 8008a3a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	6852      	ldr	r2, [r2, #4]
 8008a5c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008a86:	f7f7 fe05 	bl	8000694 <HAL_GetTick>
 8008a8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d10e      	bne.n	8008ab8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f82c 	bl	8008b06 <UART_WaitOnFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e022      	b.n	8008afe <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d10e      	bne.n	8008ae4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f816 	bl	8008b06 <UART_WaitOnFlagUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e00c      	b.n	8008afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	603b      	str	r3, [r7, #0]
 8008b12:	4613      	mov	r3, r2
 8008b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b16:	e02c      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1e:	d028      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b26:	f7f7 fdb5 	bl	8000694 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d91d      	bls.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	6892      	ldr	r2, [r2, #8]
 8008b50:	f022 0201 	bic.w	r2, r2, #1
 8008b54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e00f      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0c3      	beq.n	8008b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bb0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6812      	ldr	r2, [r2, #0]
 8008bba:	6892      	ldr	r2, [r2, #8]
 8008bbc:	f022 0201 	bic.w	r2, r2, #1
 8008bc0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->TxXferCount = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  HAL_UART_ErrorCallback(huart);
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7fe fee3 	bl	80079c0 <HAL_UART_ErrorCallback>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b21      	cmp	r3, #33	; 0x21
 8008c14:	d156      	bne.n	8008cc4 <UART_Transmit_IT+0xc2>
  {
    if(huart->TxXferCount == 0U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d121      	bne.n	8008c66 <UART_Transmit_IT+0x64>
    {
      /* Disable the TX FIFO threshold interrupt (if FIFO mode is enabled) or
         Transmit Data Register Empty interrupt (if FIFO mode is Disabled).
      */
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <UART_Transmit_IT+0x40>
      {
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	6892      	ldr	r2, [r2, #8]
 8008c3a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008c3e:	609a      	str	r2, [r3, #8]
 8008c40:	e007      	b.n	8008c52 <UART_Transmit_IT+0x50>
      }
      else
      {
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6812      	ldr	r2, [r2, #0]
 8008c4a:	6812      	ldr	r2, [r2, #0]
 8008c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c50:	601a      	str	r2, [r3, #0]
      }

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6812      	ldr	r2, [r2, #0]
 8008c5a:	6812      	ldr	r2, [r2, #0]
 8008c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c60:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e02f      	b.n	8008cc6 <UART_Transmit_IT+0xc4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6e:	d114      	bne.n	8008c9a <UART_Transmit_IT+0x98>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d110      	bne.n	8008c9a <UART_Transmit_IT+0x98>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c7c:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	8812      	ldrh	r2, [r2, #0]
 8008c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c8a:	b292      	uxth	r2, r2
 8008c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	1c9a      	adds	r2, r3, #2
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c98:	e009      	b.n	8008cae <UART_Transmit_IT+0xac>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca2:	1c58      	adds	r0, r3, #1
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	65c8      	str	r0, [r1, #92]	; 0x5c
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

      return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e000      	b.n	8008cc6 <UART_Transmit_IT+0xc4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008cc4:	2302      	movs	r3, #2
  }
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  HAL_UART_TxCpltCallback(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fe fe5a 	bl	80079ac <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8008d10:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b22      	cmp	r3, #34	; 0x22
 8008d1c:	d14e      	bne.n	8008dbc <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d24:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d112      	bne.n	8008d56 <UART_Receive_IT+0x54>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10e      	bne.n	8008d56 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d3c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d3e:	89ba      	ldrh	r2, [r7, #12]
 8008d40:	89fb      	ldrh	r3, [r7, #14]
 8008d42:	4013      	ands	r3, r2
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d4e:	1c9a      	adds	r2, r3, #2
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	665a      	str	r2, [r3, #100]	; 0x64
 8008d54:	e00b      	b.n	8008d6e <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d5a:	1c59      	adds	r1, r3, #1
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6651      	str	r1, [r2, #100]	; 0x64
 8008d60:	89ba      	ldrh	r2, [r7, #12]
 8008d62:	b2d1      	uxtb	r1, r2
 8008d64:	89fa      	ldrh	r2, [r7, #14]
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	400a      	ands	r2, r1
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d118      	bne.n	8008db8 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	6892      	ldr	r2, [r2, #8]
 8008da0:	f022 0201 	bic.w	r2, r2, #1
 8008da4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

      HAL_UART_RxCpltCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fc70 	bl	800a694 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e00c      	b.n	8008dd2 <UART_Receive_IT+0xd0>
    }

    return HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e00a      	b.n	8008dd2 <UART_Receive_IT+0xd0>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	8b12      	ldrh	r2, [r2, #24]
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	f042 0208 	orr.w	r2, r2, #8
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 8008dd0:	2302      	movs	r3, #2
  }
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df0:	b084      	sub	sp, #16
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	f107 0014 	add.w	r0, r7, #20
 8008dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d11e      	bne.n	8008e46 <USB_CoreInit+0x56>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <USB_CoreInit+0xa0>)
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8008e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d105      	bne.n	8008e3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa16 	bl	8009270 <USB_CoreReset>
 8008e44:	e00c      	b.n	8008e60 <USB_CoreInit+0x70>
  }
  else /* FS interface (embedded Phy) */
  {
    
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa0c 	bl	8009270 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10b      	bne.n	8008e7e <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f043 020c 	orr.w	r2, r3, #12
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f043 0220 	orr.w	r2, r3, #32
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e8a:	b004      	add	sp, #16
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	ffbdffbf 	.word	0xffbdffbf

08008e94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f023 0201 	bic.w	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d106      	bne.n	8008ee2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60da      	str	r2, [r3, #12]
 8008ee0:	e008      	b.n	8008ef4 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8008ef4:	2032      	movs	r0, #50	; 0x32
 8008ef6:	f7f7 fbd9 	bl	80006ac <HAL_Delay>
  
  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f04:	b084      	sub	sp, #16
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	f107 001c 	add.w	r0, r7, #28
 8008f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8008f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d111      	bne.n	8008f50 <USB_DevInit+0x4c>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f56:	461a      	mov	r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10c      	bne.n	8008f8e <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <USB_DevInit+0x80>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f947 	bl	8009210 <USB_SetDevSpeed>
 8008f82:	e008      	b.n	8008f96 <USB_DevInit+0x92>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f942 	bl	8009210 <USB_SetDevSpeed>
 8008f8c:	e003      	b.n	8008f96 <USB_DevInit+0x92>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8008f8e:	2103      	movs	r1, #3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f93d 	bl	8009210 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8008f96:	2110      	movs	r1, #16
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8f1 	bl	8009180 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f914 	bl	80091cc <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	461a      	mov	r2, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61d3      	str	r3, [r2, #28]
  
  for (i = 0; i < cfg.dev_endpoints; i++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e034      	b.n	8009046 <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff2:	d10a      	bne.n	800900a <USB_DevInit+0x106>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009000:	461a      	mov	r2, r3
 8009002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	e008      	b.n	800901c <USB_DevInit+0x118>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	461a      	mov	r2, r3
 8009018:	2300      	movs	r3, #0
 800901a:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	461a      	mov	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903a:	461a      	mov	r2, r3
 800903c:	23ff      	movs	r3, #255	; 0xff
 800903e:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3301      	adds	r3, #1
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d8c6      	bhi.n	8008fdc <USB_DevInit+0xd8>
  }
  
  for (i = 0; i < cfg.dev_endpoints; i++)
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	e034      	b.n	80090be <USB_DevInit+0x1ba>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800906a:	d10a      	bne.n	8009082 <USB_DevInit+0x17e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	461a      	mov	r2, r3
 800907a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e008      	b.n	8009094 <USB_DevInit+0x190>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908e:	461a      	mov	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a0:	461a      	mov	r2, r3
 80090a2:	2300      	movs	r3, #0
 80090a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b2:	461a      	mov	r2, r3
 80090b4:	23ff      	movs	r3, #255	; 0xff
 80090b6:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d8c6      	bhi.n	8009054 <USB_DevInit+0x150>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090cc:	461a      	mov	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090da:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1)
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d115      	bne.n	800910e <USB_DevInit+0x20a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e8:	461a      	mov	r2, r3
 80090ea:	4b21      	ldr	r3, [pc, #132]	; (8009170 <USB_DevInit+0x26c>)
 80090ec:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	4619      	mov	r1, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <USB_DevInit+0x270>)
 8009100:	4313      	orrs	r3, r2
 8009102:	630b      	str	r3, [r1, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800911a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d105      	bne.n	800912e <USB_DevInit+0x22a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f043 0210 	orr.w	r2, r3, #16
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <USB_DevInit+0x274>)
 8009134:	4313      	orrs	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <USB_DevInit+0x248>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	f043 0208 	orr.w	r2, r3, #8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800914c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914e:	2b01      	cmp	r3, #1
 8009150:	d105      	bne.n	800915e <USB_DevInit+0x25a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <USB_DevInit+0x278>)
 8009158:	4313      	orrs	r3, r2
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800916a:	b004      	add	sp, #16
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	02000400 	.word	0x02000400
 8009174:	08010003 	.word	0x08010003
 8009178:	803c3800 	.word	0x803c3800
 800917c:	40000004 	.word	0x40000004

08009180 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	019b      	lsls	r3, r3, #6
 8009192:	f043 0220 	orr.w	r2, r3, #32
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <USB_FlushTxFifo+0x48>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d901      	bls.n	80091ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e006      	b.n	80091ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d0f0      	beq.n	800919a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	00030d40 	.word	0x00030d40

080091cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2210      	movs	r2, #16
 80091dc:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4a09      	ldr	r2, [pc, #36]	; (800920c <USB_FlushRxFifo+0x40>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d901      	bls.n	80091f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e006      	b.n	80091fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d0f0      	beq.n	80091de <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	00030d40 	.word	0x00030d40

08009210 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	4619      	mov	r1, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	4313      	orrs	r3, r2
 8009230:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924e:	461a      	mov	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f043 0302 	orr.w	r3, r3, #2
 800925c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800925e:	2003      	movs	r0, #3
 8009260:	f7f7 fa24 	bl	80006ac <HAL_Delay>
  
  return HAL_OK;  
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <USB_CoreReset+0x64>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d901      	bls.n	800928e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e01b      	b.n	80092c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	daf2      	bge.n	800927c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f043 0201 	orr.w	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a09      	ldr	r2, [pc, #36]	; (80092d4 <USB_CoreReset+0x64>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e006      	b.n	80092c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d0f0      	beq.n	80092a6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	00030d40 	.word	0x00030d40

080092d8 <CalculateValues>:
static void SendValues(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CalculateValues(void){
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
	LOAD_VOLTAGE = (((ADC_float[0]*mVoltsPerBit)*ScaleFactor)+offset);
 80092dc:	4b21      	ldr	r3, [pc, #132]	; (8009364 <CalculateValues+0x8c>)
 80092de:	ed93 7a00 	vldr	s14, [r3]
 80092e2:	4b21      	ldr	r3, [pc, #132]	; (8009368 <CalculateValues+0x90>)
 80092e4:	edd3 7a00 	vldr	s15, [r3]
 80092e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092ec:	4b1f      	ldr	r3, [pc, #124]	; (800936c <CalculateValues+0x94>)
 80092ee:	edd3 7a00 	vldr	s15, [r3]
 80092f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092f6:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <CalculateValues+0x98>)
 80092f8:	edd3 7a00 	vldr	s15, [r3]
 80092fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009300:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <CalculateValues+0x9c>)
 8009302:	edc3 7a00 	vstr	s15, [r3]
	LOAD_CURRENT = (((ADC_float[1]*mAmpsPerBit)*ScaleFactor)+offset);
 8009306:	4b17      	ldr	r3, [pc, #92]	; (8009364 <CalculateValues+0x8c>)
 8009308:	ed93 7a01 	vldr	s14, [r3, #4]
 800930c:	4b1a      	ldr	r3, [pc, #104]	; (8009378 <CalculateValues+0xa0>)
 800930e:	edd3 7a00 	vldr	s15, [r3]
 8009312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <CalculateValues+0x94>)
 8009318:	edd3 7a00 	vldr	s15, [r3]
 800931c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009320:	4b13      	ldr	r3, [pc, #76]	; (8009370 <CalculateValues+0x98>)
 8009322:	edd3 7a00 	vldr	s15, [r3]
 8009326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800932a:	4b14      	ldr	r3, [pc, #80]	; (800937c <CalculateValues+0xa4>)
 800932c:	edc3 7a00 	vstr	s15, [r3]
	TEMPERATURE = (((ADC_float[2]*DegsPerBit)*ScaleFactor)+offset);
 8009330:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <CalculateValues+0x8c>)
 8009332:	ed93 7a02 	vldr	s14, [r3, #8]
 8009336:	4b12      	ldr	r3, [pc, #72]	; (8009380 <CalculateValues+0xa8>)
 8009338:	edd3 7a00 	vldr	s15, [r3]
 800933c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <CalculateValues+0x94>)
 8009342:	edd3 7a00 	vldr	s15, [r3]
 8009346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <CalculateValues+0x98>)
 800934c:	edd3 7a00 	vldr	s15, [r3]
 8009350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <CalculateValues+0xac>)
 8009356:	edc3 7a00 	vstr	s15, [r3]
	SendValues();
 800935a:	f000 f815 	bl	8009388 <SendValues>
}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000220 	.word	0x20000220
 8009368:	2000000c 	.word	0x2000000c
 800936c:	20000018 	.word	0x20000018
 8009370:	20000218 	.word	0x20000218
 8009374:	200009f4 	.word	0x200009f4
 8009378:	20000010 	.word	0x20000010
 800937c:	20000a5c 	.word	0x20000a5c
 8009380:	20000014 	.word	0x20000014
 8009384:	200007d4 	.word	0x200007d4

08009388 <SendValues>:

void SendValues(void){
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0

	len=sprintf(buffer, "!Voltage\n");
 800938c:	4a13      	ldr	r2, [pc, #76]	; (80093dc <SendValues+0x54>)
 800938e:	4b14      	ldr	r3, [pc, #80]	; (80093e0 <SendValues+0x58>)
 8009390:	cb03      	ldmia	r3!, {r0, r1}
 8009392:	6010      	str	r0, [r2, #0]
 8009394:	6051      	str	r1, [r2, #4]
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	8113      	strh	r3, [r2, #8]
 800939a:	2209      	movs	r2, #9
 800939c:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <SendValues+0x5c>)
 800939e:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80093a0:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <SendValues+0x5c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093aa:	490c      	ldr	r1, [pc, #48]	; (80093dc <SendValues+0x54>)
 80093ac:	480e      	ldr	r0, [pc, #56]	; (80093e8 <SendValues+0x60>)
 80093ae:	f7fe f886 	bl	80074be <HAL_UART_Transmit>

	len=sprintf(buffer, "!Current\n");
 80093b2:	4a0a      	ldr	r2, [pc, #40]	; (80093dc <SendValues+0x54>)
 80093b4:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <SendValues+0x64>)
 80093b6:	cb03      	ldmia	r3!, {r0, r1}
 80093b8:	6010      	str	r0, [r2, #0]
 80093ba:	6051      	str	r1, [r2, #4]
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	8113      	strh	r3, [r2, #8]
 80093c0:	2209      	movs	r2, #9
 80093c2:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <SendValues+0x5c>)
 80093c4:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <SendValues+0x5c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093d0:	4902      	ldr	r1, [pc, #8]	; (80093dc <SendValues+0x54>)
 80093d2:	4805      	ldr	r0, [pc, #20]	; (80093e8 <SendValues+0x60>)
 80093d4:	f7fe f873 	bl	80074be <HAL_UART_Transmit>

//	LOAD_VOLTAGE
//	LOAD_CURRENT
//	TEMPERATURE

}
 80093d8:	bf00      	nop
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000840 	.word	0x20000840
 80093e0:	0800b258 	.word	0x0800b258
 80093e4:	20000a64 	.word	0x20000a64
 80093e8:	200002c4 	.word	0x200002c4
 80093ec:	0800b264 	.word	0x0800b264

080093f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0304 	and.w	r3, r3, #4
 8009402:	2b04      	cmp	r3, #4
 8009404:	d12a      	bne.n	800945c <HAL_ADC_ConvCpltCallback+0x6c>
		{
			ADC_raw[i] = HAL_ADC_GetValue(hadc);
 8009406:	4b17      	ldr	r3, [pc, #92]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461c      	mov	r4, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7f7 fcd9 	bl	8000dc4 <HAL_ADC_GetValue>
 8009412:	4602      	mov	r2, r0
 8009414:	4b14      	ldr	r3, [pc, #80]	; (8009468 <HAL_ADC_ConvCpltCallback+0x78>)
 8009416:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			ADC_float[i] = (float)ADC_raw[i];
 800941a:	4b12      	ldr	r3, [pc, #72]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	4619      	mov	r1, r3
 8009420:	4b10      	ldr	r3, [pc, #64]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	4b10      	ldr	r3, [pc, #64]	; (8009468 <HAL_ADC_ConvCpltCallback+0x78>)
 8009428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009434:	4a0d      	ldr	r2, [pc, #52]	; (800946c <HAL_ADC_ConvCpltCallback+0x7c>)
 8009436:	008b      	lsls	r3, r1, #2
 8009438:	4413      	add	r3, r2
 800943a:	edc3 7a00 	vstr	s15, [r3]
			i++;
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	3301      	adds	r3, #1
 8009444:	b2da      	uxtb	r2, r3
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 8009448:	701a      	strb	r2, [r3, #0]
			if (i>2) i=0;
 800944a:	4b06      	ldr	r3, [pc, #24]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d902      	bls.n	8009458 <HAL_ADC_ConvCpltCallback+0x68>
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <HAL_ADC_ConvCpltCallback+0x74>)
 8009454:	2200      	movs	r2, #0
 8009456:	701a      	strb	r2, [r3, #0]
			CalculateValues();
 8009458:	f7ff ff3e 	bl	80092d8 <CalculateValues>
		}
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	bd90      	pop	{r4, r7, pc}
 8009464:	2000021c 	.word	0x2000021c
 8009468:	200008a4 	.word	0x200008a4
 800946c:	20000220 	.word	0x20000220

08009470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b5b0      	push	{r4, r5, r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM8) //check if the interrupt comes from TIM8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a0f      	ldr	r2, [pc, #60]	; (80094bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d118      	bne.n	80094b4 <HAL_TIM_PeriodElapsedCallback+0x44>
        {
    	len=sprintf(buffer, "!Protection 1 Alive\n");
 8009482:	4a0f      	ldr	r2, [pc, #60]	; (80094c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8009484:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009486:	4615      	mov	r5, r2
 8009488:	461c      	mov	r4, r3
 800948a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800948c:	6028      	str	r0, [r5, #0]
 800948e:	6069      	str	r1, [r5, #4]
 8009490:	60aa      	str	r2, [r5, #8]
 8009492:	60eb      	str	r3, [r5, #12]
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	6128      	str	r0, [r5, #16]
 8009498:	7923      	ldrb	r3, [r4, #4]
 800949a:	752b      	strb	r3, [r5, #20]
 800949c:	2214      	movs	r2, #20
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80094a0:	601a      	str	r2, [r3, #0]
    	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094ac:	4904      	ldr	r1, [pc, #16]	; (80094c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80094ae:	4807      	ldr	r0, [pc, #28]	; (80094cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80094b0:	f7fe f805 	bl	80074be <HAL_UART_Transmit>
        }
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bdb0      	pop	{r4, r5, r7, pc}
 80094bc:	40010400 	.word	0x40010400
 80094c0:	20000840 	.word	0x20000840
 80094c4:	0800b270 	.word	0x0800b270
 80094c8:	20000a64 	.word	0x20000a64
 80094cc:	200002c4 	.word	0x200002c4

080094d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80094d4:	f7f7 f888 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80094d8:	f000 f84a 	bl	8009570 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80094dc:	f000 fd6c 	bl	8009fb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80094e0:	f000 fcfa 	bl	8009ed8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80094e4:	f000 fd34 	bl	8009f50 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80094e8:	f000 f924 	bl	8009734 <MX_ADC1_Init>
  MX_DAC1_Init();
 80094ec:	f000 f99a 	bl	8009824 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80094f0:	f000 f9ca 	bl	8009888 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80094f4:	f000 fad2 	bl	8009a9c <MX_TIM3_Init>
  MX_TIM4_Init();
 80094f8:	f000 fb54 	bl	8009ba4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80094fc:	f000 fa4c 	bl	8009998 <MX_TIM2_Init>
  MX_TIM5_Init();
 8009500:	f000 fbc8 	bl	8009c94 <MX_TIM5_Init>
  MX_TIM8_Init();
 8009504:	f000 fc3e 	bl	8009d84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8009508:	4812      	ldr	r0, [pc, #72]	; (8009554 <main+0x84>)
 800950a:	f7f7 fb1b 	bl	8000b44 <HAL_ADC_Start_IT>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, Vout);
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <main+0x88>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2208      	movs	r2, #8
 8009514:	2100      	movs	r1, #0
 8009516:	4811      	ldr	r0, [pc, #68]	; (800955c <main+0x8c>)
 8009518:	f7f8 fef1 	bl	80022fe <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800951c:	2100      	movs	r1, #0
 800951e:	480f      	ldr	r0, [pc, #60]	; (800955c <main+0x8c>)
 8009520:	f7f8 fe47 	bl	80021b2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 8009524:	480e      	ldr	r0, [pc, #56]	; (8009560 <main+0x90>)
 8009526:	f7fc fd30 	bl	8005f8a <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, Rx_data, 1);	// Activate USART rx interrupt
 800952a:	2201      	movs	r2, #1
 800952c:	490d      	ldr	r1, [pc, #52]	; (8009564 <main+0x94>)
 800952e:	480e      	ldr	r0, [pc, #56]	; (8009568 <main+0x98>)
 8009530:	f7fe f852 	bl	80075d8 <HAL_UART_Receive_IT>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_IT(&hadc1);
 8009534:	4807      	ldr	r0, [pc, #28]	; (8009554 <main+0x84>)
 8009536:	f7f7 fb05 	bl	8000b44 <HAL_ADC_Start_IT>
	  HAL_Delay(200);
 800953a:	20c8      	movs	r0, #200	; 0xc8
 800953c:	f7f7 f8b6 	bl	80006ac <HAL_Delay>
	  if (Transfer_cplt==1) {
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <main+0x9c>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d1f5      	bne.n	8009534 <main+0x64>
		  StringSort();
 8009548:	f000 fe64 	bl	800a214 <StringSort>
		  Transfer_cplt=0;
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <main+0x9c>)
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 8009552:	e7ef      	b.n	8009534 <main+0x64>
 8009554:	200007d8 	.word	0x200007d8
 8009558:	2000001c 	.word	0x2000001c
 800955c:	200002b0 	.word	0x200002b0
 8009560:	20000230 	.word	0x20000230
 8009564:	2000074c 	.word	0x2000074c
 8009568:	200002c4 	.word	0x200002c4
 800956c:	2000022c 	.word	0x2000022c

08009570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b0cc      	sub	sp, #304	; 0x130
 8009574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009576:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800957a:	224c      	movs	r2, #76	; 0x4c
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f001 fd96 	bl	800b0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009584:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009588:	2220      	movs	r2, #32
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f001 fd8f 	bl	800b0b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	23bc      	movs	r3, #188	; 0xbc
 800959a:	461a      	mov	r2, r3
 800959c:	2100      	movs	r1, #0
 800959e:	f001 fd87 	bl	800b0b0 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80095a2:	4a61      	ldr	r2, [pc, #388]	; (8009728 <SystemClock_Config+0x1b8>)
 80095a4:	4b60      	ldr	r3, [pc, #384]	; (8009728 <SystemClock_Config+0x1b8>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f023 0304 	bic.w	r3, r3, #4
 80095ac:	60d3      	str	r3, [r2, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	4a5c      	ldr	r2, [pc, #368]	; (8009728 <SystemClock_Config+0x1b8>)
 80095b6:	4b5c      	ldr	r3, [pc, #368]	; (8009728 <SystemClock_Config+0x1b8>)
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80095be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c2:	6193      	str	r3, [r2, #24]
 80095c4:	4b58      	ldr	r3, [pc, #352]	; (8009728 <SystemClock_Config+0x1b8>)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	1d3b      	adds	r3, r7, #4
 80095d2:	681b      	ldr	r3, [r3, #0]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 80095d4:	bf00      	nop
 80095d6:	4b54      	ldr	r3, [pc, #336]	; (8009728 <SystemClock_Config+0x1b8>)
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e2:	d1f8      	bne.n	80095d6 <SystemClock_Config+0x66>
  {
    
  }
  /**Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80095e4:	4a51      	ldr	r2, [pc, #324]	; (800972c <SystemClock_Config+0x1bc>)
 80095e6:	4b51      	ldr	r3, [pc, #324]	; (800972c <SystemClock_Config+0x1bc>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	f023 0303 	bic.w	r3, r3, #3
 80095ee:	f043 0302 	orr.w	r3, r3, #2
 80095f2:	6293      	str	r3, [r2, #40]	; 0x28
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80095fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009602:	2302      	movs	r3, #2
 8009604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009608:	2302      	movs	r3, #2
 800960a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8009614:	2318      	movs	r3, #24
 8009616:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800961a:	2302      	movs	r3, #2
 800961c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009620:	2304      	movs	r3, #4
 8009622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009626:	2302      	movs	r3, #2
 8009628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800962c:	230c      	movs	r3, #12
 800962e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009632:	2300      	movs	r3, #0
 8009634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800963e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fa faac 	bl	8003ba0 <HAL_RCC_OscConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800964e:	f001 f871 	bl	800a734 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009652:	233f      	movs	r3, #63	; 0x3f
 8009654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009658:	2303      	movs	r3, #3
 800965a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800965e:	2300      	movs	r3, #0
 8009660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8009664:	2300      	movs	r3, #0
 8009666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800966a:	2300      	movs	r3, #0
 800966c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8009670:	2300      	movs	r3, #0
 8009672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8009676:	2300      	movs	r3, #0
 8009678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009682:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009686:	2101      	movs	r1, #1
 8009688:	4618      	mov	r0, r3
 800968a:	f7fa fe23 	bl	80042d4 <HAL_RCC_ClockConfig>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8009694:	f001 f84e 	bl	800a734 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4a24      	ldr	r2, [pc, #144]	; (8009730 <SystemClock_Config+0x1c0>)
 800969e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80096a0:	f107 0308 	add.w	r3, r7, #8
 80096a4:	2204      	movs	r2, #4
 80096a6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	2281      	movs	r2, #129	; 0x81
 80096ae:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	2202      	movs	r2, #2
 80096b6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80096b8:	f107 0308 	add.w	r3, r7, #8
 80096bc:	2202      	movs	r2, #2
 80096be:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	2202      	movs	r2, #2
 80096c6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80096c8:	f107 0308 	add.w	r3, r7, #8
 80096cc:	2240      	movs	r2, #64	; 0x40
 80096ce:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	2200      	movs	r2, #0
 80096d6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	2200      	movs	r2, #0
 80096de:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	2200      	movs	r2, #0
 80096f0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80096f2:	f107 0308 	add.w	r3, r7, #8
 80096f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80096fe:	f107 0308 	add.w	r3, r7, #8
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009708:	f107 0308 	add.w	r3, r7, #8
 800970c:	4618      	mov	r0, r3
 800970e:	f7fb f907 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <SystemClock_Config+0x1ac>
  {
    Error_Handler();
 8009718:	f001 f80c 	bl	800a734 <Error_Handler>
  }
}
 800971c:	bf00      	nop
 800971e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	58024800 	.word	0x58024800
 800972c:	58024400 	.word	0x58024400
 8009730:	000c8002 	.word	0x000c8002

08009734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800973a:	f107 031c 	add.w	r3, r7, #28
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	605a      	str	r2, [r3, #4]
 8009744:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009746:	463b      	mov	r3, r7
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	611a      	str	r2, [r3, #16]
 8009754:	615a      	str	r2, [r3, #20]
 8009756:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Common config 
  */
  hadc1.Instance = ADC1;
 8009758:	4b30      	ldr	r3, [pc, #192]	; (800981c <MX_ADC1_Init+0xe8>)
 800975a:	4a31      	ldr	r2, [pc, #196]	; (8009820 <MX_ADC1_Init+0xec>)
 800975c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800975e:	4b2f      	ldr	r3, [pc, #188]	; (800981c <MX_ADC1_Init+0xe8>)
 8009760:	2200      	movs	r2, #0
 8009762:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8009764:	4b2d      	ldr	r3, [pc, #180]	; (800981c <MX_ADC1_Init+0xe8>)
 8009766:	2200      	movs	r2, #0
 8009768:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800976a:	4b2c      	ldr	r3, [pc, #176]	; (800981c <MX_ADC1_Init+0xe8>)
 800976c:	2200      	movs	r2, #0
 800976e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <MX_ADC1_Init+0xe8>)
 8009772:	2204      	movs	r2, #4
 8009774:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009776:	4b29      	ldr	r3, [pc, #164]	; (800981c <MX_ADC1_Init+0xe8>)
 8009778:	2200      	movs	r2, #0
 800977a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800977c:	4b27      	ldr	r3, [pc, #156]	; (800981c <MX_ADC1_Init+0xe8>)
 800977e:	2200      	movs	r2, #0
 8009780:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8009782:	4b26      	ldr	r3, [pc, #152]	; (800981c <MX_ADC1_Init+0xe8>)
 8009784:	2201      	movs	r2, #1
 8009786:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <MX_ADC1_Init+0xe8>)
 800978a:	2200      	movs	r2, #0
 800978c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800978e:	4b23      	ldr	r3, [pc, #140]	; (800981c <MX_ADC1_Init+0xe8>)
 8009790:	2201      	movs	r2, #1
 8009792:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009794:	4b21      	ldr	r3, [pc, #132]	; (800981c <MX_ADC1_Init+0xe8>)
 8009796:	2200      	movs	r2, #0
 8009798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <MX_ADC1_Init+0xe8>)
 800979c:	2200      	movs	r2, #0
 800979e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80097a0:	4b1e      	ldr	r3, [pc, #120]	; (800981c <MX_ADC1_Init+0xe8>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <MX_ADC1_Init+0xe8>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.BoostMode = DISABLE;
 80097ac:	4b1b      	ldr	r3, [pc, #108]	; (800981c <MX_ADC1_Init+0xe8>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80097b4:	4b19      	ldr	r3, [pc, #100]	; (800981c <MX_ADC1_Init+0xe8>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80097bc:	4817      	ldr	r0, [pc, #92]	; (800981c <MX_ADC1_Init+0xe8>)
 80097be:	f7f6 ff97 	bl	80006f0 <HAL_ADC_Init>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80097c8:	f000 ffb4 	bl	800a734 <Error_Handler>
  }
  /**Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80097d0:	f107 031c 	add.w	r3, r7, #28
 80097d4:	4619      	mov	r1, r3
 80097d6:	4811      	ldr	r0, [pc, #68]	; (800981c <MX_ADC1_Init+0xe8>)
 80097d8:	f7f8 faf2 	bl	8001dc0 <HAL_ADCEx_MultiModeConfigChannel>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80097e2:	f000 ffa7 	bl	800a734 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80097e6:	2303      	movs	r3, #3
 80097e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80097ea:	2301      	movs	r3, #1
 80097ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097fe:	463b      	mov	r3, r7
 8009800:	4619      	mov	r1, r3
 8009802:	4806      	ldr	r0, [pc, #24]	; (800981c <MX_ADC1_Init+0xe8>)
 8009804:	f7f7 fd72 	bl	80012ec <HAL_ADC_ConfigChannel>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800980e:	f000 ff91 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009812:	bf00      	nop
 8009814:	3728      	adds	r7, #40	; 0x28
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200007d8 	.word	0x200007d8
 8009820:	40022000 	.word	0x40022000

08009824 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	; 0x28
 8009828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	2224      	movs	r2, #36	; 0x24
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fc3d 	bl	800b0b0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <MX_DAC1_Init+0x5c>)
 8009838:	4a12      	ldr	r2, [pc, #72]	; (8009884 <MX_DAC1_Init+0x60>)
 800983a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800983c:	4810      	ldr	r0, [pc, #64]	; (8009880 <MX_DAC1_Init+0x5c>)
 800983e:	f7f8 fc96 	bl	800216e <HAL_DAC_Init>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009848:	f000 ff74 	bl	800a734 <Error_Handler>
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800984c:	2300      	movs	r3, #0
 800984e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8009850:	2300      	movs	r3, #0
 8009852:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009860:	1d3b      	adds	r3, r7, #4
 8009862:	2200      	movs	r2, #0
 8009864:	4619      	mov	r1, r3
 8009866:	4806      	ldr	r0, [pc, #24]	; (8009880 <MX_DAC1_Init+0x5c>)
 8009868:	f7f8 fd78 	bl	800235c <HAL_DAC_ConfigChannel>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8009872:	f000 ff5f 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009876:	bf00      	nop
 8009878:	3728      	adds	r7, #40	; 0x28
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	200002b0 	.word	0x200002b0
 8009884:	40007400 	.word	0x40007400

08009888 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800988c:	4b40      	ldr	r3, [pc, #256]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800988e:	4a41      	ldr	r2, [pc, #260]	; (8009994 <MX_FDCAN1_Init+0x10c>)
 8009890:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8009892:	4b3f      	ldr	r3, [pc, #252]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009894:	2200      	movs	r2, #0
 8009896:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8009898:	4b3d      	ldr	r3, [pc, #244]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800989a:	2200      	movs	r2, #0
 800989c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800989e:	4b3c      	ldr	r3, [pc, #240]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80098a4:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.NominalPrescaler = 1;
 80098aa:	4b39      	ldr	r3, [pc, #228]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098ac:	2201      	movs	r2, #1
 80098ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80098b0:	4b37      	ldr	r3, [pc, #220]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098b2:	2201      	movs	r2, #1
 80098b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80098b6:	4b36      	ldr	r3, [pc, #216]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098b8:	2202      	movs	r2, #2
 80098ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80098bc:	4b34      	ldr	r3, [pc, #208]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098be:	2202      	movs	r2, #2
 80098c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80098c2:	4b33      	ldr	r3, [pc, #204]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80098c8:	4b31      	ldr	r3, [pc, #196]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80098ce:	4b30      	ldr	r3, [pc, #192]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098d0:	2201      	movs	r2, #1
 80098d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80098d4:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80098da:	4b2d      	ldr	r3, [pc, #180]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098dc:	2200      	movs	r2, #0
 80098de:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80098e0:	4b2b      	ldr	r3, [pc, #172]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80098e6:	4b2a      	ldr	r3, [pc, #168]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80098ec:	4b28      	ldr	r3, [pc, #160]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80098f2:	4b27      	ldr	r3, [pc, #156]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098f4:	2204      	movs	r2, #4
 80098f6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80098f8:	4b25      	ldr	r3, [pc, #148]	; (8009990 <MX_FDCAN1_Init+0x108>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80098fe:	4b24      	ldr	r3, [pc, #144]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009900:	2204      	movs	r2, #4
 8009902:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8009904:	4b22      	ldr	r3, [pc, #136]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009906:	2200      	movs	r2, #0
 8009908:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800990a:	4b21      	ldr	r3, [pc, #132]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800990c:	2204      	movs	r2, #4
 800990e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8009910:	4b1f      	ldr	r3, [pc, #124]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009912:	2200      	movs	r2, #0
 8009914:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8009916:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009918:	2200      	movs	r2, #0
 800991a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800991c:	4b1c      	ldr	r3, [pc, #112]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800991e:	2200      	movs	r2, #0
 8009920:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8009922:	4b1b      	ldr	r3, [pc, #108]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009924:	2200      	movs	r2, #0
 8009926:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8009928:	4b19      	ldr	r3, [pc, #100]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800992a:	2204      	movs	r2, #4
 800992c:	669a      	str	r2, [r3, #104]	; 0x68
  hfdcan1.msgRam.StandardFilterSA = 0;
 800992e:	4b18      	ldr	r3, [pc, #96]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009930:	2200      	movs	r2, #0
 8009932:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan1.msgRam.ExtendedFilterSA = 0;
 8009934:	4b16      	ldr	r3, [pc, #88]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009936:	2200      	movs	r2, #0
 8009938:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan1.msgRam.RxFIFO0SA = 0;
 800993a:	4b15      	ldr	r3, [pc, #84]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800993c:	2200      	movs	r2, #0
 800993e:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan1.msgRam.RxFIFO1SA = 0;
 8009940:	4b13      	ldr	r3, [pc, #76]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009942:	2200      	movs	r2, #0
 8009944:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan1.msgRam.RxBufferSA = 0;
 8009946:	4b12      	ldr	r3, [pc, #72]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009948:	2200      	movs	r2, #0
 800994a:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan1.msgRam.TxEventFIFOSA = 0;
 800994c:	4b10      	ldr	r3, [pc, #64]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan1.msgRam.TxBufferSA = 0;
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan1.msgRam.TxFIFOQSA = 0;
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  hfdcan1.msgRam.TTMemorySA = 0;
 8009964:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hfdcan1.msgRam.EndAddress = 0;
 800996c:	4b08      	ldr	r3, [pc, #32]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  hfdcan1.ErrorCode = 0;
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <MX_FDCAN1_Init+0x108>)
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800997c:	4804      	ldr	r0, [pc, #16]	; (8009990 <MX_FDCAN1_Init+0x108>)
 800997e:	f7f8 fe97 	bl	80026b0 <HAL_FDCAN_Init>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <MX_FDCAN1_Init+0x104>
  {
    Error_Handler();
 8009988:	f000 fed4 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800998c:	bf00      	nop
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200008b0 	.word	0x200008b0
 8009994:	4000a000 	.word	0x4000a000

08009998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08e      	sub	sp, #56	; 0x38
 800999c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800999e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	605a      	str	r2, [r3, #4]
 80099a8:	609a      	str	r2, [r3, #8]
 80099aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099ac:	f107 031c 	add.w	r3, r7, #28
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	605a      	str	r2, [r3, #4]
 80099b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099b8:	463b      	mov	r3, r7
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	609a      	str	r2, [r3, #8]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	611a      	str	r2, [r3, #16]
 80099c6:	615a      	str	r2, [r3, #20]
 80099c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80099ca:	4b33      	ldr	r3, [pc, #204]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80099d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480;
 80099d2:	4b31      	ldr	r3, [pc, #196]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80099d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099da:	4b2f      	ldr	r3, [pc, #188]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099dc:	2200      	movs	r2, #0
 80099de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80099e0:	4b2d      	ldr	r3, [pc, #180]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099e2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80099e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099e8:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80099f4:	4828      	ldr	r0, [pc, #160]	; (8009a98 <MX_TIM2_Init+0x100>)
 80099f6:	f7fc fa9d 	bl	8005f34 <HAL_TIM_Base_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009a00:	f000 fe98 	bl	800a734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4821      	ldr	r0, [pc, #132]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a12:	f7fc feb3 	bl	800677c <HAL_TIM_ConfigClockSource>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009a1c:	f000 fe8a 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009a20:	481d      	ldr	r0, [pc, #116]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a22:	f7fc fb04 	bl	800602e <HAL_TIM_PWM_Init>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009a2c:	f000 fe82 	bl	800a734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a38:	f107 031c 	add.w	r3, r7, #28
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4816      	ldr	r0, [pc, #88]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a40:	f7fd fc06 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009a4a:	f000 fe73 	bl	800a734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a4e:	2360      	movs	r3, #96	; 0x60
 8009a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a5e:	463b      	mov	r3, r7
 8009a60:	2204      	movs	r2, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	480c      	ldr	r0, [pc, #48]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a66:	f7fc fd71 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009a70:	f000 fe60 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a74:	463b      	mov	r3, r7
 8009a76:	2208      	movs	r2, #8
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4807      	ldr	r0, [pc, #28]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a7c:	f7fc fd66 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009a86:	f000 fe55 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009a8a:	4803      	ldr	r0, [pc, #12]	; (8009a98 <MX_TIM2_Init+0x100>)
 8009a8c:	f001 f84e 	bl	800ab2c <HAL_TIM_MspPostInit>

}
 8009a90:	bf00      	nop
 8009a92:	3738      	adds	r7, #56	; 0x38
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200009b4 	.word	0x200009b4

08009a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08e      	sub	sp, #56	; 0x38
 8009aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	605a      	str	r2, [r3, #4]
 8009aac:	609a      	str	r2, [r3, #8]
 8009aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ab0:	f107 031c 	add.w	r3, r7, #28
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009abc:	463b      	mov	r3, r7
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	609a      	str	r2, [r3, #8]
 8009ac6:	60da      	str	r2, [r3, #12]
 8009ac8:	611a      	str	r2, [r3, #16]
 8009aca:	615a      	str	r2, [r3, #20]
 8009acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009ace:	4b33      	ldr	r3, [pc, #204]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009ad0:	4a33      	ldr	r2, [pc, #204]	; (8009ba0 <MX_TIM3_Init+0x104>)
 8009ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 8009ad4:	4b31      	ldr	r3, [pc, #196]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009ad6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009adc:	4b2f      	ldr	r3, [pc, #188]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8009ae2:	4b2e      	ldr	r3, [pc, #184]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009ae4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009aea:	4b2c      	ldr	r3, [pc, #176]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009af0:	4b2a      	ldr	r3, [pc, #168]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009af2:	2280      	movs	r2, #128	; 0x80
 8009af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009af6:	4829      	ldr	r0, [pc, #164]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009af8:	f7fc fa1c 	bl	8005f34 <HAL_TIM_Base_Init>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8009b02:	f000 fe17 	bl	800a734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b10:	4619      	mov	r1, r3
 8009b12:	4822      	ldr	r0, [pc, #136]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b14:	f7fc fe32 	bl	800677c <HAL_TIM_ConfigClockSource>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8009b1e:	f000 fe09 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009b22:	481e      	ldr	r0, [pc, #120]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b24:	f7fc fa83 	bl	800602e <HAL_TIM_PWM_Init>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8009b2e:	f000 fe01 	bl	800a734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009b3a:	f107 031c 	add.w	r3, r7, #28
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4816      	ldr	r0, [pc, #88]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b42:	f7fd fb85 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8009b4c:	f000 fdf2 	bl	800a734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b50:	2360      	movs	r3, #96	; 0x60
 8009b52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b60:	463b      	mov	r3, r7
 8009b62:	2200      	movs	r2, #0
 8009b64:	4619      	mov	r1, r3
 8009b66:	480d      	ldr	r0, [pc, #52]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b68:	f7fc fcf0 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8009b72:	f000 fddf 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b76:	463b      	mov	r3, r7
 8009b78:	2204      	movs	r2, #4
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4807      	ldr	r0, [pc, #28]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b7e:	f7fc fce5 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8009b88:	f000 fdd4 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009b8c:	4803      	ldr	r0, [pc, #12]	; (8009b9c <MX_TIM3_Init+0x100>)
 8009b8e:	f000 ffcd 	bl	800ab2c <HAL_TIM_MspPostInit>

}
 8009b92:	bf00      	nop
 8009b94:	3738      	adds	r7, #56	; 0x38
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000790 	.word	0x20000790
 8009ba0:	40000400 	.word	0x40000400

08009ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08e      	sub	sp, #56	; 0x38
 8009ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	605a      	str	r2, [r3, #4]
 8009bb4:	609a      	str	r2, [r3, #8]
 8009bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bb8:	f107 031c 	add.w	r3, r7, #28
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	605a      	str	r2, [r3, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	609a      	str	r2, [r3, #8]
 8009bce:	60da      	str	r2, [r3, #12]
 8009bd0:	611a      	str	r2, [r3, #16]
 8009bd2:	615a      	str	r2, [r3, #20]
 8009bd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009bd6:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009bd8:	4a2d      	ldr	r2, [pc, #180]	; (8009c90 <MX_TIM4_Init+0xec>)
 8009bda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480;
 8009bdc:	4b2b      	ldr	r3, [pc, #172]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009bde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be4:	4b29      	ldr	r3, [pc, #164]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8009bea:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009bec:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bf2:	4b26      	ldr	r3, [pc, #152]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009bf8:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009bfa:	2280      	movs	r2, #128	; 0x80
 8009bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009bfe:	4823      	ldr	r0, [pc, #140]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c00:	f7fc f998 	bl	8005f34 <HAL_TIM_Base_Init>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8009c0a:	f000 fd93 	bl	800a734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c18:	4619      	mov	r1, r3
 8009c1a:	481c      	ldr	r0, [pc, #112]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c1c:	f7fc fdae 	bl	800677c <HAL_TIM_ConfigClockSource>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8009c26:	f000 fd85 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009c2a:	4818      	ldr	r0, [pc, #96]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c2c:	f7fc f9ff 	bl	800602e <HAL_TIM_PWM_Init>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8009c36:	f000 fd7d 	bl	800a734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009c42:	f107 031c 	add.w	r3, r7, #28
 8009c46:	4619      	mov	r1, r3
 8009c48:	4810      	ldr	r0, [pc, #64]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c4a:	f7fd fb01 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8009c54:	f000 fd6e 	bl	800a734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c58:	2360      	movs	r3, #96	; 0x60
 8009c5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c68:	463b      	mov	r3, r7
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4807      	ldr	r0, [pc, #28]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c70:	f7fc fc6c 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8009c7a:	f000 fd5b 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009c7e:	4803      	ldr	r0, [pc, #12]	; (8009c8c <MX_TIM4_Init+0xe8>)
 8009c80:	f000 ff54 	bl	800ab2c <HAL_TIM_MspPostInit>

}
 8009c84:	bf00      	nop
 8009c86:	3738      	adds	r7, #56	; 0x38
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000270 	.word	0x20000270
 8009c90:	40000800 	.word	0x40000800

08009c94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	; 0x38
 8009c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ca8:	f107 031c 	add.w	r3, r7, #28
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	605a      	str	r2, [r3, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	605a      	str	r2, [r3, #4]
 8009cbc:	609a      	str	r2, [r3, #8]
 8009cbe:	60da      	str	r2, [r3, #12]
 8009cc0:	611a      	str	r2, [r3, #16]
 8009cc2:	615a      	str	r2, [r3, #20]
 8009cc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cc8:	4a2d      	ldr	r2, [pc, #180]	; (8009d80 <MX_TIM5_Init+0xec>)
 8009cca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 480;
 8009ccc:	4b2b      	ldr	r3, [pc, #172]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009cd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd4:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 499;
 8009cda:	4b28      	ldr	r3, [pc, #160]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cdc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009ce0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009ce8:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cea:	2280      	movs	r2, #128	; 0x80
 8009cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009cee:	4823      	ldr	r0, [pc, #140]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009cf0:	f7fc f920 	bl	8005f34 <HAL_TIM_Base_Init>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8009cfa:	f000 fd1b 	bl	800a734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d08:	4619      	mov	r1, r3
 8009d0a:	481c      	ldr	r0, [pc, #112]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009d0c:	f7fc fd36 	bl	800677c <HAL_TIM_ConfigClockSource>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8009d16:	f000 fd0d 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009d1a:	4818      	ldr	r0, [pc, #96]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009d1c:	f7fc f987 	bl	800602e <HAL_TIM_PWM_Init>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8009d26:	f000 fd05 	bl	800a734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009d32:	f107 031c 	add.w	r3, r7, #28
 8009d36:	4619      	mov	r1, r3
 8009d38:	4810      	ldr	r0, [pc, #64]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009d3a:	f7fd fa89 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8009d44:	f000 fcf6 	bl	800a734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d48:	2360      	movs	r3, #96	; 0x60
 8009d4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009d58:	463b      	mov	r3, r7
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4807      	ldr	r0, [pc, #28]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009d60:	f7fc fbf4 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8009d6a:	f000 fce3 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8009d6e:	4803      	ldr	r0, [pc, #12]	; (8009d7c <MX_TIM5_Init+0xe8>)
 8009d70:	f000 fedc 	bl	800ab2c <HAL_TIM_MspPostInit>

}
 8009d74:	bf00      	nop
 8009d76:	3738      	adds	r7, #56	; 0x38
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000750 	.word	0x20000750
 8009d80:	40000c00 	.word	0x40000c00

08009d84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b09a      	sub	sp, #104	; 0x68
 8009d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	605a      	str	r2, [r3, #4]
 8009d94:	609a      	str	r2, [r3, #8]
 8009d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	60da      	str	r2, [r3, #12]
 8009db2:	611a      	str	r2, [r3, #16]
 8009db4:	615a      	str	r2, [r3, #20]
 8009db6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009db8:	1d3b      	adds	r3, r7, #4
 8009dba:	222c      	movs	r2, #44	; 0x2c
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 f976 	bl	800b0b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009dc4:	4b42      	ldr	r3, [pc, #264]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009dc6:	4a43      	ldr	r2, [pc, #268]	; (8009ed4 <MX_TIM8_Init+0x150>)
 8009dc8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 48000;
 8009dca:	4b41      	ldr	r3, [pc, #260]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009dcc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8009dd0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009dd2:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 29940;
 8009dd8:	4b3d      	ldr	r3, [pc, #244]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009dda:	f247 42f4 	movw	r2, #29940	; 0x74f4
 8009dde:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009de0:	4b3b      	ldr	r3, [pc, #236]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009de6:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009dee:	2280      	movs	r2, #128	; 0x80
 8009df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009df2:	4837      	ldr	r0, [pc, #220]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009df4:	f7fc f89e 	bl	8005f34 <HAL_TIM_Base_Init>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009dfe:	f000 fc99 	bl	800a734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e06:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4830      	ldr	r0, [pc, #192]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009e10:	f7fc fcb4 	bl	800677c <HAL_TIM_ConfigClockSource>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009e1a:	f000 fc8b 	bl	800a734 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8009e1e:	482c      	ldr	r0, [pc, #176]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009e20:	f7fc f8d0 	bl	8005fc4 <HAL_TIM_OC_Init>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009e2a:	f000 fc83 	bl	800a734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009e32:	2300      	movs	r3, #0
 8009e34:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009e3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4823      	ldr	r0, [pc, #140]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009e42:	f7fd fa05 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009e4c:	f000 fc72 	bl	800a734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009e50:	2300      	movs	r3, #0
 8009e52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009e64:	2300      	movs	r3, #0
 8009e66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e70:	2200      	movs	r2, #0
 8009e72:	4619      	mov	r1, r3
 8009e74:	4816      	ldr	r0, [pc, #88]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009e76:	f7fc faeb 	bl	8006450 <HAL_TIM_OC_ConfigChannel>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009e80:	f000 fc58 	bl	800a734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009eb4:	1d3b      	adds	r3, r7, #4
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4805      	ldr	r0, [pc, #20]	; (8009ed0 <MX_TIM8_Init+0x14c>)
 8009eba:	f7fd fa1d 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8009ec4:	f000 fc36 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009ec8:	bf00      	nop
 8009eca:	3768      	adds	r7, #104	; 0x68
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20000230 	.word	0x20000230
 8009ed4:	40010400 	.word	0x40010400

08009ed8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009edc:	4b1a      	ldr	r3, [pc, #104]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009ede:	4a1b      	ldr	r2, [pc, #108]	; (8009f4c <MX_USART3_UART_Init+0x74>)
 8009ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009ee4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009eea:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009ef0:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009ef6:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009efc:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009efe:	220c      	movs	r2, #12
 8009f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f08:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f0e:	4b0e      	ldr	r3, [pc, #56]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	621a      	str	r2, [r3, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8009f14:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8009f26:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	631a      	str	r2, [r3, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f2c:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009f32:	4805      	ldr	r0, [pc, #20]	; (8009f48 <MX_USART3_UART_Init+0x70>)
 8009f34:	f7fd fa72 	bl	800741c <HAL_UART_Init>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8009f3e:	f000 fbf9 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009f42:	bf00      	nop
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200002c4 	.word	0x200002c4
 8009f4c:	40004800 	.word	0x40004800

08009f50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f54:	4b16      	ldr	r3, [pc, #88]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f56:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <MX_USB_OTG_FS_PCD_Init+0x64>)
 8009f58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f5c:	2209      	movs	r2, #9
 8009f5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f60:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f62:	2202      	movs	r2, #2
 8009f64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f66:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f72:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f74:	2202      	movs	r2, #2
 8009f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009f78:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f84:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f92:	2201      	movs	r2, #1
 8009f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f9c:	4804      	ldr	r0, [pc, #16]	; (8009fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009f9e:	f7f9 fca7 	bl	80038f0 <HAL_PCD_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <MX_USB_OTG_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8009fa8:	f000 fbc4 	bl	800a734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009fac:	bf00      	nop
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000348 	.word	0x20000348
 8009fb4:	40080000 	.word	0x40080000

08009fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08e      	sub	sp, #56	; 0x38
 8009fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	605a      	str	r2, [r3, #4]
 8009fc8:	609a      	str	r2, [r3, #8]
 8009fca:	60da      	str	r2, [r3, #12]
 8009fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fce:	4a88      	ldr	r2, [pc, #544]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009fd0:	4b87      	ldr	r3, [pc, #540]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fd6:	f043 0304 	orr.w	r3, r3, #4
 8009fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009fde:	4b84      	ldr	r3, [pc, #528]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	623b      	str	r3, [r7, #32]
 8009fea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009fec:	4a80      	ldr	r2, [pc, #512]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009fee:	4b80      	ldr	r3, [pc, #512]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ffc:	4b7c      	ldr	r3, [pc, #496]	; (800a1f0 <MX_GPIO_Init+0x238>)
 8009ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a00a:	4a79      	ldr	r2, [pc, #484]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a00c:	4b78      	ldr	r3, [pc, #480]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a00e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a01a:	4b75      	ldr	r3, [pc, #468]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a01c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a028:	4a71      	ldr	r2, [pc, #452]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a02a:	4b71      	ldr	r3, [pc, #452]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a02c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a038:	4b6d      	ldr	r3, [pc, #436]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a03a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a046:	4a6a      	ldr	r2, [pc, #424]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a048:	4b69      	ldr	r3, [pc, #420]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a04e:	f043 0302 	orr.w	r3, r3, #2
 800a052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a056:	4b66      	ldr	r3, [pc, #408]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	613b      	str	r3, [r7, #16]
 800a062:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a064:	4a62      	ldr	r2, [pc, #392]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a066:	4b62      	ldr	r3, [pc, #392]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a06c:	f043 0310 	orr.w	r3, r3, #16
 800a070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a074:	4b5e      	ldr	r3, [pc, #376]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a07a:	f003 0310 	and.w	r3, r3, #16
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a082:	4a5b      	ldr	r2, [pc, #364]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a084:	4b5a      	ldr	r3, [pc, #360]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a08a:	f043 0308 	orr.w	r3, r3, #8
 800a08e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a092:	4b57      	ldr	r3, [pc, #348]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	60bb      	str	r3, [r7, #8]
 800a09e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a0a0:	4a53      	ldr	r2, [pc, #332]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a0a2:	4b53      	ldr	r3, [pc, #332]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a0a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0b0:	4b4f      	ldr	r3, [pc, #316]	; (800a1f0 <MX_GPIO_Init+0x238>)
 800a0b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f245 0102 	movw	r1, #20482	; 0x5002
 800a0c4:	484b      	ldr	r0, [pc, #300]	; (800a1f4 <MX_GPIO_Init+0x23c>)
 800a0c6:	f7f9 fbfb 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0d0:	4849      	ldr	r0, [pc, #292]	; (800a1f8 <MX_GPIO_Init+0x240>)
 800a0d2:	f7f9 fbf5 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800a0dc:	4847      	ldr	r0, [pc, #284]	; (800a1fc <MX_GPIO_Init+0x244>)
 800a0de:	f7f9 fbef 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800a0e8:	4845      	ldr	r0, [pc, #276]	; (800a200 <MX_GPIO_Init+0x248>)
 800a0ea:	f7f9 fbe9 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2140      	movs	r1, #64	; 0x40
 800a0f2:	4844      	ldr	r0, [pc, #272]	; (800a204 <MX_GPIO_Init+0x24c>)
 800a0f4:	f7f9 fbe4 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0fe:	4842      	ldr	r0, [pc, #264]	; (800a208 <MX_GPIO_Init+0x250>)
 800a100:	f7f9 fbde 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a10a:	4b40      	ldr	r3, [pc, #256]	; (800a20c <MX_GPIO_Init+0x254>)
 800a10c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a116:	4619      	mov	r1, r3
 800a118:	483d      	ldr	r0, [pc, #244]	; (800a210 <MX_GPIO_Init+0x258>)
 800a11a:	f7f9 fa1b 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 800a11e:	f245 0302 	movw	r3, #20482	; 0x5002
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a124:	2301      	movs	r3, #1
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a12c:	2300      	movs	r3, #0
 800a12e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a134:	4619      	mov	r1, r3
 800a136:	482f      	ldr	r0, [pc, #188]	; (800a1f4 <MX_GPIO_Init+0x23c>)
 800a138:	f7f9 fa0c 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a13c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a142:	2301      	movs	r3, #1
 800a144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a146:	2300      	movs	r3, #0
 800a148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a14a:	2300      	movs	r3, #0
 800a14c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a152:	4619      	mov	r1, r3
 800a154:	4828      	ldr	r0, [pc, #160]	; (800a1f8 <MX_GPIO_Init+0x240>)
 800a156:	f7f9 f9fd 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800a15a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a160:	2301      	movs	r3, #1
 800a162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a164:	2300      	movs	r3, #0
 800a166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a168:	2300      	movs	r3, #0
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a170:	4619      	mov	r1, r3
 800a172:	4822      	ldr	r0, [pc, #136]	; (800a1fc <MX_GPIO_Init+0x244>)
 800a174:	f7f9 f9ee 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a17e:	2301      	movs	r3, #1
 800a180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a182:	2300      	movs	r3, #0
 800a184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a186:	2300      	movs	r3, #0
 800a188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a18a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a18e:	4619      	mov	r1, r3
 800a190:	481b      	ldr	r0, [pc, #108]	; (800a200 <MX_GPIO_Init+0x248>)
 800a192:	f7f9 f9df 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a19a:	2301      	movs	r3, #1
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a1a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4815      	ldr	r0, [pc, #84]	; (800a204 <MX_GPIO_Init+0x24c>)
 800a1ae:	f7f9 f9d1 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a1b2:	2380      	movs	r3, #128	; 0x80
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a1be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	480f      	ldr	r0, [pc, #60]	; (800a204 <MX_GPIO_Init+0x24c>)
 800a1c6:	f7f9 f9c5 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4809      	ldr	r0, [pc, #36]	; (800a208 <MX_GPIO_Init+0x250>)
 800a1e4:	f7f9 f9b6 	bl	8003554 <HAL_GPIO_Init>

}
 800a1e8:	bf00      	nop
 800a1ea:	3738      	adds	r7, #56	; 0x38
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	58024400 	.word	0x58024400
 800a1f4:	58021400 	.word	0x58021400
 800a1f8:	58021000 	.word	0x58021000
 800a1fc:	58020400 	.word	0x58020400
 800a200:	58020c00 	.word	0x58020c00
 800a204:	58021800 	.word	0x58021800
 800a208:	58020000 	.word	0x58020000
 800a20c:	11110000 	.word	0x11110000
 800a210:	58020800 	.word	0x58020800

0800a214 <StringSort>:
//void RidePWM(void) {
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3,PWM);
//}

void StringSort(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
	Start=Rx_String[0];
 800a218:	4ba3      	ldr	r3, [pc, #652]	; (800a4a8 <StringSort+0x294>)
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	4ba3      	ldr	r3, [pc, #652]	; (800a4ac <StringSort+0x298>)
 800a21e:	701a      	strb	r2, [r3, #0]
	if (Start=='!') {								// Test for opcode proceed on ! or clear the Rx_String
 800a220:	4ba2      	ldr	r3, [pc, #648]	; (800a4ac <StringSort+0x298>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b21      	cmp	r3, #33	; 0x21
 800a226:	f040 8210 	bne.w	800a64a <StringSort+0x436>
		/*
		 * Split the string into components
		 */
		Device=(uint8_t)(Rx_String[1]);				// Determine the device type
 800a22a:	4b9f      	ldr	r3, [pc, #636]	; (800a4a8 <StringSort+0x294>)
 800a22c:	785a      	ldrb	r2, [r3, #1]
 800a22e:	4ba0      	ldr	r3, [pc, #640]	; (800a4b0 <StringSort+0x29c>)
 800a230:	701a      	strb	r2, [r3, #0]
		Timer = Rx_String[2];					// Load the timer address
 800a232:	4b9d      	ldr	r3, [pc, #628]	; (800a4a8 <StringSort+0x294>)
 800a234:	789a      	ldrb	r2, [r3, #2]
 800a236:	4b9f      	ldr	r3, [pc, #636]	; (800a4b4 <StringSort+0x2a0>)
 800a238:	701a      	strb	r2, [r3, #0]
		Channel=Rx_String[3];						// Set the channel address
 800a23a:	4b9b      	ldr	r3, [pc, #620]	; (800a4a8 <StringSort+0x294>)
 800a23c:	78da      	ldrb	r2, [r3, #3]
 800a23e:	4b9e      	ldr	r3, [pc, #632]	; (800a4b8 <StringSort+0x2a4>)
 800a240:	701a      	strb	r2, [r3, #0]
		State = (uint8_t)(Rx_String[4]);			// Boolean identifier for State
 800a242:	4b99      	ldr	r3, [pc, #612]	; (800a4a8 <StringSort+0x294>)
 800a244:	791a      	ldrb	r2, [r3, #4]
 800a246:	4b9d      	ldr	r3, [pc, #628]	; (800a4bc <StringSort+0x2a8>)
 800a248:	701a      	strb	r2, [r3, #0]

		Brightness[0] = (Rx_String[5]);
 800a24a:	4b97      	ldr	r3, [pc, #604]	; (800a4a8 <StringSort+0x294>)
 800a24c:	795a      	ldrb	r2, [r3, #5]
 800a24e:	4b9c      	ldr	r3, [pc, #624]	; (800a4c0 <StringSort+0x2ac>)
 800a250:	701a      	strb	r2, [r3, #0]
		Brightness[1] = (Rx_String[6]);
 800a252:	4b95      	ldr	r3, [pc, #596]	; (800a4a8 <StringSort+0x294>)
 800a254:	799a      	ldrb	r2, [r3, #6]
 800a256:	4b9a      	ldr	r3, [pc, #616]	; (800a4c0 <StringSort+0x2ac>)
 800a258:	705a      	strb	r2, [r3, #1]
		Brightness[2] = (Rx_String[7]);
 800a25a:	4b93      	ldr	r3, [pc, #588]	; (800a4a8 <StringSort+0x294>)
 800a25c:	79da      	ldrb	r2, [r3, #7]
 800a25e:	4b98      	ldr	r3, [pc, #608]	; (800a4c0 <StringSort+0x2ac>)
 800a260:	709a      	strb	r2, [r3, #2]
		//strcat(Brightness,Rx_String[6]);
		//strcat(Brightness,Rx_String[7]);
		PWM = atoi(Brightness);
 800a262:	4897      	ldr	r0, [pc, #604]	; (800a4c0 <StringSort+0x2ac>)
 800a264:	f000 fefb 	bl	800b05e <atoi>
 800a268:	4602      	mov	r2, r0
 800a26a:	4b96      	ldr	r3, [pc, #600]	; (800a4c4 <StringSort+0x2b0>)
 800a26c:	601a      	str	r2, [r3, #0]
		/*
		 * Perform the operation
		 */

		//  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
		switch(Device)
 800a26e:	4b90      	ldr	r3, [pc, #576]	; (800a4b0 <StringSort+0x29c>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b31      	cmp	r3, #49	; 0x31
 800a274:	f040 81e9 	bne.w	800a64a <StringSort+0x436>
		{
		case '1':									// Case 1 is a light

			switch (Timer) {
 800a278:	4b8e      	ldr	r3, [pc, #568]	; (800a4b4 <StringSort+0x2a0>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	3b32      	subs	r3, #50	; 0x32
 800a27e:	2b03      	cmp	r3, #3
 800a280:	f200 81e2 	bhi.w	800a648 <StringSort+0x434>
 800a284:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <StringSort+0x78>)
 800a286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28a:	bf00      	nop
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a37b 	.word	0x0800a37b
 800a294:	0800a457 	.word	0x0800a457
 800a298:	0800a561 	.word	0x0800a561
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); case '3': HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);}
//				case '4': __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,PWM);
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4); case '1': HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);}
//					}
			case '2':
				switch (Channel) {
 800a29c:	4b86      	ldr	r3, [pc, #536]	; (800a4b8 <StringSort+0x2a4>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	3b31      	subs	r3, #49	; 0x31
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	f200 81c9 	bhi.w	800a63a <StringSort+0x426>
 800a2a8:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <StringSort+0x9c>)
 800a2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ae:	bf00      	nop
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2ef 	.word	0x0800a2ef
 800a2b8:	0800a31d 	.word	0x0800a31d
 800a2bc:	0800a34b 	.word	0x0800a34b
					case '1': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,PWM);
 800a2c0:	4b81      	ldr	r3, [pc, #516]	; (800a4c8 <StringSort+0x2b4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a7f      	ldr	r2, [pc, #508]	; (800a4c4 <StringSort+0x2b0>)
 800a2c6:	6812      	ldr	r2, [r2, #0]
 800a2c8:	635a      	str	r2, [r3, #52]	; 0x34
						switch (State) {
 800a2ca:	4b7c      	ldr	r3, [pc, #496]	; (800a4bc <StringSort+0x2a8>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b30      	cmp	r3, #48	; 0x30
 800a2d0:	d002      	beq.n	800a2d8 <StringSort+0xc4>
 800a2d2:	2b31      	cmp	r3, #49	; 0x31
 800a2d4:	d006      	beq.n	800a2e4 <StringSort+0xd0>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); break;
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
						}break;
 800a2d6:	e04f      	b.n	800a378 <StringSort+0x164>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); break;
 800a2d8:	2100      	movs	r1, #0
 800a2da:	487b      	ldr	r0, [pc, #492]	; (800a4c8 <StringSort+0x2b4>)
 800a2dc:	f7fb ff28 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a2e0:	bf00      	nop
						}break;
 800a2e2:	e049      	b.n	800a378 <StringSort+0x164>
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4878      	ldr	r0, [pc, #480]	; (800a4c8 <StringSort+0x2b4>)
 800a2e8:	f7fb fed6 	bl	8006098 <HAL_TIM_PWM_Start>
						}break;
 800a2ec:	e044      	b.n	800a378 <StringSort+0x164>
					case '2': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,PWM);
 800a2ee:	4b76      	ldr	r3, [pc, #472]	; (800a4c8 <StringSort+0x2b4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a74      	ldr	r2, [pc, #464]	; (800a4c4 <StringSort+0x2b0>)
 800a2f4:	6812      	ldr	r2, [r2, #0]
 800a2f6:	639a      	str	r2, [r3, #56]	; 0x38
						switch (State) {
 800a2f8:	4b70      	ldr	r3, [pc, #448]	; (800a4bc <StringSort+0x2a8>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b30      	cmp	r3, #48	; 0x30
 800a2fe:	d002      	beq.n	800a306 <StringSort+0xf2>
 800a300:	2b31      	cmp	r3, #49	; 0x31
 800a302:	d006      	beq.n	800a312 <StringSort+0xfe>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); break;
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
						} break;
 800a304:	e038      	b.n	800a378 <StringSort+0x164>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); break;
 800a306:	2104      	movs	r1, #4
 800a308:	486f      	ldr	r0, [pc, #444]	; (800a4c8 <StringSort+0x2b4>)
 800a30a:	f7fb ff11 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a30e:	bf00      	nop
						} break;
 800a310:	e032      	b.n	800a378 <StringSort+0x164>
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800a312:	2104      	movs	r1, #4
 800a314:	486c      	ldr	r0, [pc, #432]	; (800a4c8 <StringSort+0x2b4>)
 800a316:	f7fb febf 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a31a:	e02d      	b.n	800a378 <StringSort+0x164>
					case '3': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,PWM);
 800a31c:	4b6a      	ldr	r3, [pc, #424]	; (800a4c8 <StringSort+0x2b4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a68      	ldr	r2, [pc, #416]	; (800a4c4 <StringSort+0x2b0>)
 800a322:	6812      	ldr	r2, [r2, #0]
 800a324:	63da      	str	r2, [r3, #60]	; 0x3c
						switch (State) {
 800a326:	4b65      	ldr	r3, [pc, #404]	; (800a4bc <StringSort+0x2a8>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b30      	cmp	r3, #48	; 0x30
 800a32c:	d002      	beq.n	800a334 <StringSort+0x120>
 800a32e:	2b31      	cmp	r3, #49	; 0x31
 800a330:	d006      	beq.n	800a340 <StringSort+0x12c>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3); break;
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
						}break;
 800a332:	e021      	b.n	800a378 <StringSort+0x164>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3); break;
 800a334:	2108      	movs	r1, #8
 800a336:	4864      	ldr	r0, [pc, #400]	; (800a4c8 <StringSort+0x2b4>)
 800a338:	f7fb fefa 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a33c:	bf00      	nop
						}break;
 800a33e:	e01b      	b.n	800a378 <StringSort+0x164>
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800a340:	2108      	movs	r1, #8
 800a342:	4861      	ldr	r0, [pc, #388]	; (800a4c8 <StringSort+0x2b4>)
 800a344:	f7fb fea8 	bl	8006098 <HAL_TIM_PWM_Start>
						}break;
 800a348:	e016      	b.n	800a378 <StringSort+0x164>
					case '4': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,PWM);
 800a34a:	4b5f      	ldr	r3, [pc, #380]	; (800a4c8 <StringSort+0x2b4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a5d      	ldr	r2, [pc, #372]	; (800a4c4 <StringSort+0x2b0>)
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	641a      	str	r2, [r3, #64]	; 0x40
						switch (State) {
 800a354:	4b59      	ldr	r3, [pc, #356]	; (800a4bc <StringSort+0x2a8>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b30      	cmp	r3, #48	; 0x30
 800a35a:	d002      	beq.n	800a362 <StringSort+0x14e>
 800a35c:	2b31      	cmp	r3, #49	; 0x31
 800a35e:	d006      	beq.n	800a36e <StringSort+0x15a>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); break;
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
						} break;
 800a360:	e009      	b.n	800a376 <StringSort+0x162>
							case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); break;
 800a362:	210c      	movs	r1, #12
 800a364:	4858      	ldr	r0, [pc, #352]	; (800a4c8 <StringSort+0x2b4>)
 800a366:	f7fb fee3 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a36a:	bf00      	nop
						} break;
 800a36c:	e003      	b.n	800a376 <StringSort+0x162>
							case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800a36e:	210c      	movs	r1, #12
 800a370:	4855      	ldr	r0, [pc, #340]	; (800a4c8 <StringSort+0x2b4>)
 800a372:	f7fb fe91 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a376:	bf00      	nop
				} break;
 800a378:	e15f      	b.n	800a63a <StringSort+0x426>

			case '3':
				switch (Channel) {
 800a37a:	4b4f      	ldr	r3, [pc, #316]	; (800a4b8 <StringSort+0x2a4>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	3b31      	subs	r3, #49	; 0x31
 800a380:	2b03      	cmp	r3, #3
 800a382:	f200 815c 	bhi.w	800a63e <StringSort+0x42a>
 800a386:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <StringSort+0x178>)
 800a388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3cb 	.word	0x0800a3cb
 800a394:	0800a3f9 	.word	0x0800a3f9
 800a398:	0800a427 	.word	0x0800a427
					case '1': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 800a39c:	4b4b      	ldr	r3, [pc, #300]	; (800a4cc <StringSort+0x2b8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a48      	ldr	r2, [pc, #288]	; (800a4c4 <StringSort+0x2b0>)
 800a3a2:	6812      	ldr	r2, [r2, #0]
 800a3a4:	635a      	str	r2, [r3, #52]	; 0x34
						switch (State) {
 800a3a6:	4b45      	ldr	r3, [pc, #276]	; (800a4bc <StringSort+0x2a8>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b30      	cmp	r3, #48	; 0x30
 800a3ac:	d002      	beq.n	800a3b4 <StringSort+0x1a0>
 800a3ae:	2b31      	cmp	r3, #49	; 0x31
 800a3b0:	d006      	beq.n	800a3c0 <StringSort+0x1ac>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); break;
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
						} break;
 800a3b2:	e04f      	b.n	800a454 <StringSort+0x240>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); break;
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4845      	ldr	r0, [pc, #276]	; (800a4cc <StringSort+0x2b8>)
 800a3b8:	f7fb feba 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a3bc:	bf00      	nop
						} break;
 800a3be:	e049      	b.n	800a454 <StringSort+0x240>
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	4842      	ldr	r0, [pc, #264]	; (800a4cc <StringSort+0x2b8>)
 800a3c4:	f7fb fe68 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a3c8:	e044      	b.n	800a454 <StringSort+0x240>
					case '2': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,PWM);
 800a3ca:	4b40      	ldr	r3, [pc, #256]	; (800a4cc <StringSort+0x2b8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a3d      	ldr	r2, [pc, #244]	; (800a4c4 <StringSort+0x2b0>)
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
						switch (State) {
 800a3d4:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <StringSort+0x2a8>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b30      	cmp	r3, #48	; 0x30
 800a3da:	d002      	beq.n	800a3e2 <StringSort+0x1ce>
 800a3dc:	2b31      	cmp	r3, #49	; 0x31
 800a3de:	d006      	beq.n	800a3ee <StringSort+0x1da>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); break;
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
						} break;
 800a3e0:	e038      	b.n	800a454 <StringSort+0x240>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); break;
 800a3e2:	2104      	movs	r1, #4
 800a3e4:	4839      	ldr	r0, [pc, #228]	; (800a4cc <StringSort+0x2b8>)
 800a3e6:	f7fb fea3 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a3ea:	bf00      	nop
						} break;
 800a3ec:	e032      	b.n	800a454 <StringSort+0x240>
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800a3ee:	2104      	movs	r1, #4
 800a3f0:	4836      	ldr	r0, [pc, #216]	; (800a4cc <StringSort+0x2b8>)
 800a3f2:	f7fb fe51 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a3f6:	e02d      	b.n	800a454 <StringSort+0x240>
					case '3': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3,PWM);
 800a3f8:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <StringSort+0x2b8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a31      	ldr	r2, [pc, #196]	; (800a4c4 <StringSort+0x2b0>)
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	63da      	str	r2, [r3, #60]	; 0x3c
						switch (State) {
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <StringSort+0x2a8>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b30      	cmp	r3, #48	; 0x30
 800a408:	d002      	beq.n	800a410 <StringSort+0x1fc>
 800a40a:	2b31      	cmp	r3, #49	; 0x31
 800a40c:	d006      	beq.n	800a41c <StringSort+0x208>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); break;
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
						} break;
 800a40e:	e021      	b.n	800a454 <StringSort+0x240>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); break;
 800a410:	2108      	movs	r1, #8
 800a412:	482e      	ldr	r0, [pc, #184]	; (800a4cc <StringSort+0x2b8>)
 800a414:	f7fb fe8c 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a418:	bf00      	nop
						} break;
 800a41a:	e01b      	b.n	800a454 <StringSort+0x240>
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800a41c:	2108      	movs	r1, #8
 800a41e:	482b      	ldr	r0, [pc, #172]	; (800a4cc <StringSort+0x2b8>)
 800a420:	f7fb fe3a 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a424:	e016      	b.n	800a454 <StringSort+0x240>
					case '4': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4,PWM);
 800a426:	4b29      	ldr	r3, [pc, #164]	; (800a4cc <StringSort+0x2b8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a26      	ldr	r2, [pc, #152]	; (800a4c4 <StringSort+0x2b0>)
 800a42c:	6812      	ldr	r2, [r2, #0]
 800a42e:	641a      	str	r2, [r3, #64]	; 0x40
						switch (State) {
 800a430:	4b22      	ldr	r3, [pc, #136]	; (800a4bc <StringSort+0x2a8>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b30      	cmp	r3, #48	; 0x30
 800a436:	d002      	beq.n	800a43e <StringSort+0x22a>
 800a438:	2b31      	cmp	r3, #49	; 0x31
 800a43a:	d006      	beq.n	800a44a <StringSort+0x236>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4); break;
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
						} break;
 800a43c:	e009      	b.n	800a452 <StringSort+0x23e>
							case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4); break;
 800a43e:	210c      	movs	r1, #12
 800a440:	4822      	ldr	r0, [pc, #136]	; (800a4cc <StringSort+0x2b8>)
 800a442:	f7fb fe75 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a446:	bf00      	nop
						} break;
 800a448:	e003      	b.n	800a452 <StringSort+0x23e>
							case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800a44a:	210c      	movs	r1, #12
 800a44c:	481f      	ldr	r0, [pc, #124]	; (800a4cc <StringSort+0x2b8>)
 800a44e:	f7fb fe23 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a452:	bf00      	nop
				} break;
 800a454:	e0f3      	b.n	800a63e <StringSort+0x42a>

			case '4':
				switch (Channel) {
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <StringSort+0x2a4>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	3b31      	subs	r3, #49	; 0x31
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	f200 80f0 	bhi.w	800a642 <StringSort+0x42e>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <StringSort+0x254>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a479 	.word	0x0800a479
 800a46c:	0800a4d5 	.word	0x0800a4d5
 800a470:	0800a503 	.word	0x0800a503
 800a474:	0800a531 	.word	0x0800a531
					case '1': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1,PWM);
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <StringSort+0x2bc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <StringSort+0x2b0>)
 800a47e:	6812      	ldr	r2, [r2, #0]
 800a480:	635a      	str	r2, [r3, #52]	; 0x34
						switch (State) {
 800a482:	4b0e      	ldr	r3, [pc, #56]	; (800a4bc <StringSort+0x2a8>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b30      	cmp	r3, #48	; 0x30
 800a488:	d002      	beq.n	800a490 <StringSort+0x27c>
 800a48a:	2b31      	cmp	r3, #49	; 0x31
 800a48c:	d006      	beq.n	800a49c <StringSort+0x288>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); break;
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
						} break;
 800a48e:	e066      	b.n	800a55e <StringSort+0x34a>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); break;
 800a490:	2100      	movs	r1, #0
 800a492:	480f      	ldr	r0, [pc, #60]	; (800a4d0 <StringSort+0x2bc>)
 800a494:	f7fb fe4c 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a498:	bf00      	nop
						} break;
 800a49a:	e060      	b.n	800a55e <StringSort+0x34a>
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800a49c:	2100      	movs	r1, #0
 800a49e:	480c      	ldr	r0, [pc, #48]	; (800a4d0 <StringSort+0x2bc>)
 800a4a0:	f7fb fdfa 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a4a4:	e05b      	b.n	800a55e <StringSort+0x34a>
 800a4a6:	bf00      	nop
 800a4a8:	200009f8 	.word	0x200009f8
 800a4ac:	20000a60 	.word	0x20000a60
 800a4b0:	20000344 	.word	0x20000344
 800a4b4:	200007d1 	.word	0x200007d1
 800a4b8:	200007d0 	.word	0x200007d0
 800a4bc:	2000083c 	.word	0x2000083c
 800a4c0:	20000008 	.word	0x20000008
 800a4c4:	200009b0 	.word	0x200009b0
 800a4c8:	200009b4 	.word	0x200009b4
 800a4cc:	20000790 	.word	0x20000790
 800a4d0:	20000270 	.word	0x20000270
					case '2': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2,PWM);
 800a4d4:	4b68      	ldr	r3, [pc, #416]	; (800a678 <StringSort+0x464>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a68      	ldr	r2, [pc, #416]	; (800a67c <StringSort+0x468>)
 800a4da:	6812      	ldr	r2, [r2, #0]
 800a4dc:	639a      	str	r2, [r3, #56]	; 0x38
						switch (State) {
 800a4de:	4b68      	ldr	r3, [pc, #416]	; (800a680 <StringSort+0x46c>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b30      	cmp	r3, #48	; 0x30
 800a4e4:	d002      	beq.n	800a4ec <StringSort+0x2d8>
 800a4e6:	2b31      	cmp	r3, #49	; 0x31
 800a4e8:	d006      	beq.n	800a4f8 <StringSort+0x2e4>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2); break;
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
						} break;
 800a4ea:	e038      	b.n	800a55e <StringSort+0x34a>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2); break;
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	4862      	ldr	r0, [pc, #392]	; (800a678 <StringSort+0x464>)
 800a4f0:	f7fb fe1e 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a4f4:	bf00      	nop
						} break;
 800a4f6:	e032      	b.n	800a55e <StringSort+0x34a>
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800a4f8:	2104      	movs	r1, #4
 800a4fa:	485f      	ldr	r0, [pc, #380]	; (800a678 <StringSort+0x464>)
 800a4fc:	f7fb fdcc 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a500:	e02d      	b.n	800a55e <StringSort+0x34a>
					case '3': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,PWM);
 800a502:	4b5d      	ldr	r3, [pc, #372]	; (800a678 <StringSort+0x464>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a5d      	ldr	r2, [pc, #372]	; (800a67c <StringSort+0x468>)
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	63da      	str	r2, [r3, #60]	; 0x3c
						switch (State) {
 800a50c:	4b5c      	ldr	r3, [pc, #368]	; (800a680 <StringSort+0x46c>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b30      	cmp	r3, #48	; 0x30
 800a512:	d002      	beq.n	800a51a <StringSort+0x306>
 800a514:	2b31      	cmp	r3, #49	; 0x31
 800a516:	d006      	beq.n	800a526 <StringSort+0x312>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3); break;
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
						} break;
 800a518:	e021      	b.n	800a55e <StringSort+0x34a>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3); break;
 800a51a:	2108      	movs	r1, #8
 800a51c:	4856      	ldr	r0, [pc, #344]	; (800a678 <StringSort+0x464>)
 800a51e:	f7fb fe07 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a522:	bf00      	nop
						} break;
 800a524:	e01b      	b.n	800a55e <StringSort+0x34a>
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800a526:	2108      	movs	r1, #8
 800a528:	4853      	ldr	r0, [pc, #332]	; (800a678 <StringSort+0x464>)
 800a52a:	f7fb fdb5 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a52e:	e016      	b.n	800a55e <StringSort+0x34a>
					case '4': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4,PWM);
 800a530:	4b51      	ldr	r3, [pc, #324]	; (800a678 <StringSort+0x464>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a51      	ldr	r2, [pc, #324]	; (800a67c <StringSort+0x468>)
 800a536:	6812      	ldr	r2, [r2, #0]
 800a538:	641a      	str	r2, [r3, #64]	; 0x40
						switch (State) {
 800a53a:	4b51      	ldr	r3, [pc, #324]	; (800a680 <StringSort+0x46c>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b30      	cmp	r3, #48	; 0x30
 800a540:	d002      	beq.n	800a548 <StringSort+0x334>
 800a542:	2b31      	cmp	r3, #49	; 0x31
 800a544:	d006      	beq.n	800a554 <StringSort+0x340>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); break;
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
						} break;
 800a546:	e009      	b.n	800a55c <StringSort+0x348>
							case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); break;
 800a548:	210c      	movs	r1, #12
 800a54a:	484b      	ldr	r0, [pc, #300]	; (800a678 <StringSort+0x464>)
 800a54c:	f7fb fdf0 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a550:	bf00      	nop
						} break;
 800a552:	e003      	b.n	800a55c <StringSort+0x348>
							case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800a554:	210c      	movs	r1, #12
 800a556:	4848      	ldr	r0, [pc, #288]	; (800a678 <StringSort+0x464>)
 800a558:	f7fb fd9e 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a55c:	bf00      	nop
				} break;
 800a55e:	e070      	b.n	800a642 <StringSort+0x42e>

			case '5':
				switch (Channel) {
 800a560:	4b48      	ldr	r3, [pc, #288]	; (800a684 <StringSort+0x470>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	3b31      	subs	r3, #49	; 0x31
 800a566:	2b03      	cmp	r3, #3
 800a568:	d86d      	bhi.n	800a646 <StringSort+0x432>
 800a56a:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <StringSort+0x35c>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a581 	.word	0x0800a581
 800a574:	0800a5af 	.word	0x0800a5af
 800a578:	0800a5dd 	.word	0x0800a5dd
 800a57c:	0800a60b 	.word	0x0800a60b
					case '1': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1,PWM);
 800a580:	4b41      	ldr	r3, [pc, #260]	; (800a688 <StringSort+0x474>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a3d      	ldr	r2, [pc, #244]	; (800a67c <StringSort+0x468>)
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	635a      	str	r2, [r3, #52]	; 0x34
						switch (State) {
 800a58a:	4b3d      	ldr	r3, [pc, #244]	; (800a680 <StringSort+0x46c>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b30      	cmp	r3, #48	; 0x30
 800a590:	d002      	beq.n	800a598 <StringSort+0x384>
 800a592:	2b31      	cmp	r3, #49	; 0x31
 800a594:	d006      	beq.n	800a5a4 <StringSort+0x390>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1); break;
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
						}break;
 800a596:	e04f      	b.n	800a638 <StringSort+0x424>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1); break;
 800a598:	2100      	movs	r1, #0
 800a59a:	483b      	ldr	r0, [pc, #236]	; (800a688 <StringSort+0x474>)
 800a59c:	f7fb fdc8 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a5a0:	bf00      	nop
						}break;
 800a5a2:	e049      	b.n	800a638 <StringSort+0x424>
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4838      	ldr	r0, [pc, #224]	; (800a688 <StringSort+0x474>)
 800a5a8:	f7fb fd76 	bl	8006098 <HAL_TIM_PWM_Start>
						}break;
 800a5ac:	e044      	b.n	800a638 <StringSort+0x424>
					case '2': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2,PWM);
 800a5ae:	4b36      	ldr	r3, [pc, #216]	; (800a688 <StringSort+0x474>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a32      	ldr	r2, [pc, #200]	; (800a67c <StringSort+0x468>)
 800a5b4:	6812      	ldr	r2, [r2, #0]
 800a5b6:	639a      	str	r2, [r3, #56]	; 0x38
						switch (State) {
 800a5b8:	4b31      	ldr	r3, [pc, #196]	; (800a680 <StringSort+0x46c>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b30      	cmp	r3, #48	; 0x30
 800a5be:	d002      	beq.n	800a5c6 <StringSort+0x3b2>
 800a5c0:	2b31      	cmp	r3, #49	; 0x31
 800a5c2:	d006      	beq.n	800a5d2 <StringSort+0x3be>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2); break;
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
						} break;
 800a5c4:	e038      	b.n	800a638 <StringSort+0x424>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2); break;
 800a5c6:	2104      	movs	r1, #4
 800a5c8:	482f      	ldr	r0, [pc, #188]	; (800a688 <StringSort+0x474>)
 800a5ca:	f7fb fdb1 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a5ce:	bf00      	nop
						} break;
 800a5d0:	e032      	b.n	800a638 <StringSort+0x424>
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800a5d2:	2104      	movs	r1, #4
 800a5d4:	482c      	ldr	r0, [pc, #176]	; (800a688 <StringSort+0x474>)
 800a5d6:	f7fb fd5f 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a5da:	e02d      	b.n	800a638 <StringSort+0x424>
					case '3': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3,PWM);
 800a5dc:	4b2a      	ldr	r3, [pc, #168]	; (800a688 <StringSort+0x474>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a26      	ldr	r2, [pc, #152]	; (800a67c <StringSort+0x468>)
 800a5e2:	6812      	ldr	r2, [r2, #0]
 800a5e4:	63da      	str	r2, [r3, #60]	; 0x3c
						switch (State) {
 800a5e6:	4b26      	ldr	r3, [pc, #152]	; (800a680 <StringSort+0x46c>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b30      	cmp	r3, #48	; 0x30
 800a5ec:	d002      	beq.n	800a5f4 <StringSort+0x3e0>
 800a5ee:	2b31      	cmp	r3, #49	; 0x31
 800a5f0:	d006      	beq.n	800a600 <StringSort+0x3ec>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); break;
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
						} break;
 800a5f2:	e021      	b.n	800a638 <StringSort+0x424>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); break;
 800a5f4:	2108      	movs	r1, #8
 800a5f6:	4824      	ldr	r0, [pc, #144]	; (800a688 <StringSort+0x474>)
 800a5f8:	f7fb fd9a 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a5fc:	bf00      	nop
						} break;
 800a5fe:	e01b      	b.n	800a638 <StringSort+0x424>
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800a600:	2108      	movs	r1, #8
 800a602:	4821      	ldr	r0, [pc, #132]	; (800a688 <StringSort+0x474>)
 800a604:	f7fb fd48 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a608:	e016      	b.n	800a638 <StringSort+0x424>
					case '4': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4,PWM);
 800a60a:	4b1f      	ldr	r3, [pc, #124]	; (800a688 <StringSort+0x474>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <StringSort+0x468>)
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	641a      	str	r2, [r3, #64]	; 0x40
						switch (State) {
 800a614:	4b1a      	ldr	r3, [pc, #104]	; (800a680 <StringSort+0x46c>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b30      	cmp	r3, #48	; 0x30
 800a61a:	d002      	beq.n	800a622 <StringSort+0x40e>
 800a61c:	2b31      	cmp	r3, #49	; 0x31
 800a61e:	d006      	beq.n	800a62e <StringSort+0x41a>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4); break;
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
						} break;
 800a620:	e009      	b.n	800a636 <StringSort+0x422>
							case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4); break;
 800a622:	210c      	movs	r1, #12
 800a624:	4818      	ldr	r0, [pc, #96]	; (800a688 <StringSort+0x474>)
 800a626:	f7fb fd83 	bl	8006130 <HAL_TIM_PWM_Stop>
 800a62a:	bf00      	nop
						} break;
 800a62c:	e003      	b.n	800a636 <StringSort+0x422>
							case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800a62e:	210c      	movs	r1, #12
 800a630:	4815      	ldr	r0, [pc, #84]	; (800a688 <StringSort+0x474>)
 800a632:	f7fb fd31 	bl	8006098 <HAL_TIM_PWM_Start>
						} break;
 800a636:	bf00      	nop
				} break;
 800a638:	e005      	b.n	800a646 <StringSort+0x432>
				} break;
 800a63a:	bf00      	nop
 800a63c:	e004      	b.n	800a648 <StringSort+0x434>
				} break;
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <StringSort+0x434>
				} break;
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <StringSort+0x434>
				} break;
 800a646:	bf00      	nop
//				case '3': __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3,PWM);
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3); case '1': HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);}
//				case '4': __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_4,PWM);
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4); case '1': HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);}
//				}
			} break;
 800a648:	bf00      	nop
		}
	}
	for (i=0;i<100;i++) {Rx_String[i]=0;}
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <StringSort+0x478>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
 800a650:	e00b      	b.n	800a66a <StringSort+0x456>
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <StringSort+0x478>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <StringSort+0x47c>)
 800a65a:	2100      	movs	r1, #0
 800a65c:	5499      	strb	r1, [r3, r2]
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <StringSort+0x478>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	3301      	adds	r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <StringSort+0x478>)
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	4b08      	ldr	r3, [pc, #32]	; (800a68c <StringSort+0x478>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b63      	cmp	r3, #99	; 0x63
 800a670:	d9ef      	bls.n	800a652 <StringSort+0x43e>
}
 800a672:	bf00      	nop
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20000270 	.word	0x20000270
 800a67c:	200009b0 	.word	0x200009b0
 800a680:	2000083c 	.word	0x2000083c
 800a684:	200007d0 	.word	0x200007d0
 800a688:	20000750 	.word	0x20000750
 800a68c:	2000021c 	.word	0x2000021c
 800a690:	200009f8 	.word	0x200009f8

0800a694 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART3)  //current UART
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	; (800a718 <HAL_UART_RxCpltCallback+0x84>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d133      	bne.n	800a70e <HAL_UART_RxCpltCallback+0x7a>
	{
		if (Rx_index==0) {for (i=0;i<100;i++) {
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <HAL_UART_RxCpltCallback+0x88>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d110      	bne.n	800a6d0 <HAL_UART_RxCpltCallback+0x3c>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]
 800a6b2:	e00a      	b.n	800a6ca <HAL_UART_RxCpltCallback+0x36>
			Rx_Buffer[i]=0;   //clear Rx_Buffer before receiving new data
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4a1a      	ldr	r2, [pc, #104]	; (800a720 <HAL_UART_RxCpltCallback+0x8c>)
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	54d1      	strb	r1, [r2, r3]
			Rx_String[i]=0;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	4a19      	ldr	r2, [pc, #100]	; (800a724 <HAL_UART_RxCpltCallback+0x90>)
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	54d1      	strb	r1, [r2, r3]
		if (Rx_index==0) {for (i=0;i<100;i++) {
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	73fb      	strb	r3, [r7, #15]
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b63      	cmp	r3, #99	; 0x63
 800a6ce:	d9f1      	bls.n	800a6b4 <HAL_UART_RxCpltCallback+0x20>
		}}

		if (Rx_data[0]!=13) //if received data different from ascii 13 (enter)
 800a6d0:	4b15      	ldr	r3, [pc, #84]	; (800a728 <HAL_UART_RxCpltCallback+0x94>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b0d      	cmp	r3, #13
 800a6d6:	d00b      	beq.n	800a6f0 <HAL_UART_RxCpltCallback+0x5c>
		{
			Rx_Buffer[Rx_index++]=Rx_data[0];    //add data to Rx_Buffer
 800a6d8:	4b10      	ldr	r3, [pc, #64]	; (800a71c <HAL_UART_RxCpltCallback+0x88>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	b2d1      	uxtb	r1, r2
 800a6e0:	4a0e      	ldr	r2, [pc, #56]	; (800a71c <HAL_UART_RxCpltCallback+0x88>)
 800a6e2:	7011      	strb	r1, [r2, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <HAL_UART_RxCpltCallback+0x94>)
 800a6e8:	7819      	ldrb	r1, [r3, #0]
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <HAL_UART_RxCpltCallback+0x8c>)
 800a6ec:	5499      	strb	r1, [r3, r2]
 800a6ee:	e005      	b.n	800a6fc <HAL_UART_RxCpltCallback+0x68>
		}
		else            //if received data = 13
		{
			Rx_index=0;
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <HAL_UART_RxCpltCallback+0x88>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
			Transfer_cplt=1;//transfer complete, data is ready to read
 800a6f6:	4b0d      	ldr	r3, [pc, #52]	; (800a72c <HAL_UART_RxCpltCallback+0x98>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
		}

	HAL_UART_Receive_IT(&huart3, Rx_data, 1);   //activate UART receive interrupt every time
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	490a      	ldr	r1, [pc, #40]	; (800a728 <HAL_UART_RxCpltCallback+0x94>)
 800a700:	480b      	ldr	r0, [pc, #44]	; (800a730 <HAL_UART_RxCpltCallback+0x9c>)
 800a702:	f7fc ff69 	bl	80075d8 <HAL_UART_Receive_IT>
	strcpy (Rx_String, Rx_Buffer);
 800a706:	4906      	ldr	r1, [pc, #24]	; (800a720 <HAL_UART_RxCpltCallback+0x8c>)
 800a708:	4806      	ldr	r0, [pc, #24]	; (800a724 <HAL_UART_RxCpltCallback+0x90>)
 800a70a:	f000 fcd9 	bl	800b0c0 <strcpy>
//	Rx_Buffer[destination_size - 1] = '\0';
//	len=sprintf(buffer, "#Protection 1 not Alive\r\n");
//	HAL_UART_Transmit(&huart3, buffer, len, 1000);
	}

}
 800a70e:	bf00      	nop
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40004800 	.word	0x40004800
 800a71c:	20000748 	.word	0x20000748
 800a720:	2000094c 	.word	0x2000094c
 800a724:	200009f8 	.word	0x200009f8
 800a728:	2000074c 	.word	0x2000074c
 800a72c:	2000022c 	.word	0x2000022c
 800a730:	200002c4 	.word	0x200002c4

0800a734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a738:	bf00      	nop
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a74a:	4a0a      	ldr	r2, [pc, #40]	; (800a774 <HAL_MspInit+0x30>)
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <HAL_MspInit+0x30>)
 800a74e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a752:	f043 0302 	orr.w	r3, r3, #2
 800a756:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a75a:	4b06      	ldr	r3, [pc, #24]	; (800a774 <HAL_MspInit+0x30>)
 800a75c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	58024400 	.word	0x58024400

0800a778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08c      	sub	sp, #48	; 0x30
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a780:	f107 031c 	add.w	r3, r7, #28
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	609a      	str	r2, [r3, #8]
 800a78c:	60da      	str	r2, [r3, #12]
 800a78e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a37      	ldr	r2, [pc, #220]	; (800a874 <HAL_ADC_MspInit+0xfc>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d167      	bne.n	800a86a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a79a:	4a37      	ldr	r2, [pc, #220]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a79c:	4b36      	ldr	r3, [pc, #216]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a79e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a7a2:	f043 0320 	orr.w	r3, r3, #32
 800a7a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a7aa:	4b33      	ldr	r3, [pc, #204]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7b8:	4a2f      	ldr	r2, [pc, #188]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7ba:	4b2f      	ldr	r3, [pc, #188]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7c0:	f043 0301 	orr.w	r3, r3, #1
 800a7c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7c8:	4b2b      	ldr	r3, [pc, #172]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7d6:	4a28      	ldr	r2, [pc, #160]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7d8:	4b27      	ldr	r3, [pc, #156]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7de:	f043 0304 	orr.w	r3, r3, #4
 800a7e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7e6:	4b24      	ldr	r3, [pc, #144]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7f4:	4a20      	ldr	r2, [pc, #128]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7f6:	4b20      	ldr	r3, [pc, #128]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a7f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7fc:	f043 0302 	orr.w	r3, r3, #2
 800a800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a804:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <HAL_ADC_MspInit+0x100>)
 800a806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a812:	2340      	movs	r3, #64	; 0x40
 800a814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a816:	2303      	movs	r3, #3
 800a818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a81e:	f107 031c 	add.w	r3, r7, #28
 800a822:	4619      	mov	r1, r3
 800a824:	4815      	ldr	r0, [pc, #84]	; (800a87c <HAL_ADC_MspInit+0x104>)
 800a826:	f7f8 fe95 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a82a:	2310      	movs	r3, #16
 800a82c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a82e:	2303      	movs	r3, #3
 800a830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a832:	2300      	movs	r3, #0
 800a834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a836:	f107 031c 	add.w	r3, r7, #28
 800a83a:	4619      	mov	r1, r3
 800a83c:	4810      	ldr	r0, [pc, #64]	; (800a880 <HAL_ADC_MspInit+0x108>)
 800a83e:	f7f8 fe89 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a842:	2302      	movs	r3, #2
 800a844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a846:	2303      	movs	r3, #3
 800a848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a84e:	f107 031c 	add.w	r3, r7, #28
 800a852:	4619      	mov	r1, r3
 800a854:	480b      	ldr	r0, [pc, #44]	; (800a884 <HAL_ADC_MspInit+0x10c>)
 800a856:	f7f8 fe7d 	bl	8003554 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a85a:	2200      	movs	r2, #0
 800a85c:	2100      	movs	r1, #0
 800a85e:	2012      	movs	r0, #18
 800a860:	f7f7 fc51 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a864:	2012      	movs	r0, #18
 800a866:	f7f7 fc68 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a86a:	bf00      	nop
 800a86c:	3730      	adds	r7, #48	; 0x30
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40022000 	.word	0x40022000
 800a878:	58024400 	.word	0x58024400
 800a87c:	58020000 	.word	0x58020000
 800a880:	58020800 	.word	0x58020800
 800a884:	58020400 	.word	0x58020400

0800a888 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	; 0x28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a890:	f107 0314 	add.w	r3, r7, #20
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	605a      	str	r2, [r3, #4]
 800a89a:	609a      	str	r2, [r3, #8]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1c      	ldr	r2, [pc, #112]	; (800a918 <HAL_DAC_MspInit+0x90>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d131      	bne.n	800a90e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a8aa:	4a1c      	ldr	r2, [pc, #112]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8ac:	4b1b      	ldr	r3, [pc, #108]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a8ba:	4b18      	ldr	r3, [pc, #96]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8c8:	4a14      	ldr	r2, [pc, #80]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8ca:	4b14      	ldr	r3, [pc, #80]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8d0:	f043 0301 	orr.w	r3, r3, #1
 800a8d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8d8:	4b10      	ldr	r3, [pc, #64]	; (800a91c <HAL_DAC_MspInit+0x94>)
 800a8da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4809      	ldr	r0, [pc, #36]	; (800a920 <HAL_DAC_MspInit+0x98>)
 800a8fa:	f7f8 fe2b 	bl	8003554 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	2036      	movs	r0, #54	; 0x36
 800a904:	f7f7 fbff 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a908:	2036      	movs	r0, #54	; 0x36
 800a90a:	f7f7 fc16 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800a90e:	bf00      	nop
 800a910:	3728      	adds	r7, #40	; 0x28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40007400 	.word	0x40007400
 800a91c:	58024400 	.word	0x58024400
 800a920:	58020000 	.word	0x58020000

0800a924 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a92c:	f107 0314 	add.w	r3, r7, #20
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	605a      	str	r2, [r3, #4]
 800a936:	609a      	str	r2, [r3, #8]
 800a938:	60da      	str	r2, [r3, #12]
 800a93a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a26      	ldr	r2, [pc, #152]	; (800a9dc <HAL_FDCAN_MspInit+0xb8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d145      	bne.n	800a9d2 <HAL_FDCAN_MspInit+0xae>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800a946:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a948:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a94a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a94e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a952:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800a956:	4b22      	ldr	r3, [pc, #136]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a958:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a964:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a966:	4b1e      	ldr	r3, [pc, #120]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a96c:	f043 0308 	orr.w	r3, r3, #8
 800a970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a974:	4b1a      	ldr	r3, [pc, #104]	; (800a9e0 <HAL_FDCAN_MspInit+0xbc>)
 800a976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a982:	2303      	movs	r3, #3
 800a984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a986:	2302      	movs	r3, #2
 800a988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a98e:	2300      	movs	r3, #0
 800a990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800a992:	2309      	movs	r3, #9
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a996:	f107 0314 	add.w	r3, r7, #20
 800a99a:	4619      	mov	r1, r3
 800a99c:	4811      	ldr	r0, [pc, #68]	; (800a9e4 <HAL_FDCAN_MspInit+0xc0>)
 800a99e:	f7f8 fdd9 	bl	8003554 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	2013      	movs	r0, #19
 800a9a8:	f7f7 fbad 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800a9ac:	2013      	movs	r0, #19
 800a9ae:	f7f7 fbc4 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2015      	movs	r0, #21
 800a9b8:	f7f7 fba5 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800a9bc:	2015      	movs	r0, #21
 800a9be:	f7f7 fbbc 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	203f      	movs	r0, #63	; 0x3f
 800a9c8:	f7f7 fb9d 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800a9cc:	203f      	movs	r0, #63	; 0x3f
 800a9ce:	f7f7 fbb4 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800a9d2:	bf00      	nop
 800a9d4:	3728      	adds	r7, #40	; 0x28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	4000a000 	.word	0x4000a000
 800a9e0:	58024400 	.word	0x58024400
 800a9e4:	58020c00 	.word	0x58020c00

0800a9e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9f8:	d10f      	bne.n	800aa1a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a9fa:	4a47      	ldr	r2, [pc, #284]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800a9fc:	4b46      	ldr	r3, [pc, #280]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800a9fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aa0a:	4b43      	ldr	r3, [pc, #268]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	61fb      	str	r3, [r7, #28]
 800aa16:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800aa18:	e07a      	b.n	800ab10 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a3f      	ldr	r2, [pc, #252]	; (800ab1c <HAL_TIM_Base_MspInit+0x134>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d117      	bne.n	800aa54 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aa24:	4a3c      	ldr	r2, [pc, #240]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa26:	4b3c      	ldr	r3, [pc, #240]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aa34:	4b38      	ldr	r3, [pc, #224]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	61bb      	str	r3, [r7, #24]
 800aa40:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800aa42:	2200      	movs	r2, #0
 800aa44:	2100      	movs	r1, #0
 800aa46:	201d      	movs	r0, #29
 800aa48:	f7f7 fb5d 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800aa4c:	201d      	movs	r0, #29
 800aa4e:	f7f7 fb74 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 800aa52:	e05d      	b.n	800ab10 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a31      	ldr	r2, [pc, #196]	; (800ab20 <HAL_TIM_Base_MspInit+0x138>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d10f      	bne.n	800aa7e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800aa5e:	4a2e      	ldr	r2, [pc, #184]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa60:	4b2d      	ldr	r3, [pc, #180]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa66:	f043 0304 	orr.w	r3, r3, #4
 800aa6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aa6e:	4b2a      	ldr	r3, [pc, #168]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	697b      	ldr	r3, [r7, #20]
}
 800aa7c:	e048      	b.n	800ab10 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM5)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a28      	ldr	r2, [pc, #160]	; (800ab24 <HAL_TIM_Base_MspInit+0x13c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d10f      	bne.n	800aaa8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800aa88:	4a23      	ldr	r2, [pc, #140]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa8a:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa90:	f043 0308 	orr.w	r3, r3, #8
 800aa94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aa98:	4b1f      	ldr	r3, [pc, #124]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aa9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	613b      	str	r3, [r7, #16]
 800aaa4:	693b      	ldr	r3, [r7, #16]
}
 800aaa6:	e033      	b.n	800ab10 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM8)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a1e      	ldr	r2, [pc, #120]	; (800ab28 <HAL_TIM_Base_MspInit+0x140>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d12e      	bne.n	800ab10 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800aab2:	4a19      	ldr	r2, [pc, #100]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aab4:	4b18      	ldr	r3, [pc, #96]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aaba:	f043 0302 	orr.w	r3, r3, #2
 800aabe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800aac2:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <HAL_TIM_Base_MspInit+0x130>)
 800aac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800aad0:	2200      	movs	r2, #0
 800aad2:	2100      	movs	r1, #0
 800aad4:	202b      	movs	r0, #43	; 0x2b
 800aad6:	f7f7 fb16 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800aada:	202b      	movs	r0, #43	; 0x2b
 800aadc:	f7f7 fb2d 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800aae0:	2200      	movs	r2, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	202c      	movs	r0, #44	; 0x2c
 800aae6:	f7f7 fb0e 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800aaea:	202c      	movs	r0, #44	; 0x2c
 800aaec:	f7f7 fb25 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	202d      	movs	r0, #45	; 0x2d
 800aaf6:	f7f7 fb06 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800aafa:	202d      	movs	r0, #45	; 0x2d
 800aafc:	f7f7 fb1d 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	202e      	movs	r0, #46	; 0x2e
 800ab06:	f7f7 fafe 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800ab0a:	202e      	movs	r0, #46	; 0x2e
 800ab0c:	f7f7 fb15 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 800ab10:	bf00      	nop
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	40000400 	.word	0x40000400
 800ab20:	40000800 	.word	0x40000800
 800ab24:	40000c00 	.word	0x40000c00
 800ab28:	40010400 	.word	0x40010400

0800ab2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08c      	sub	sp, #48	; 0x30
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab34:	f107 031c 	add.w	r3, r7, #28
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	605a      	str	r2, [r3, #4]
 800ab3e:	609a      	str	r2, [r3, #8]
 800ab40:	60da      	str	r2, [r3, #12]
 800ab42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4c:	d120      	bne.n	800ab90 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab4e:	4a59      	ldr	r2, [pc, #356]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ab50:	4b58      	ldr	r3, [pc, #352]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ab52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab56:	f043 0302 	orr.w	r3, r3, #2
 800ab5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab5e:	4b55      	ldr	r3, [pc, #340]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ab60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Cabin1_Pin|Deck_Pin;
 800ab6c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800ab70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab72:	2302      	movs	r3, #2
 800ab74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab82:	f107 031c 	add.w	r3, r7, #28
 800ab86:	4619      	mov	r1, r3
 800ab88:	484b      	ldr	r0, [pc, #300]	; (800acb8 <HAL_TIM_MspPostInit+0x18c>)
 800ab8a:	f7f8 fce3 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800ab8e:	e08c      	b.n	800acaa <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a49      	ldr	r2, [pc, #292]	; (800acbc <HAL_TIM_MspPostInit+0x190>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d13e      	bne.n	800ac18 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab9a:	4a46      	ldr	r2, [pc, #280]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ab9c:	4b45      	ldr	r3, [pc, #276]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ab9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800abaa:	4b42      	ldr	r3, [pc, #264]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800abac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	617b      	str	r3, [r7, #20]
 800abb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abb8:	4a3e      	ldr	r2, [pc, #248]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800abba:	4b3e      	ldr	r3, [pc, #248]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800abbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abc0:	f043 0302 	orr.w	r3, r3, #2
 800abc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800abc8:	4b3a      	ldr	r3, [pc, #232]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800abca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Nav_Pin;
 800abd6:	2380      	movs	r3, #128	; 0x80
 800abd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abda:	2302      	movs	r3, #2
 800abdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abe2:	2300      	movs	r3, #0
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800abe6:	2302      	movs	r3, #2
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Nav_GPIO_Port, &GPIO_InitStruct);
 800abea:	f107 031c 	add.w	r3, r7, #28
 800abee:	4619      	mov	r1, r3
 800abf0:	4833      	ldr	r0, [pc, #204]	; (800acc0 <HAL_TIM_MspPostInit+0x194>)
 800abf2:	f7f8 fcaf 	bl	8003554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Cabin2_Pin;
 800abf6:	2310      	movs	r3, #16
 800abf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abfa:	2302      	movs	r3, #2
 800abfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac02:	2300      	movs	r3, #0
 800ac04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ac06:	2302      	movs	r3, #2
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Cabin2_GPIO_Port, &GPIO_InitStruct);
 800ac0a:	f107 031c 	add.w	r3, r7, #28
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4829      	ldr	r0, [pc, #164]	; (800acb8 <HAL_TIM_MspPostInit+0x18c>)
 800ac12:	f7f8 fc9f 	bl	8003554 <HAL_GPIO_Init>
}
 800ac16:	e048      	b.n	800acaa <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM4)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a29      	ldr	r2, [pc, #164]	; (800acc4 <HAL_TIM_MspPostInit+0x198>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d11f      	bne.n	800ac62 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac22:	4a24      	ldr	r2, [pc, #144]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac24:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac2a:	f043 0302 	orr.w	r3, r3, #2
 800ac2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac32:	4b20      	ldr	r3, [pc, #128]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Anchor_Pin;
 800ac40:	2340      	movs	r3, #64	; 0x40
 800ac42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac44:	2302      	movs	r3, #2
 800ac46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ac50:	2302      	movs	r3, #2
 800ac52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Anchor_GPIO_Port, &GPIO_InitStruct);
 800ac54:	f107 031c 	add.w	r3, r7, #28
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4817      	ldr	r0, [pc, #92]	; (800acb8 <HAL_TIM_MspPostInit+0x18c>)
 800ac5c:	f7f8 fc7a 	bl	8003554 <HAL_GPIO_Init>
}
 800ac60:	e023      	b.n	800acaa <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <HAL_TIM_MspPostInit+0x19c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d11e      	bne.n	800acaa <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac6c:	4a11      	ldr	r2, [pc, #68]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac74:	f043 0301 	orr.w	r3, r3, #1
 800ac78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <HAL_TIM_MspPostInit+0x188>)
 800ac7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	60bb      	str	r3, [r7, #8]
 800ac88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Ride_Pin;
 800ac8a:	2304      	movs	r3, #4
 800ac8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac8e:	2302      	movs	r3, #2
 800ac90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac96:	2300      	movs	r3, #0
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Ride_GPIO_Port, &GPIO_InitStruct);
 800ac9e:	f107 031c 	add.w	r3, r7, #28
 800aca2:	4619      	mov	r1, r3
 800aca4:	4809      	ldr	r0, [pc, #36]	; (800accc <HAL_TIM_MspPostInit+0x1a0>)
 800aca6:	f7f8 fc55 	bl	8003554 <HAL_GPIO_Init>
}
 800acaa:	bf00      	nop
 800acac:	3730      	adds	r7, #48	; 0x30
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	58020400 	.word	0x58020400
 800acbc:	40000400 	.word	0x40000400
 800acc0:	58020800 	.word	0x58020800
 800acc4:	40000800 	.word	0x40000800
 800acc8:	40000c00 	.word	0x40000c00
 800accc:	58020000 	.word	0x58020000

0800acd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acd8:	f107 0314 	add.w	r3, r7, #20
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	605a      	str	r2, [r3, #4]
 800ace2:	609a      	str	r2, [r3, #8]
 800ace4:	60da      	str	r2, [r3, #12]
 800ace6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <HAL_UART_MspInit+0x98>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d136      	bne.n	800ad60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800acf2:	4a1e      	ldr	r2, [pc, #120]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800acf4:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800acf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800acfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ad02:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800ad04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad0c:	613b      	str	r3, [r7, #16]
 800ad0e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad10:	4a16      	ldr	r2, [pc, #88]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800ad14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad18:	f043 0308 	orr.w	r3, r3, #8
 800ad1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad20:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <HAL_UART_MspInit+0x9c>)
 800ad22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad26:	f003 0308 	and.w	r3, r3, #8
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800ad2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad34:	2302      	movs	r3, #2
 800ad36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ad40:	2307      	movs	r3, #7
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ad44:	f107 0314 	add.w	r3, r7, #20
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4809      	ldr	r0, [pc, #36]	; (800ad70 <HAL_UART_MspInit+0xa0>)
 800ad4c:	f7f8 fc02 	bl	8003554 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	2027      	movs	r0, #39	; 0x27
 800ad56:	f7f7 f9d6 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ad5a:	2027      	movs	r0, #39	; 0x27
 800ad5c:	f7f7 f9ed 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ad60:	bf00      	nop
 800ad62:	3728      	adds	r7, #40	; 0x28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	40004800 	.word	0x40004800
 800ad6c:	58024400 	.word	0x58024400
 800ad70:	58020c00 	.word	0x58020c00

0800ad74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad7c:	f107 0314 	add.w	r3, r7, #20
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	609a      	str	r2, [r3, #8]
 800ad88:	60da      	str	r2, [r3, #12]
 800ad8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a21      	ldr	r2, [pc, #132]	; (800ae18 <HAL_PCD_MspInit+0xa4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d13b      	bne.n	800ae0e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad96:	4a21      	ldr	r2, [pc, #132]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800ad9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800ada8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 800adb4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800adb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adba:	2302      	movs	r3, #2
 800adbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adc2:	2300      	movs	r3, #0
 800adc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800adc6:	230a      	movs	r3, #10
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adca:	f107 0314 	add.w	r3, r7, #20
 800adce:	4619      	mov	r1, r3
 800add0:	4813      	ldr	r0, [pc, #76]	; (800ae20 <HAL_PCD_MspInit+0xac>)
 800add2:	f7f8 fbbf 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800add6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800addc:	2300      	movs	r3, #0
 800adde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ade4:	f107 0314 	add.w	r3, r7, #20
 800ade8:	4619      	mov	r1, r3
 800adea:	480d      	ldr	r0, [pc, #52]	; (800ae20 <HAL_PCD_MspInit+0xac>)
 800adec:	f7f8 fbb2 	bl	8003554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adf0:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800adf2:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800adf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800adf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <HAL_PCD_MspInit+0xa8>)
 800ae02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ae06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800ae0e:	bf00      	nop
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40080000 	.word	0x40080000
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	58020000 	.word	0x58020000

0800ae24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae32:	b480      	push	{r7}
 800ae34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae36:	e7fe      	b.n	800ae36 <HardFault_Handler+0x4>

0800ae38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae3c:	e7fe      	b.n	800ae3c <MemManage_Handler+0x4>

0800ae3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae42:	e7fe      	b.n	800ae42 <BusFault_Handler+0x4>

0800ae44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae48:	e7fe      	b.n	800ae48 <UsageFault_Handler+0x4>

0800ae4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae4e:	bf00      	nop
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ae66:	b480      	push	{r7}
 800ae68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ae6a:	bf00      	nop
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ae78:	f7f5 fbf8 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae7c:	bf00      	nop
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ae84:	4802      	ldr	r0, [pc, #8]	; (800ae90 <ADC_IRQHandler+0x10>)
 800ae86:	f7f5 ffab 	bl	8000de0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ae8a:	bf00      	nop
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200007d8 	.word	0x200007d8

0800ae94 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800ae98:	4802      	ldr	r0, [pc, #8]	; (800aea4 <FDCAN1_IT0_IRQHandler+0x10>)
 800ae9a:	f7f7 fdbb 	bl	8002a14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800ae9e:	bf00      	nop
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	200008b0 	.word	0x200008b0

0800aea8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800aeac:	4802      	ldr	r0, [pc, #8]	; (800aeb8 <FDCAN1_IT1_IRQHandler+0x10>)
 800aeae:	f7f7 fdb1 	bl	8002a14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800aeb2:	bf00      	nop
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	200008b0 	.word	0x200008b0

0800aebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800aec0:	4802      	ldr	r0, [pc, #8]	; (800aecc <TIM3_IRQHandler+0x10>)
 800aec2:	f7fb f9a5 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800aec6:	bf00      	nop
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	20000790 	.word	0x20000790

0800aed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800aed4:	4802      	ldr	r0, [pc, #8]	; (800aee0 <USART3_IRQHandler+0x10>)
 800aed6:	f7fc fc1f 	bl	8007718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800aeda:	bf00      	nop
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	200002c4 	.word	0x200002c4

0800aee4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800aee8:	4802      	ldr	r0, [pc, #8]	; (800aef4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800aeea:	f7fb f991 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000230 	.word	0x20000230

0800aef8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800aefc:	4802      	ldr	r0, [pc, #8]	; (800af08 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800aefe:	f7fb f987 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800af02:	bf00      	nop
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000230 	.word	0x20000230

0800af0c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af10:	4802      	ldr	r0, [pc, #8]	; (800af1c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800af12:	f7fb f97d 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800af16:	bf00      	nop
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000230 	.word	0x20000230

0800af20 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af24:	4802      	ldr	r0, [pc, #8]	; (800af30 <TIM8_CC_IRQHandler+0x10>)
 800af26:	f7fb f973 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000230 	.word	0x20000230

0800af34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800af38:	4802      	ldr	r0, [pc, #8]	; (800af44 <TIM6_DAC_IRQHandler+0x10>)
 800af3a:	f7f7 f986 	bl	800224a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800af3e:	bf00      	nop
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200002b0 	.word	0x200002b0

0800af48 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800af4c:	4802      	ldr	r0, [pc, #8]	; (800af58 <FDCAN_CAL_IRQHandler+0x10>)
 800af4e:	f7f7 fd61 	bl	8002a14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 800af52:	bf00      	nop
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	200008b0 	.word	0x200008b0

0800af5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af60:	4a26      	ldr	r2, [pc, #152]	; (800affc <SystemInit+0xa0>)
 800af62:	4b26      	ldr	r3, [pc, #152]	; (800affc <SystemInit+0xa0>)
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800af70:	4a23      	ldr	r2, [pc, #140]	; (800b000 <SystemInit+0xa4>)
 800af72:	4b23      	ldr	r3, [pc, #140]	; (800b000 <SystemInit+0xa4>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800af7c:	4b20      	ldr	r3, [pc, #128]	; (800b000 <SystemInit+0xa4>)
 800af7e:	2200      	movs	r2, #0
 800af80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800af82:	491f      	ldr	r1, [pc, #124]	; (800b000 <SystemInit+0xa4>)
 800af84:	4b1e      	ldr	r3, [pc, #120]	; (800b000 <SystemInit+0xa4>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <SystemInit+0xa8>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800af8e:	4b1c      	ldr	r3, [pc, #112]	; (800b000 <SystemInit+0xa4>)
 800af90:	2200      	movs	r2, #0
 800af92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800af94:	4b1a      	ldr	r3, [pc, #104]	; (800b000 <SystemInit+0xa4>)
 800af96:	2200      	movs	r2, #0
 800af98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800af9a:	4b19      	ldr	r3, [pc, #100]	; (800b000 <SystemInit+0xa4>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800afa0:	4b17      	ldr	r3, [pc, #92]	; (800b000 <SystemInit+0xa4>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800afa6:	4b16      	ldr	r3, [pc, #88]	; (800b000 <SystemInit+0xa4>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800afac:	4b14      	ldr	r3, [pc, #80]	; (800b000 <SystemInit+0xa4>)
 800afae:	2200      	movs	r2, #0
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800afb2:	4b13      	ldr	r3, [pc, #76]	; (800b000 <SystemInit+0xa4>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800afb8:	4b11      	ldr	r3, [pc, #68]	; (800b000 <SystemInit+0xa4>)
 800afba:	2200      	movs	r2, #0
 800afbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <SystemInit+0xa4>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <SystemInit+0xa4>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <SystemInit+0xa4>)
 800afcc:	2200      	movs	r2, #0
 800afce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800afd0:	4a0b      	ldr	r2, [pc, #44]	; (800b000 <SystemInit+0xa4>)
 800afd2:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <SystemInit+0xa4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800afdc:	4b08      	ldr	r3, [pc, #32]	; (800b000 <SystemInit+0xa4>)
 800afde:	2200      	movs	r2, #0
 800afe0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 800afe2:	4b09      	ldr	r3, [pc, #36]	; (800b008 <SystemInit+0xac>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <SystemInit+0xa0>)
 800afea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800afee:	609a      	str	r2, [r3, #8]
#endif

}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	e000ed00 	.word	0xe000ed00
 800b000:	58024400 	.word	0x58024400
 800b004:	eaf6ed7f 	.word	0xeaf6ed7f
 800b008:	51008108 	.word	0x51008108

0800b00c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b00c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b044 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b010:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b012:	e003      	b.n	800b01c <LoopCopyDataInit>

0800b014 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b014:	4b0c      	ldr	r3, [pc, #48]	; (800b048 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b016:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b018:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b01a:	3104      	adds	r1, #4

0800b01c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b01c:	480b      	ldr	r0, [pc, #44]	; (800b04c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b020:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b022:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b024:	d3f6      	bcc.n	800b014 <CopyDataInit>
  ldr  r2, =_sbss
 800b026:	4a0b      	ldr	r2, [pc, #44]	; (800b054 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b028:	e002      	b.n	800b030 <LoopFillZerobss>

0800b02a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b02a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b02c:	f842 3b04 	str.w	r3, [r2], #4

0800b030 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b030:	4b09      	ldr	r3, [pc, #36]	; (800b058 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b032:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b034:	d3f9      	bcc.n	800b02a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b036:	f7ff ff91 	bl	800af5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b03a:	f000 f815 	bl	800b068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b03e:	f7fe fa47 	bl	80094d0 <main>
  bx  lr    
 800b042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b044:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b048:	0800b3e0 	.word	0x0800b3e0
  ldr  r0, =_sdata
 800b04c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b050:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800b054:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800b058:	20000a68 	.word	0x20000a68

0800b05c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b05c:	e7fe      	b.n	800b05c <ADC3_IRQHandler>

0800b05e <atoi>:
 800b05e:	220a      	movs	r2, #10
 800b060:	2100      	movs	r1, #0
 800b062:	f000 b8b5 	b.w	800b1d0 <strtol>
	...

0800b068 <__libc_init_array>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	4e0d      	ldr	r6, [pc, #52]	; (800b0a0 <__libc_init_array+0x38>)
 800b06c:	4c0d      	ldr	r4, [pc, #52]	; (800b0a4 <__libc_init_array+0x3c>)
 800b06e:	1ba4      	subs	r4, r4, r6
 800b070:	10a4      	asrs	r4, r4, #2
 800b072:	2500      	movs	r5, #0
 800b074:	42a5      	cmp	r5, r4
 800b076:	d109      	bne.n	800b08c <__libc_init_array+0x24>
 800b078:	4e0b      	ldr	r6, [pc, #44]	; (800b0a8 <__libc_init_array+0x40>)
 800b07a:	4c0c      	ldr	r4, [pc, #48]	; (800b0ac <__libc_init_array+0x44>)
 800b07c:	f000 f8e0 	bl	800b240 <_init>
 800b080:	1ba4      	subs	r4, r4, r6
 800b082:	10a4      	asrs	r4, r4, #2
 800b084:	2500      	movs	r5, #0
 800b086:	42a5      	cmp	r5, r4
 800b088:	d105      	bne.n	800b096 <__libc_init_array+0x2e>
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b090:	4798      	blx	r3
 800b092:	3501      	adds	r5, #1
 800b094:	e7ee      	b.n	800b074 <__libc_init_array+0xc>
 800b096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b09a:	4798      	blx	r3
 800b09c:	3501      	adds	r5, #1
 800b09e:	e7f2      	b.n	800b086 <__libc_init_array+0x1e>
 800b0a0:	0800b3d8 	.word	0x0800b3d8
 800b0a4:	0800b3d8 	.word	0x0800b3d8
 800b0a8:	0800b3d8 	.word	0x0800b3d8
 800b0ac:	0800b3dc 	.word	0x0800b3dc

0800b0b0 <memset>:
 800b0b0:	4402      	add	r2, r0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d100      	bne.n	800b0ba <memset+0xa>
 800b0b8:	4770      	bx	lr
 800b0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b0be:	e7f9      	b.n	800b0b4 <memset+0x4>

0800b0c0 <strcpy>:
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0c6:	f803 2b01 	strb.w	r2, [r3], #1
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	d1f9      	bne.n	800b0c2 <strcpy+0x2>
 800b0ce:	4770      	bx	lr

0800b0d0 <_strtol_l.isra.0>:
 800b0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	4689      	mov	r9, r1
 800b0d8:	4692      	mov	sl, r2
 800b0da:	461f      	mov	r7, r3
 800b0dc:	468b      	mov	fp, r1
 800b0de:	465d      	mov	r5, fp
 800b0e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0e6:	f000 f889 	bl	800b1fc <__locale_ctype_ptr_l>
 800b0ea:	4420      	add	r0, r4
 800b0ec:	7846      	ldrb	r6, [r0, #1]
 800b0ee:	f016 0608 	ands.w	r6, r6, #8
 800b0f2:	d10b      	bne.n	800b10c <_strtol_l.isra.0+0x3c>
 800b0f4:	2c2d      	cmp	r4, #45	; 0x2d
 800b0f6:	d10b      	bne.n	800b110 <_strtol_l.isra.0+0x40>
 800b0f8:	782c      	ldrb	r4, [r5, #0]
 800b0fa:	2601      	movs	r6, #1
 800b0fc:	f10b 0502 	add.w	r5, fp, #2
 800b100:	b167      	cbz	r7, 800b11c <_strtol_l.isra.0+0x4c>
 800b102:	2f10      	cmp	r7, #16
 800b104:	d114      	bne.n	800b130 <_strtol_l.isra.0+0x60>
 800b106:	2c30      	cmp	r4, #48	; 0x30
 800b108:	d00a      	beq.n	800b120 <_strtol_l.isra.0+0x50>
 800b10a:	e011      	b.n	800b130 <_strtol_l.isra.0+0x60>
 800b10c:	46ab      	mov	fp, r5
 800b10e:	e7e6      	b.n	800b0de <_strtol_l.isra.0+0xe>
 800b110:	2c2b      	cmp	r4, #43	; 0x2b
 800b112:	bf04      	itt	eq
 800b114:	782c      	ldrbeq	r4, [r5, #0]
 800b116:	f10b 0502 	addeq.w	r5, fp, #2
 800b11a:	e7f1      	b.n	800b100 <_strtol_l.isra.0+0x30>
 800b11c:	2c30      	cmp	r4, #48	; 0x30
 800b11e:	d127      	bne.n	800b170 <_strtol_l.isra.0+0xa0>
 800b120:	782b      	ldrb	r3, [r5, #0]
 800b122:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b126:	2b58      	cmp	r3, #88	; 0x58
 800b128:	d14b      	bne.n	800b1c2 <_strtol_l.isra.0+0xf2>
 800b12a:	786c      	ldrb	r4, [r5, #1]
 800b12c:	2710      	movs	r7, #16
 800b12e:	3502      	adds	r5, #2
 800b130:	2e00      	cmp	r6, #0
 800b132:	bf0c      	ite	eq
 800b134:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b138:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b13c:	2200      	movs	r2, #0
 800b13e:	fbb1 fef7 	udiv	lr, r1, r7
 800b142:	4610      	mov	r0, r2
 800b144:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b148:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b14c:	2b09      	cmp	r3, #9
 800b14e:	d811      	bhi.n	800b174 <_strtol_l.isra.0+0xa4>
 800b150:	461c      	mov	r4, r3
 800b152:	42a7      	cmp	r7, r4
 800b154:	dd1d      	ble.n	800b192 <_strtol_l.isra.0+0xc2>
 800b156:	1c53      	adds	r3, r2, #1
 800b158:	d007      	beq.n	800b16a <_strtol_l.isra.0+0x9a>
 800b15a:	4586      	cmp	lr, r0
 800b15c:	d316      	bcc.n	800b18c <_strtol_l.isra.0+0xbc>
 800b15e:	d101      	bne.n	800b164 <_strtol_l.isra.0+0x94>
 800b160:	45a4      	cmp	ip, r4
 800b162:	db13      	blt.n	800b18c <_strtol_l.isra.0+0xbc>
 800b164:	fb00 4007 	mla	r0, r0, r7, r4
 800b168:	2201      	movs	r2, #1
 800b16a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b16e:	e7eb      	b.n	800b148 <_strtol_l.isra.0+0x78>
 800b170:	270a      	movs	r7, #10
 800b172:	e7dd      	b.n	800b130 <_strtol_l.isra.0+0x60>
 800b174:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b178:	2b19      	cmp	r3, #25
 800b17a:	d801      	bhi.n	800b180 <_strtol_l.isra.0+0xb0>
 800b17c:	3c37      	subs	r4, #55	; 0x37
 800b17e:	e7e8      	b.n	800b152 <_strtol_l.isra.0+0x82>
 800b180:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b184:	2b19      	cmp	r3, #25
 800b186:	d804      	bhi.n	800b192 <_strtol_l.isra.0+0xc2>
 800b188:	3c57      	subs	r4, #87	; 0x57
 800b18a:	e7e2      	b.n	800b152 <_strtol_l.isra.0+0x82>
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e7eb      	b.n	800b16a <_strtol_l.isra.0+0x9a>
 800b192:	1c53      	adds	r3, r2, #1
 800b194:	d108      	bne.n	800b1a8 <_strtol_l.isra.0+0xd8>
 800b196:	2322      	movs	r3, #34	; 0x22
 800b198:	f8c8 3000 	str.w	r3, [r8]
 800b19c:	4608      	mov	r0, r1
 800b19e:	f1ba 0f00 	cmp.w	sl, #0
 800b1a2:	d107      	bne.n	800b1b4 <_strtol_l.isra.0+0xe4>
 800b1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a8:	b106      	cbz	r6, 800b1ac <_strtol_l.isra.0+0xdc>
 800b1aa:	4240      	negs	r0, r0
 800b1ac:	f1ba 0f00 	cmp.w	sl, #0
 800b1b0:	d00c      	beq.n	800b1cc <_strtol_l.isra.0+0xfc>
 800b1b2:	b122      	cbz	r2, 800b1be <_strtol_l.isra.0+0xee>
 800b1b4:	3d01      	subs	r5, #1
 800b1b6:	f8ca 5000 	str.w	r5, [sl]
 800b1ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1be:	464d      	mov	r5, r9
 800b1c0:	e7f9      	b.n	800b1b6 <_strtol_l.isra.0+0xe6>
 800b1c2:	2430      	movs	r4, #48	; 0x30
 800b1c4:	2f00      	cmp	r7, #0
 800b1c6:	d1b3      	bne.n	800b130 <_strtol_l.isra.0+0x60>
 800b1c8:	2708      	movs	r7, #8
 800b1ca:	e7b1      	b.n	800b130 <_strtol_l.isra.0+0x60>
 800b1cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1d0 <strtol>:
 800b1d0:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <strtol+0x24>)
 800b1d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d4:	681c      	ldr	r4, [r3, #0]
 800b1d6:	4d08      	ldr	r5, [pc, #32]	; (800b1f8 <strtol+0x28>)
 800b1d8:	6a23      	ldr	r3, [r4, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bf08      	it	eq
 800b1de:	462b      	moveq	r3, r5
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	460a      	mov	r2, r1
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f7ff ff71 	bl	800b0d0 <_strtol_l.isra.0>
 800b1ee:	b003      	add	sp, #12
 800b1f0:	bd30      	pop	{r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000028 	.word	0x20000028
 800b1f8:	2000008c 	.word	0x2000008c

0800b1fc <__locale_ctype_ptr_l>:
 800b1fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b200:	4770      	bx	lr

0800b202 <__ascii_mbtowc>:
 800b202:	b082      	sub	sp, #8
 800b204:	b901      	cbnz	r1, 800b208 <__ascii_mbtowc+0x6>
 800b206:	a901      	add	r1, sp, #4
 800b208:	b142      	cbz	r2, 800b21c <__ascii_mbtowc+0x1a>
 800b20a:	b14b      	cbz	r3, 800b220 <__ascii_mbtowc+0x1e>
 800b20c:	7813      	ldrb	r3, [r2, #0]
 800b20e:	600b      	str	r3, [r1, #0]
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	1c10      	adds	r0, r2, #0
 800b214:	bf18      	it	ne
 800b216:	2001      	movne	r0, #1
 800b218:	b002      	add	sp, #8
 800b21a:	4770      	bx	lr
 800b21c:	4610      	mov	r0, r2
 800b21e:	e7fb      	b.n	800b218 <__ascii_mbtowc+0x16>
 800b220:	f06f 0001 	mvn.w	r0, #1
 800b224:	e7f8      	b.n	800b218 <__ascii_mbtowc+0x16>

0800b226 <__ascii_wctomb>:
 800b226:	b149      	cbz	r1, 800b23c <__ascii_wctomb+0x16>
 800b228:	2aff      	cmp	r2, #255	; 0xff
 800b22a:	bf85      	ittet	hi
 800b22c:	238a      	movhi	r3, #138	; 0x8a
 800b22e:	6003      	strhi	r3, [r0, #0]
 800b230:	700a      	strbls	r2, [r1, #0]
 800b232:	f04f 30ff 	movhi.w	r0, #4294967295
 800b236:	bf98      	it	ls
 800b238:	2001      	movls	r0, #1
 800b23a:	4770      	bx	lr
 800b23c:	4608      	mov	r0, r1
 800b23e:	4770      	bx	lr

0800b240 <_init>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

0800b24c <_fini>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr
