
H7_Boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddf0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800e090  0800e090  0001e090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e430  0800e430  0001e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e438  0800e438  0001e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e43c  0800e43c  0001e43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  0800e440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000924  20000210  0800e650  00020210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b34  0800e650  00020b34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 10 .debug_info   000240d0  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038cd  00000000  00000000  0004430e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014e0  00000000  00000000  00047be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001388  00000000  00000000  000490c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000adca  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007bab  00000000  00000000  00055212  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005cdbd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006a90  00000000  00000000  0005ce3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  000638cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00063968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000210 	.word	0x20000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e078 	.word	0x0800e078

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000214 	.word	0x20000214
 80002dc:	0800e078 	.word	0x0800e078

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b97a 	b.w	800069c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	468c      	mov	ip, r1
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	9e08      	ldr	r6, [sp, #32]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d151      	bne.n	8000474 <__udivmoddi4+0xb4>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d96d      	bls.n	80004b2 <__udivmoddi4+0xf2>
 80003d6:	fab2 fe82 	clz	lr, r2
 80003da:	f1be 0f00 	cmp.w	lr, #0
 80003de:	d00b      	beq.n	80003f8 <__udivmoddi4+0x38>
 80003e0:	f1ce 0c20 	rsb	ip, lr, #32
 80003e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003fc:	0c25      	lsrs	r5, r4, #16
 80003fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000402:	fa1f f987 	uxth.w	r9, r7
 8000406:	fb0a cc18 	mls	ip, sl, r8, ip
 800040a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800040e:	fb08 f309 	mul.w	r3, r8, r9
 8000412:	42ab      	cmp	r3, r5
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x6c>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f108 32ff 	add.w	r2, r8, #4294967295
 800041c:	f080 8123 	bcs.w	8000666 <__udivmoddi4+0x2a6>
 8000420:	42ab      	cmp	r3, r5
 8000422:	f240 8120 	bls.w	8000666 <__udivmoddi4+0x2a6>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aed      	subs	r5, r5, r3
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb5 f0fa 	udiv	r0, r5, sl
 8000434:	fb0a 5510 	mls	r5, sl, r0, r5
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb00 f909 	mul.w	r9, r0, r9
 8000440:	45a1      	cmp	r9, r4
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x98>
 8000444:	19e4      	adds	r4, r4, r7
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	f080 810a 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8107 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 0409 	sub.w	r4, r4, r9
 800045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000460:	2100      	movs	r1, #0
 8000462:	2e00      	cmp	r6, #0
 8000464:	d061      	beq.n	800052a <__udivmoddi4+0x16a>
 8000466:	fa24 f40e 	lsr.w	r4, r4, lr
 800046a:	2300      	movs	r3, #0
 800046c:	6034      	str	r4, [r6, #0]
 800046e:	6073      	str	r3, [r6, #4]
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0xc8>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d054      	beq.n	8000526 <__udivmoddi4+0x166>
 800047c:	2100      	movs	r1, #0
 800047e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000482:	4608      	mov	r0, r1
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	fab3 f183 	clz	r1, r3
 800048c:	2900      	cmp	r1, #0
 800048e:	f040 808e 	bne.w	80005ae <__udivmoddi4+0x1ee>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xdc>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80fa 	bhi.w	8000690 <__udivmoddi4+0x2d0>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb65 0503 	sbc.w	r5, r5, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	46ac      	mov	ip, r5
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d03f      	beq.n	800052a <__udivmoddi4+0x16a>
 80004aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	b912      	cbnz	r2, 80004ba <__udivmoddi4+0xfa>
 80004b4:	2701      	movs	r7, #1
 80004b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004ba:	fab7 fe87 	clz	lr, r7
 80004be:	f1be 0f00 	cmp.w	lr, #0
 80004c2:	d134      	bne.n	800052e <__udivmoddi4+0x16e>
 80004c4:	1beb      	subs	r3, r5, r7
 80004c6:	0c3a      	lsrs	r2, r7, #16
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80004d2:	0c25      	lsrs	r5, r4, #16
 80004d4:	fb02 3318 	mls	r3, r2, r8, r3
 80004d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004dc:	fb0c f308 	mul.w	r3, ip, r8
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x134>
 80004e4:	19ed      	adds	r5, r5, r7
 80004e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x132>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	f200 80d1 	bhi.w	8000694 <__udivmoddi4+0x2d4>
 80004f2:	4680      	mov	r8, r0
 80004f4:	1aed      	subs	r5, r5, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000500:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000504:	fb0c fc00 	mul.w	ip, ip, r0
 8000508:	45a4      	cmp	ip, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x15c>
 800050c:	19e4      	adds	r4, r4, r7
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x15a>
 8000514:	45a4      	cmp	ip, r4
 8000516:	f200 80b8 	bhi.w	800068a <__udivmoddi4+0x2ca>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 040c 	sub.w	r4, r4, ip
 8000520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000524:	e79d      	b.n	8000462 <__udivmoddi4+0xa2>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	f1ce 0420 	rsb	r4, lr, #32
 8000532:	fa05 f30e 	lsl.w	r3, r5, lr
 8000536:	fa07 f70e 	lsl.w	r7, r7, lr
 800053a:	fa20 f804 	lsr.w	r8, r0, r4
 800053e:	0c3a      	lsrs	r2, r7, #16
 8000540:	fa25 f404 	lsr.w	r4, r5, r4
 8000544:	ea48 0803 	orr.w	r8, r8, r3
 8000548:	fbb4 f1f2 	udiv	r1, r4, r2
 800054c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000550:	fb02 4411 	mls	r4, r2, r1, r4
 8000554:	fa1f fc87 	uxth.w	ip, r7
 8000558:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800055c:	fb01 f30c 	mul.w	r3, r1, ip
 8000560:	42ab      	cmp	r3, r5
 8000562:	fa00 f40e 	lsl.w	r4, r0, lr
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x1bc>
 8000568:	19ed      	adds	r5, r5, r7
 800056a:	f101 30ff 	add.w	r0, r1, #4294967295
 800056e:	f080 808a 	bcs.w	8000686 <__udivmoddi4+0x2c6>
 8000572:	42ab      	cmp	r3, r5
 8000574:	f240 8087 	bls.w	8000686 <__udivmoddi4+0x2c6>
 8000578:	3902      	subs	r1, #2
 800057a:	443d      	add	r5, r7
 800057c:	1aeb      	subs	r3, r5, r3
 800057e:	fa1f f588 	uxth.w	r5, r8
 8000582:	fbb3 f0f2 	udiv	r0, r3, r2
 8000586:	fb02 3310 	mls	r3, r2, r0, r3
 800058a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058e:	fb00 f30c 	mul.w	r3, r0, ip
 8000592:	42ab      	cmp	r3, r5
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x1e6>
 8000596:	19ed      	adds	r5, r5, r7
 8000598:	f100 38ff 	add.w	r8, r0, #4294967295
 800059c:	d26f      	bcs.n	800067e <__udivmoddi4+0x2be>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d96d      	bls.n	800067e <__udivmoddi4+0x2be>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	1aeb      	subs	r3, r5, r3
 80005a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ac:	e78f      	b.n	80004ce <__udivmoddi4+0x10e>
 80005ae:	f1c1 0720 	rsb	r7, r1, #32
 80005b2:	fa22 f807 	lsr.w	r8, r2, r7
 80005b6:	408b      	lsls	r3, r1
 80005b8:	fa05 f401 	lsl.w	r4, r5, r1
 80005bc:	ea48 0303 	orr.w	r3, r8, r3
 80005c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80005d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005da:	fa1f f883 	uxth.w	r8, r3
 80005de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005e2:	fb09 f408 	mul.w	r4, r9, r8
 80005e6:	42ac      	cmp	r4, r5
 80005e8:	fa02 f201 	lsl.w	r2, r2, r1
 80005ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x244>
 80005f2:	18ed      	adds	r5, r5, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	d243      	bcs.n	8000682 <__udivmoddi4+0x2c2>
 80005fa:	42ac      	cmp	r4, r5
 80005fc:	d941      	bls.n	8000682 <__udivmoddi4+0x2c2>
 80005fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000602:	441d      	add	r5, r3
 8000604:	1b2d      	subs	r5, r5, r4
 8000606:	fa1f fe8e 	uxth.w	lr, lr
 800060a:	fbb5 f0fc 	udiv	r0, r5, ip
 800060e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000612:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000616:	fb00 f808 	mul.w	r8, r0, r8
 800061a:	45a0      	cmp	r8, r4
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x26e>
 800061e:	18e4      	adds	r4, r4, r3
 8000620:	f100 35ff 	add.w	r5, r0, #4294967295
 8000624:	d229      	bcs.n	800067a <__udivmoddi4+0x2ba>
 8000626:	45a0      	cmp	r8, r4
 8000628:	d927      	bls.n	800067a <__udivmoddi4+0x2ba>
 800062a:	3802      	subs	r0, #2
 800062c:	441c      	add	r4, r3
 800062e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000632:	eba4 0408 	sub.w	r4, r4, r8
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	454c      	cmp	r4, r9
 800063c:	46c6      	mov	lr, r8
 800063e:	464d      	mov	r5, r9
 8000640:	d315      	bcc.n	800066e <__udivmoddi4+0x2ae>
 8000642:	d012      	beq.n	800066a <__udivmoddi4+0x2aa>
 8000644:	b156      	cbz	r6, 800065c <__udivmoddi4+0x29c>
 8000646:	ebba 030e 	subs.w	r3, sl, lr
 800064a:	eb64 0405 	sbc.w	r4, r4, r5
 800064e:	fa04 f707 	lsl.w	r7, r4, r7
 8000652:	40cb      	lsrs	r3, r1
 8000654:	431f      	orrs	r7, r3
 8000656:	40cc      	lsrs	r4, r1
 8000658:	6037      	str	r7, [r6, #0]
 800065a:	6074      	str	r4, [r6, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4618      	mov	r0, r3
 8000664:	e6f8      	b.n	8000458 <__udivmoddi4+0x98>
 8000666:	4690      	mov	r8, r2
 8000668:	e6e0      	b.n	800042c <__udivmoddi4+0x6c>
 800066a:	45c2      	cmp	sl, r8
 800066c:	d2ea      	bcs.n	8000644 <__udivmoddi4+0x284>
 800066e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000672:	eb69 0503 	sbc.w	r5, r9, r3
 8000676:	3801      	subs	r0, #1
 8000678:	e7e4      	b.n	8000644 <__udivmoddi4+0x284>
 800067a:	4628      	mov	r0, r5
 800067c:	e7d7      	b.n	800062e <__udivmoddi4+0x26e>
 800067e:	4640      	mov	r0, r8
 8000680:	e791      	b.n	80005a6 <__udivmoddi4+0x1e6>
 8000682:	4681      	mov	r9, r0
 8000684:	e7be      	b.n	8000604 <__udivmoddi4+0x244>
 8000686:	4601      	mov	r1, r0
 8000688:	e778      	b.n	800057c <__udivmoddi4+0x1bc>
 800068a:	3802      	subs	r0, #2
 800068c:	443c      	add	r4, r7
 800068e:	e745      	b.n	800051c <__udivmoddi4+0x15c>
 8000690:	4608      	mov	r0, r1
 8000692:	e708      	b.n	80004a6 <__udivmoddi4+0xe6>
 8000694:	f1a8 0802 	sub.w	r8, r8, #2
 8000698:	443d      	add	r5, r7
 800069a:	e72b      	b.n	80004f4 <__udivmoddi4+0x134>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f001 fd7f 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f80a 	bl	80006c4 <HAL_InitTick>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e002      	b.n	80006c0 <HAL_Init+0x20>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006ba:	f009 fc7d 	bl	8009fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x54>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x58>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fd93 	bl	800220e <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00e      	b.n	8000710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d80a      	bhi.n	800070e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f8:	2200      	movs	r2, #0
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f001 fd5d 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_InitTick+0x5c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000034 	.word	0x20000034
 800071c:	20000004 	.word	0x20000004
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x20>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x24>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_IncTick+0x24>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000004 	.word	0x20000004
 8000748:	2000022c 	.word	0x2000022c

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	2000022c 	.word	0x2000022c

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff ffee 	bl	800074c <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_Delay+0x40>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffde 	bl	800074c <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad2      	subs	r2, r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3f7      	bcc.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __IO uint32_t wait_loop_index = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e20e      	b.n	8000be6 <HAL_ADC_Init+0x43e>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.BoostMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d109      	bne.n	80007ea <HAL_ADC_Init+0x42>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f009 fc08 	bl	8009fec <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <HAL_ADC_Init+0x60>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	6892      	ldr	r2, [r2, #8]
 8000802:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000806:	609a      	str	r2, [r3, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d119      	bne.n	800084a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	6812      	ldr	r2, [r2, #0]
 800081e:	6892      	ldr	r2, [r2, #8]
 8000820:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000824:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000826:	4b67      	ldr	r3, [pc, #412]	; (80009c4 <HAL_ADC_Init+0x21c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a67      	ldr	r2, [pc, #412]	; (80009c8 <HAL_ADC_Init+0x220>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	0cda      	lsrs	r2, r3, #19
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800083c:	e002      	b.n	8000844 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3b01      	subs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f9      	bne.n	800083e <HAL_ADC_Init+0x96>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10e      	bne.n	8000876 <HAL_ADC_Init+0xce>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800085c:	f043 0210 	orr.w	r2, r3, #16
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f043 0201 	orr.w	r2, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 81a6 	bne.w	8000bd0 <HAL_ADC_Init+0x428>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 819e 	bne.w	8000bd0 <HAL_ADC_Init+0x428>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000898:	f043 0202 	orr.w	r2, r3, #2
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a49      	ldr	r2, [pc, #292]	; (80009cc <HAL_ADC_Init+0x224>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d004      	beq.n	80008b4 <HAL_ADC_Init+0x10c>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a48      	ldr	r2, [pc, #288]	; (80009d0 <HAL_ADC_Init+0x228>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d102      	bne.n	80008ba <HAL_ADC_Init+0x112>
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <HAL_ADC_Init+0x22c>)
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
 80008b8:	e001      	b.n	80008be <HAL_ADC_Init+0x116>
    }
    else
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <HAL_ADC_Init+0x230>)
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d108      	bne.n	80008de <HAL_ADC_Init+0x136>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d101      	bne.n	80008de <HAL_ADC_Init+0x136>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <HAL_ADC_Init+0x138>
 80008de:	2300      	movs	r3, #0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f040 808e 	bne.w	8000a02 <HAL_ADC_Init+0x25a>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a38      	ldr	r2, [pc, #224]	; (80009cc <HAL_ADC_Init+0x224>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d120      	bne.n	8000932 <HAL_ADC_Init+0x18a>
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <HAL_ADC_Init+0x228>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <HAL_ADC_Init+0x160>
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <HAL_ADC_Init+0x228>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b01      	cmp	r3, #1
 8000906:	d00b      	beq.n	8000920 <HAL_ADC_Init+0x178>
 8000908:	4b34      	ldr	r3, [pc, #208]	; (80009dc <HAL_ADC_Init+0x234>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <HAL_ADC_Init+0x17c>
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <HAL_ADC_Init+0x234>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d101      	bne.n	8000924 <HAL_ADC_Init+0x17c>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <HAL_ADC_Init+0x17e>
 8000924:	2300      	movs	r3, #0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf0c      	ite	eq
 800092a:	2301      	moveq	r3, #1
 800092c:	2300      	movne	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	e05c      	b.n	80009ec <HAL_ADC_Init+0x244>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <HAL_ADC_Init+0x228>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d120      	bne.n	800097e <HAL_ADC_Init+0x1d6>
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <HAL_ADC_Init+0x224>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <HAL_ADC_Init+0x1ac>
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_ADC_Init+0x224>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b01      	cmp	r3, #1
 8000952:	d00b      	beq.n	800096c <HAL_ADC_Init+0x1c4>
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <HAL_ADC_Init+0x234>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b01      	cmp	r3, #1
 800095e:	d107      	bne.n	8000970 <HAL_ADC_Init+0x1c8>
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_ADC_Init+0x234>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_ADC_Init+0x1c8>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <HAL_ADC_Init+0x1ca>
 8000970:	2300      	movs	r3, #0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d120      	bne.n	80009be <HAL_ADC_Init+0x216>
 800097c:	e013      	b.n	80009a6 <HAL_ADC_Init+0x1fe>
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_ADC_Init+0x224>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d107      	bne.n	800099a <HAL_ADC_Init+0x1f2>
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_ADC_Init+0x224>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b01      	cmp	r3, #1
 8000994:	d101      	bne.n	800099a <HAL_ADC_Init+0x1f2>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_ADC_Init+0x1f4>
 800099a:	2300      	movs	r3, #0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10b      	bne.n	80009be <HAL_ADC_Init+0x216>
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_ADC_Init+0x228>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d116      	bne.n	80009e0 <HAL_ADC_Init+0x238>
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_ADC_Init+0x228>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d110      	bne.n	80009e0 <HAL_ADC_Init+0x238>
 80009be:	2301      	movs	r3, #1
 80009c0:	e00f      	b.n	80009e2 <HAL_ADC_Init+0x23a>
 80009c2:	bf00      	nop
 80009c4:	20000034 	.word	0x20000034
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	40022000 	.word	0x40022000
 80009d0:	40022100 	.word	0x40022100
 80009d4:	40022300 	.word	0x40022300
 80009d8:	58026300 	.word	0x58026300
 80009dc:	58026000 	.word	0x58026000
 80009e0:	2300      	movs	r3, #0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf0c      	ite	eq
 80009e6:	2301      	moveq	r3, #1
 80009e8:	2300      	movne	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <HAL_ADC_Init+0x25a>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 80009f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a00:	609a      	str	r2, [r3, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7d5b      	ldrb	r3, [r3, #21]
 8000a06:	461a      	mov	r2, r3
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	fa93 f3a3 	rbit	r3, r3
 8000a14:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	461a      	mov	r2, r3
                 hadc->Init.Overrun                                          |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000a26:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                       |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.Overrun                                          |
 8000a2c:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	7f12      	ldrb	r2, [r2, #28]
 8000a32:	4611      	mov	r1, r2
 8000a34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a3c:	fa92 f2a2 	rbit	r2, r2
 8000a40:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	fab2 f282 	clz	r2, r2
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7f1b      	ldrb	r3, [r3, #28]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d111      	bne.n	8000a7c <HAL_ADC_Init+0x2d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa93 f3a3 	rbit	r3, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fab3 f383 	clz	r3, r3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d00b      	beq.n	8000a9c <HAL_ADC_Init+0x2f4>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d007      	beq.n	8000a9c <HAL_ADC_Init+0x2f4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	4313      	orrs	r3, r2
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68d9      	ldr	r1, [r3, #12]
 8000aa6:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <HAL_ADC_Init+0x448>)
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aac:	430b      	orrs	r3, r1
 8000aae:	60d3      	str	r3, [r2, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d166      	bne.n	8000b8c <HAL_ADC_Init+0x3e4>
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7d1b      	ldrb	r3, [r3, #20]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa93 f3a3 	rbit	r3, r3
 8000ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	461a      	mov	r2, r3
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68d9      	ldr	r1, [r3, #12]
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <HAL_ADC_Init+0x44c>)
 8000af2:	400b      	ands	r3, r1
 8000af4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000af6:	430b      	orrs	r3, r1
 8000af8:	60d3      	str	r3, [r2, #12]


      if (hadc->Init.OversamplingMode == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d11a      	bne.n	8000b3a <HAL_ADC_Init+0x392>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	2b01      	cmp	r3, #1
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Leftt bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6919      	ldr	r1, [r3, #16]
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <HAL_ADC_Init+0x450>)
 8000b16:	400b      	ands	r3, r1
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b1c:	0408      	lsls	r0, r1, #16
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b22:	4308      	orrs	r0, r1
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000b28:	4308      	orrs	r0, r1
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000b2e:	4301      	orrs	r1, r0
 8000b30:	430b      	orrs	r3, r1
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6113      	str	r3, [r2, #16]
 8000b38:	e007      	b.n	8000b4a <HAL_ADC_Init+0x3a2>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	6912      	ldr	r2, [r2, #16]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	6912      	ldr	r2, [r2, #16]
 8000b54:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d108      	bne.n	8000b7c <HAL_ADC_Init+0x3d4>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	6892      	ldr	r2, [r2, #8]
 8000b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	e007      	b.n	8000b8c <HAL_ADC_Init+0x3e4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	6892      	ldr	r2, [r2, #8]
 8000b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b8a:	609a      	str	r2, [r3, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10c      	bne.n	8000bae <HAL_ADC_Init+0x406>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b9e:	f022 010f 	bic.w	r1, r2, #15
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	6992      	ldr	r2, [r2, #24]
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
 8000bac:	e007      	b.n	8000bbe <HAL_ADC_Init+0x416>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bb8:	f022 020f 	bic.w	r2, r2, #15
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc2:	f023 0303 	bic.w	r3, r3, #3
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	655a      	str	r2, [r3, #84]	; 0x54
 8000bce:	e008      	b.n	8000be2 <HAL_ADC_Init+0x43a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd4:	f043 0210 	orr.w	r2, r3, #16
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */


  /* Return function status */
  return tmp_hal_status;
 8000be2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3738      	adds	r7, #56	; 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	fff0c003 	.word	0xfff0c003
 8000bf4:	ffffbffc 	.word	0xffffbffc
 8000bf8:	fc00f81e 	.word	0xfc00f81e

08000bfc <HAL_ADC_Start_IT>:
  *         before calling HAL_ADC_Start_IT().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8121 	bne.w	8000e5a <HAL_ADC_Start_IT+0x25e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d101      	bne.n	8000c26 <HAL_ADC_Start_IT+0x2a>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e11c      	b.n	8000e60 <HAL_ADC_Start_IT+0x264>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f001 f88a 	bl	8001d48 <ADC_Enable>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8108 	bne.w	8000e50 <HAL_ADC_Start_IT+0x254>
    {
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_ADC_Start_IT+0x5e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	f023 0206 	bic.w	r2, r3, #6
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	659a      	str	r2, [r3, #88]	; 0x58
 8000c58:	e002      	b.n	8000c60 <HAL_ADC_Start_IT+0x64>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	659a      	str	r2, [r3, #88]	; 0x58
      }
      /* Clear HAL_ADC_STATE_READY and regular conversion results bits, set HAL_ADC_STATE_REG_BUSY bit */
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000c64:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <HAL_ADC_Start_IT+0x26c>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - by default if ADC is Master or Independent or if multimode feature is not available
        - if MultiMode setting is set to independent mode (no dual regular or injected conversions are configured) */
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a7d      	ldr	r2, [pc, #500]	; (8000e6c <HAL_ADC_Start_IT+0x270>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00a      	beq.n	8000c90 <HAL_ADC_Start_IT+0x94>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a7c      	ldr	r2, [pc, #496]	; (8000e70 <HAL_ADC_Start_IT+0x274>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d005      	beq.n	8000c90 <HAL_ADC_Start_IT+0x94>
 8000c84:	4b7b      	ldr	r3, [pc, #492]	; (8000e74 <HAL_ADC_Start_IT+0x278>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 031f 	and.w	r3, r3, #31
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d105      	bne.n	8000c9c <HAL_ADC_Start_IT+0xa0>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	221c      	movs	r2, #28
 8000ca2:	601a      	str	r2, [r3, #0]

      /* By default, disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6852      	ldr	r2, [r2, #4]
 8000cae:	f022 021c 	bic.w	r2, r2, #28
 8000cb2:	605a      	str	r2, [r3, #4]

      /* Enable required interruptions */
      switch(hadc->Init.EOCSelection)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d108      	bne.n	8000cce <HAL_ADC_Start_IT+0xd2>
      {
        case ADC_EOC_SEQ_CONV:
           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	6852      	ldr	r2, [r2, #4]
 8000cc6:	f042 0208 	orr.w	r2, r2, #8
 8000cca:	605a      	str	r2, [r3, #4]
          break;
 8000ccc:	e008      	b.n	8000ce0 <HAL_ADC_Start_IT+0xe4>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	6852      	ldr	r2, [r2, #4]
 8000cd8:	f042 0204 	orr.w	r2, r2, #4
 8000cdc:	605a      	str	r2, [r3, #4]
          break;
 8000cde:	bf00      	nop
      }

      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <HAL_ADC_Start_IT+0xfc>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	6852      	ldr	r2, [r2, #4]
 8000cf2:	f042 0210 	orr.w	r2, r2, #16
 8000cf6:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)   )
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a5b      	ldr	r2, [pc, #364]	; (8000e6c <HAL_ADC_Start_IT+0x270>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d016      	beq.n	8000d30 <HAL_ADC_Start_IT+0x134>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a5c      	ldr	r2, [pc, #368]	; (8000e78 <HAL_ADC_Start_IT+0x27c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d011      	beq.n	8000d30 <HAL_ADC_Start_IT+0x134>
 8000d0c:	4b59      	ldr	r3, [pc, #356]	; (8000e74 <HAL_ADC_Start_IT+0x278>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <HAL_ADC_Start_IT+0x134>
 8000d18:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <HAL_ADC_Start_IT+0x278>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 031f 	and.w	r3, r3, #31
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d005      	beq.n	8000d30 <HAL_ADC_Start_IT+0x134>
 8000d24:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <HAL_ADC_Start_IT+0x278>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	2b09      	cmp	r3, #9
 8000d2e:	d141      	bne.n	8000db4 <HAL_ADC_Start_IT+0x1b8>
      {
        /* Multimode feature is not available or ADC Instance is Independent or Master,
           or is not Slave ADC with dual regular conversions enabled.
           Then set HAL_ADC_STATE_INJ_BUSY and reset HAL_ADC_STATE_INJ_EOC if JAUTO is set. */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d02d      	beq.n	8000d9a <HAL_ADC_Start_IT+0x19e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch(hadc->Init.EOCSelection)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d110      	bne.n	8000d78 <HAL_ADC_Start_IT+0x17c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	6852      	ldr	r2, [r2, #4]
 8000d60:	f022 0220 	bic.w	r2, r2, #32
 8000d64:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	6852      	ldr	r2, [r2, #4]
 8000d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d74:	605a      	str	r2, [r3, #4]
              break;
 8000d76:	e010      	b.n	8000d9a <HAL_ADC_Start_IT+0x19e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	6852      	ldr	r2, [r2, #4]
 8000d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d86:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	6852      	ldr	r2, [r2, #4]
 8000d92:	f042 0220 	orr.w	r2, r2, #32
 8000d96:	605a      	str	r2, [r3, #4]
              break;
 8000d98:	bf00      	nop
          }
        } /*  if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET) */
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        /* Start ADC */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	6892      	ldr	r2, [r2, #8]
 8000dac:	f042 0204 	orr.w	r2, r2, #4
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	e054      	b.n	8000e5e <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* hadc is the handle of a Slave ADC with dual regular conversions
           enabled. Therefore, ADC_CR_ADSTART is NOT set */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_ADC_Start_IT+0x270>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d004      	beq.n	8000dd4 <HAL_ADC_Start_IT+0x1d8>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <HAL_ADC_Start_IT+0x27c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d102      	bne.n	8000dda <HAL_ADC_Start_IT+0x1de>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	e000      	b.n	8000ddc <HAL_ADC_Start_IT+0x1e0>
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_ADC_Start_IT+0x270>)
 8000ddc:	60bb      	str	r3, [r7, #8]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d02d      	beq.n	8000e46 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch(hadc->Init.EOCSelection)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d110      	bne.n	8000e24 <HAL_ADC_Start_IT+0x228>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	6852      	ldr	r2, [r2, #4]
 8000e0c:	f022 0220 	bic.w	r2, r2, #32
 8000e10:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	6852      	ldr	r2, [r2, #4]
 8000e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e20:	605a      	str	r2, [r3, #4]
              break;
 8000e22:	e010      	b.n	8000e46 <HAL_ADC_Start_IT+0x24a>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6852      	ldr	r2, [r2, #4]
 8000e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e32:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	6852      	ldr	r2, [r2, #4]
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	605a      	str	r2, [r3, #4]
              break;
 8000e44:	bf00      	nop
          }
        }  /* if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET) */
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e4e:	e006      	b.n	8000e5e <HAL_ADC_Start_IT+0x262>
      } /*  if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)   ) */
    }  /*  if (tmp_hal_status == HAL_OK) */
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e58:	e001      	b.n	8000e5e <HAL_ADC_Start_IT+0x262>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return tmp_hal_status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	fffff0fe 	.word	0xfffff0fe
 8000e6c:	40022000 	.word	0x40022000
 8000e70:	40022100 	.word	0x40022100
 8000e74:	40022300 	.word	0x40022300
 8000e78:	58026000 	.word	0x58026000

08000e7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0; /* flag set if overrun occurrence has to be considered as an error */
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_TypeDef        *tmpADC_Master;
  uint32_t tmp_isr      = hadc->Instance->ISR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ier      = hadc->Instance->IER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr     = 0x0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_cfgr_jqm = 0x0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));


  /* ====== Check End of Sampling flag for regular group ===== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d017      	beq.n	8000ef6 <HAL_ADC_IRQHandler+0x5e>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d012      	beq.n	8000ef6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* End Of Sampling callback */
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 ffbb 	bl	8001e64 <HAL_ADCEx_EndOfSamplingCallback>

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check End of Conversion or Sequence flags for regular group ===== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_IRQHandler+0x72>
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10b      	bne.n	8000f22 <HAL_ADC_IRQHandler+0x8a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 808d 	beq.w	8001030 <HAL_ADC_IRQHandler+0x198>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 8087 	beq.w	8001030 <HAL_ADC_IRQHandler+0x198>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d105      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xa2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d16c      	bne.n	8001022 <HAL_ADC_IRQHandler+0x18a>
    {
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a7e      	ldr	r2, [pc, #504]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d016      	beq.n	8000f80 <HAL_ADC_IRQHandler+0xe8>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a7d      	ldr	r2, [pc, #500]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d011      	beq.n	8000f80 <HAL_ADC_IRQHandler+0xe8>
 8000f5c:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_ADC_IRQHandler+0xe8>
 8000f68:	4b79      	ldr	r3, [pc, #484]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d005      	beq.n	8000f80 <HAL_ADC_IRQHandler+0xe8>
 8000f74:	4b76      	ldr	r3, [pc, #472]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d104      	bne.n	8000f8a <HAL_ADC_IRQHandler+0xf2>
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	e011      	b.n	8000fae <HAL_ADC_IRQHandler+0x116>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6e      	ldr	r2, [pc, #440]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_IRQHandler+0x106>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a6c      	ldr	r2, [pc, #432]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x10c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	e000      	b.n	8000fa6 <HAL_ADC_IRQHandler+0x10e>
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 8000fa6:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61fb      	str	r3, [r7, #28]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d134      	bne.n	8001022 <HAL_ADC_IRQHandler+0x18a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d12d      	bne.n	8001022 <HAL_ADC_IRQHandler+0x18a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11a      	bne.n	800100a <HAL_ADC_IRQHandler+0x172>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: if Overrun interrupt was enabled with EOC or EOS interrupt */
            /* in HAL_Start_IT(), it isn't disabled here because it can be used */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	6852      	ldr	r2, [r2, #4]
 8000fde:	f022 020c 	bic.w	r2, r2, #12
 8000fe2:	605a      	str	r2, [r3, #4]
            /* Clear HAL_ADC_STATE_REG_BUSY bit */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
            /* If no injected conversion on-going, set HAL_ADC_STATE_READY bit */
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d112      	bne.n	8001022 <HAL_ADC_IRQHandler+0x18a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	655a      	str	r2, [r3, #84]	; 0x54
 8001008:	e00b      	b.n	8001022 <HAL_ADC_IRQHandler+0x18a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	f043 0210 	orr.w	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note:  HAL_ADC_ConvCpltCallback can resort to
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) or
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
    HAL_ADC_ConvCpltCallback(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f007 fb2a 	bl	800867c <HAL_ADC_ConvCpltCallback>


    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	220c      	movs	r2, #12
 800102e:	601a      	str	r2, [r3, #0]
  }


  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <HAL_ADC_IRQHandler+0x1ac>
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10b      	bne.n	800105c <HAL_ADC_IRQHandler+0x1c4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80d5 	beq.w	80011fa <HAL_ADC_IRQHandler+0x362>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80cf 	beq.w	80011fa <HAL_ADC_IRQHandler+0x362>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	655a      	str	r2, [r3, #84]	; 0x54
        - injected conversions are software-triggered when injected queue management is disabled
        OR
        - auto-injection is enabled, continuous mode is disabled (CONT = 0)
          and regular conversions are software-triggered */
          /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	2b40      	cmp	r3, #64	; 0x40
 8001080:	f040 80b4 	bne.w	80011ec <HAL_ADC_IRQHandler+0x354>
    {

      /* First, retrieve proper registers to check */
      /* 1a. Are injected conversions that of a dual Slave ? */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEINJECTED_SLAVE(hadc))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d016      	beq.n	80010bc <HAL_ADC_IRQHandler+0x224>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2e      	ldr	r2, [pc, #184]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d011      	beq.n	80010bc <HAL_ADC_IRQHandler+0x224>
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_ADC_IRQHandler+0x224>
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d005      	beq.n	80010bc <HAL_ADC_IRQHandler+0x224>
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d104      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x22e>
      {
        /* hadc is not the handle of a Slave ADC with dual injected conversions enabled:
           check JQM bit directly in ADC CFGR register */
        tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e011      	b.n	80010ea <HAL_ADC_IRQHandler+0x252>
      }
      else
      {
        /* hadc is the handle of a Slave ADC with dual injected conversions enabled:
           need to check JQM bit of Master ADC CFGR register */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d004      	beq.n	80010da <HAL_ADC_IRQHandler+0x242>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d102      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x248>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e000      	b.n	80010e2 <HAL_ADC_IRQHandler+0x24a>
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 80010e2:	60fb      	str	r3, [r7, #12]
        tmp_cfgr_jqm = READ_REG(tmpADC_Master->CFGR);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
      }
      /* 1b. Is hadc the handle of a Slave ADC with regular conversions enabled? */
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d016      	beq.n	8001122 <HAL_ADC_IRQHandler+0x28a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d011      	beq.n	8001122 <HAL_ADC_IRQHandler+0x28a>
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <HAL_ADC_IRQHandler+0x28a>
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	2b05      	cmp	r3, #5
 8001114:	d005      	beq.n	8001122 <HAL_ADC_IRQHandler+0x28a>
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_ADC_IRQHandler+0x2b8>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2b09      	cmp	r3, #9
 8001120:	d104      	bne.n	800112c <HAL_ADC_IRQHandler+0x294>
      {
        /* hadc is not the handle of a Slave ADC with dual regular conversions enabled:
           check JAUTO and CONT bits directly in ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e018      	b.n	800115e <HAL_ADC_IRQHandler+0x2c6>
      }
      else
      {
        /* hadc is not the handle of a Slave ADC with dual regular conversions enabled:
           check JAUTO and CONT bits of Master ADC CFGR register */
        tmpADC_Master = ADC_MASTER_REGISTER(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_ADC_IRQHandler+0x2b0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d004      	beq.n	8001140 <HAL_ADC_IRQHandler+0x2a8>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_ADC_IRQHandler+0x2b4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d109      	bne.n	8001154 <HAL_ADC_IRQHandler+0x2bc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_ADC_IRQHandler+0x2be>
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000
 800114c:	58026000 	.word	0x58026000
 8001150:	40022300 	.word	0x40022300
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <HAL_ADC_IRQHandler+0x4d0>)
 8001156:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61fb      	str	r3, [r7, #28]
      }

      /* Secondly, check whether JEOC and JEOS interruptions can be disabled */
      if ((ADC_IS_SOFTWARE_START_INJECTED(hadc) && (READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) != ADC_CFGR_JQM))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001168:	2b00      	cmp	r3, #0
 800116a:	d13f      	bne.n	80011ec <HAL_ADC_IRQHandler+0x354>
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d13a      	bne.n	80011ec <HAL_ADC_IRQHandler+0x354>
           && (!((READ_BIT(tmp_cfgr, (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) == (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) &&
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	4b7c      	ldr	r3, [pc, #496]	; (800136c <HAL_ADC_IRQHandler+0x4d4>)
 800117a:	4013      	ands	r3, r2
 800117c:	4a7b      	ldr	r2, [pc, #492]	; (800136c <HAL_ADC_IRQHandler+0x4d4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <HAL_ADC_IRQHandler+0x2f8>
             (ADC_IS_SOFTWARE_START_REGULAR(hadc))))    )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
           && (!((READ_BIT(tmp_cfgr, (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) == (ADC_CFGR_JAUTO|ADC_CFGR_CONT)) &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02d      	beq.n	80011ec <HAL_ADC_IRQHandler+0x354>
      {
        /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit         */
        /* JADSTART==0 (no conversion on going)                               */
        if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d11a      	bne.n	80011d4 <HAL_ADC_IRQHandler+0x33c>
        {
          /* Disable ADC end of sequence conversion interrupt  */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	6852      	ldr	r2, [r2, #4]
 80011a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011ac:	605a      	str	r2, [r3, #4]
          /* Clear HAL_ADC_STATE_INJ_BUSY bit */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
          /* If no regular conversion on-going, set HAL_ADC_STATE_READY bit */
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d112      	bne.n	80011ec <HAL_ADC_IRQHandler+0x354>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
 80011d2:	e00b      	b.n	80011ec <HAL_ADC_IRQHandler+0x354>
          }
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f043 0210 	orr.w	r2, r3, #16
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fe11 	bl	8001e14 <HAL_ADCEx_InjectedConvCpltCallback>

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2260      	movs	r2, #96	; 0x60
 80011f8:	601a      	str	r2, [r3, #0]


  /* ========== Check Analog watchdog flag =================================================== */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	2b00      	cmp	r3, #0
 8001202:	d011      	beq.n	8001228 <HAL_ADC_IRQHandler+0x390>
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00c      	beq.n	8001228 <HAL_ADC_IRQHandler+0x390>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f8ae 	bl	800137c <HAL_ADC_LevelOutOfWindowCallback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <HAL_ADC_IRQHandler+0x3c0>
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00d      	beq.n	8001258 <HAL_ADC_IRQHandler+0x3c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fdf7 	bl	8001e3c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001256:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	2b00      	cmp	r3, #0
 8001260:	d012      	beq.n	8001288 <HAL_ADC_IRQHandler+0x3f0>
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00d      	beq.n	8001288 <HAL_ADC_IRQHandler+0x3f0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fde9 	bl	8001e50 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001286:	601a      	str	r2, [r3, #0]
  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d048      	beq.n	8001324 <HAL_ADC_IRQHandler+0x48c>
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	d043      	beq.n	8001324 <HAL_ADC_IRQHandler+0x48c>
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */

    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <HAL_ADC_IRQHandler+0x412>
    {
      overrun_error = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	e026      	b.n	80012f8 <HAL_ADC_IRQHandler+0x460>
    }
    else
    {
      /* Pointer to the common control register */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <HAL_ADC_IRQHandler+0x4d0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d004      	beq.n	80012be <HAL_ADC_IRQHandler+0x426>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_ADC_IRQHandler+0x4d8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d102      	bne.n	80012c4 <HAL_ADC_IRQHandler+0x42c>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_ADC_IRQHandler+0x4dc>)
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_IRQHandler+0x430>
      }
      else
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_ADC_IRQHandler+0x4e0>)
 80012c6:	623b      	str	r3, [r7, #32]
      }
      /* check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL) == ADC_MODE_INDEPENDENT)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_ADC_IRQHandler+0x450>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00a      	beq.n	80012f8 <HAL_ADC_IRQHandler+0x460>
        {
          overrun_error = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e007      	b.n	80012f8 <HAL_ADC_IRQHandler+0x460>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register DAMDF bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF) != RESET)
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_IRQHandler+0x460>
        {
          overrun_error = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10e      	bne.n	800131c <HAL_ADC_IRQHandler+0x484>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f043 0202 	orr.w	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	659a      	str	r2, [r3, #88]	; 0x58

      /* Error callback */
      HAL_ADC_ErrorCallback(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f83a 	bl	8001390 <HAL_ADC_ErrorCallback>
    }

    /* Clear the Overrun flag, to be done AFTER HAL_ADC_ErrorCallback() since
       old data is preserved until OVR is reset */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2210      	movs	r2, #16
 8001322:	601a      	str	r2, [r3, #0]

  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d018      	beq.n	8001360 <HAL_ADC_IRQHandler+0x4c8>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_ADC_IRQHandler+0x4c8>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	f043 0208 	orr.w	r2, r3, #8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fd64 	bl	8001e28 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000
 800136c:	02002000 	.word	0x02002000
 8001370:	40022100 	.word	0x40022100
 8001374:	40022300 	.word	0x40022300
 8001378:	58026300 	.word	0x58026300

0800137c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a4:	b490      	push	{r4, r7}
 80013a6:	b0b6      	sub	sp, #216	; 0xd8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
  }

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d103      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x26>
  {
     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  }
  else
  {
    if (hadc->Instance == ADC3)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4aa8      	ldr	r2, [pc, #672]	; (8001668 <HAL_ADC_ConfigChannel+0x2c4>)
 80013c8:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_ADC_ConfigChannel+0x36>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f000 bca4 	b.w	8001d22 <HAL_ADC_ConfigChannel+0x97e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 8487 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x95c>
  {
    /* ADC channels preselction */
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	69d1      	ldr	r1, [r2, #28]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	430a      	orrs	r2, r1
 8001408:	61da      	str	r2, [r3, #28]

    /* Regular sequence configuration */
    /* Clear the old SQx bits then set the new ones for the selected rank */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d836      	bhi.n	8001480 <HAL_ADC_ConfigChannel+0xdc>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800141c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001420:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001424:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
  return(result);
 8001430:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	4610      	mov	r0, r2
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6852      	ldr	r2, [r2, #4]
 800143e:	fb02 f200 	mul.w	r2, r2, r0
 8001442:	201f      	movs	r0, #31
 8001444:	fa00 f202 	lsl.w	r2, r0, r2
 8001448:	43d2      	mvns	r2, r2
 800144a:	4011      	ands	r1, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001454:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800145c:	fa92 f2a2 	rbit	r2, r2
 8001460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
  return(result);
 8001464:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	4614      	mov	r4, r2
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	6852      	ldr	r2, [r2, #4]
 8001472:	fb02 f204 	mul.w	r2, r2, r4
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	430a      	orrs	r2, r1
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
 800147e:	e0b1      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank),
                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d838      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x156>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001492:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001496:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800149e:	fa92 f2a2 	rbit	r2, r2
 80014a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
  return(result);
 80014a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	4610      	mov	r0, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	6852      	ldr	r2, [r2, #4]
 80014b4:	3a05      	subs	r2, #5
 80014b6:	fb02 f200 	mul.w	r2, r2, r0
 80014ba:	201f      	movs	r0, #31
 80014bc:	fa00 f202 	lsl.w	r2, r0, r2
 80014c0:	43d2      	mvns	r2, r2
 80014c2:	4011      	ands	r1, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80014cc:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80014d4:	fa92 f2a2 	rbit	r2, r2
 80014d8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
  return(result);
 80014dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	4614      	mov	r4, r2
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	6852      	ldr	r2, [r2, #4]
 80014ea:	3a05      	subs	r2, #5
 80014ec:	fb02 f204 	mul.w	r2, r2, r4
 80014f0:	fa00 f202 	lsl.w	r2, r0, r2
 80014f4:	430a      	orrs	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
 80014f8:	e074      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank),
                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b0e      	cmp	r3, #14
 8001500:	d838      	bhi.n	8001574 <HAL_ADC_ConfigChannel+0x1d0>
    {
      MODIFY_REG(hadc->Instance->SQR3,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800150c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001510:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  return(result);
 8001520:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001524:	fab2 f282 	clz	r2, r2
 8001528:	4610      	mov	r0, r2
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6852      	ldr	r2, [r2, #4]
 800152e:	3a0a      	subs	r2, #10
 8001530:	fb02 f200 	mul.w	r2, r2, r0
 8001534:	201f      	movs	r0, #31
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	43d2      	mvns	r2, r2
 800153c:	4011      	ands	r1, r2
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	6810      	ldr	r0, [r2, #0]
 8001542:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800154e:	fa92 f2a2 	rbit	r2, r2
 8001552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
  return(result);
 8001556:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800155a:	fab2 f282 	clz	r2, r2
 800155e:	4614      	mov	r4, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6852      	ldr	r2, [r2, #4]
 8001564:	3a0a      	subs	r2, #10
 8001566:	fb02 f204 	mul.w	r2, r2, r4
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	430a      	orrs	r2, r1
 8001570:	639a      	str	r2, [r3, #56]	; 0x38
 8001572:	e037      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x240>
                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
    }
    /* For Rank 15 to 16 */
    else
    {
      MODIFY_REG(hadc->Instance->SQR4,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800157e:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800158a:	fa92 f2a2 	rbit	r2, r2
 800158e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
  return(result);
 8001592:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	4610      	mov	r0, r2
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	3a0f      	subs	r2, #15
 80015a2:	fb02 f200 	mul.w	r2, r2, r0
 80015a6:	201f      	movs	r0, #31
 80015a8:	fa00 f202 	lsl.w	r2, r0, r2
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	4011      	ands	r1, r2
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	6810      	ldr	r0, [r2, #0]
 80015b4:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80015b8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015c0:	fa92 f2a2 	rbit	r2, r2
 80015c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
  return(result);
 80015c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015cc:	fab2 f282 	clz	r2, r2
 80015d0:	4614      	mov	r4, r2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6852      	ldr	r2, [r2, #4]
 80015d6:	3a0f      	subs	r2, #15
 80015d8:	fb02 f204 	mul.w	r2, r2, r4
 80015dc:	fa00 f202 	lsl.w	r2, r0, r2
 80015e0:	430a      	orrs	r2, r1
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 81e6 	bne.w	80019c0 <HAL_ADC_ConfigChannel+0x61c>
    {

      /* Channel sampling time configuration */
      /* Clear the old sample time then set the new one for the selected channel */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b09      	cmp	r3, #9
 80015fa:	d937      	bls.n	800166c <HAL_ADC_ConfigChannel+0x2c8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	6991      	ldr	r1, [r2, #24]
 8001606:	2238      	movs	r2, #56	; 0x38
 8001608:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001610:	fa92 f2a2 	rbit	r2, r2
 8001614:	67fa      	str	r2, [r7, #124]	; 0x7c
  return(result);
 8001616:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001618:	fab2 f282 	clz	r2, r2
 800161c:	4610      	mov	r0, r2
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	3a0a      	subs	r2, #10
 8001624:	fb02 f200 	mul.w	r2, r2, r0
 8001628:	2007      	movs	r0, #7
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	43d2      	mvns	r2, r2
 8001630:	4011      	ands	r1, r2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6890      	ldr	r0, [r2, #8]
 8001636:	2238      	movs	r2, #56	; 0x38
 8001638:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001640:	fa92 f2a2 	rbit	r2, r2
 8001644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	4614      	mov	r4, r2
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	3a0a      	subs	r2, #10
 8001658:	fb02 f204 	mul.w	r2, r2, r4
 800165c:	fa00 f202 	lsl.w	r2, r0, r2
 8001660:	430a      	orrs	r2, r1
 8001662:	619a      	str	r2, [r3, #24]
 8001664:	e02e      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x320>
 8001666:	bf00      	nop
 8001668:	58026000 	.word	0x58026000
                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel));
      }
      else /* For channels 0 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	6951      	ldr	r1, [r2, #20]
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	673a      	str	r2, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800167c:	fa92 f2a2 	rbit	r2, r2
 8001680:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001682:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001684:	fab2 f282 	clz	r2, r2
 8001688:	4610      	mov	r0, r2
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	fb02 f200 	mul.w	r2, r2, r0
 8001692:	2007      	movs	r0, #7
 8001694:	fa00 f202 	lsl.w	r2, r0, r2
 8001698:	43d2      	mvns	r2, r2
 800169a:	4011      	ands	r1, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6890      	ldr	r0, [r2, #8]
 80016a0:	2238      	movs	r2, #56	; 0x38
 80016a2:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016a6:	fa92 f2a2 	rbit	r2, r2
 80016aa:	677a      	str	r2, [r7, #116]	; 0x74
  return(result);
 80016ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80016ae:	fab2 f282 	clz	r2, r2
 80016b2:	4614      	mov	r4, r2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	fb02 f204 	mul.w	r2, r2, r4
 80016bc:	fa00 f202 	lsl.w	r2, r0, r2
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]

      /* Configure the offset: offset enable/disable, channel, offset value, Signed saturation feature */
     
      /* Shift the offset in function of the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     
      switch (sConfig->OffsetNumber)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	f200 80f6 	bhi.w	80018d6 <HAL_ADC_ConfigChannel+0x532>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <HAL_ADC_ConfigChannel+0x34c>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001701 	.word	0x08001701
 80016f4:	08001775 	.word	0x08001775
 80016f8:	080017eb 	.word	0x080017eb
 80016fc:	08001861 	.word	0x08001861
         /* - Enable offset                                                      */
         /* - Set channel number                                                 */
         /* - Set offset value                                                   */
         /* - Set Right shift after offset application                           */
        case ADC_OFFSET_1:
           MODIFY_REG(hadc->Instance->OFR1,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800170a:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	6810      	ldr	r0, [r2, #0]
 8001712:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001716:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800171a:	fa92 f2a2 	rbit	r2, r2
 800171e:	667a      	str	r2, [r7, #100]	; 0x64
  return(result);
 8001720:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	4090      	lsls	r0, r2
 8001728:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800172c:	4302      	orrs	r2, r0
 800172e:	430a      	orrs	r2, r1
 8001730:	661a      	str	r2, [r3, #96]	; 0x60
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	6912      	ldr	r2, [r2, #16]
 800173c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	7e09      	ldrb	r1, [r1, #24]
 8001744:	430a      	orrs	r2, r1
 8001746:	611a      	str	r2, [r3, #16]
           /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	7e5b      	ldrb	r3, [r3, #25]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x3be>
           {
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800175a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800175e:	661a      	str	r2, [r3, #96]	; 0x60
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
           }
          break;
 8001760:	e12e      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800176c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001770:	661a      	str	r2, [r3, #96]	; 0x60
          break;
 8001772:	e125      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_2:
          MODIFY_REG(hadc->Instance->OFR2,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800177e:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	6810      	ldr	r0, [r2, #0]
 8001786:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 800178a:	663a      	str	r2, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800178e:	fa92 f2a2 	rbit	r2, r2
 8001792:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 8001794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	4090      	lsls	r0, r2
 800179c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80017a0:	4302      	orrs	r2, r0
 80017a2:	430a      	orrs	r2, r1
 80017a4:	665a      	str	r2, [r3, #100]	; 0x64
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	6912      	ldr	r2, [r2, #16]
 80017b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	7e09      	ldrb	r1, [r1, #24]
 80017b8:	0049      	lsls	r1, r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	7e5b      	ldrb	r3, [r3, #25]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x434>
           {
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80017d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017d4:	665a      	str	r2, [r3, #100]	; 0x64
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
           }
          break;
 80017d6:	e0f3      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80017e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017e6:	665a      	str	r2, [r3, #100]	; 0x64
          break;
 80017e8:	e0ea      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_3:
          MODIFY_REG(hadc->Instance->OFR3,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017f4:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6810      	ldr	r0, [r2, #0]
 80017fc:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001800:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800180a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	4090      	lsls	r0, r2
 8001812:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001816:	4302      	orrs	r2, r0
 8001818:	430a      	orrs	r2, r1
 800181a:	669a      	str	r2, [r3, #104]	; 0x68
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	6912      	ldr	r2, [r2, #16]
 8001826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	7e09      	ldrb	r1, [r1, #24]
 800182e:	0089      	lsls	r1, r1, #2
 8001830:	430a      	orrs	r2, r1
 8001832:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7e5b      	ldrb	r3, [r3, #25]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_ADC_ConfigChannel+0x4aa>
           {
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001846:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800184a:	669a      	str	r2, [r3, #104]	; 0x68
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
           }
          break;
 800184c:	e0b8      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185c:	669a      	str	r2, [r3, #104]	; 0x68
          break;
 800185e:	e0af      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
        
        case ADC_OFFSET_4:
          MODIFY_REG(hadc->Instance->OFR4,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800186a:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	6810      	ldr	r0, [r2, #0]
 8001872:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001876:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800187a:	fa92 f2a2 	rbit	r2, r2
 800187e:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8001880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	4090      	lsls	r0, r2
 8001888:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800188c:	4302      	orrs	r2, r0
 800188e:	430a      	orrs	r2, r1
 8001890:	66da      	str	r2, [r3, #108]	; 0x6c
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	6912      	ldr	r2, [r2, #16]
 800189c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	7e09      	ldrb	r1, [r1, #24]
 80018a4:	00c9      	lsls	r1, r1, #3
 80018a6:	430a      	orrs	r2, r1
 80018a8:	611a      	str	r2, [r3, #16]
          /* Enable or disable the signed saturation bit */
          if(sConfig->OffsetSignedSaturation != DISABLE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7e5b      	ldrb	r3, [r3, #25]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x520>
          {
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80018bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c0:	66da      	str	r2, [r3, #108]	; 0x6c
          }
          else
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
          }
          break;
 80018c2:	e07d      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80018ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	66da      	str	r2, [r3, #108]	; 0x6c
          break;
 80018d4:	e074      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x61c>
        /* Case ADC_OFFSET_NONE */
        default :
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800190a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800190e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800192c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	429a      	cmp	r2, r3
 8001938:	d107      	bne.n	800194a <HAL_ADC_ConfigChannel+0x5a6>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001944:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001948:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800198a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d107      	bne.n	80019be <HAL_ADC_ConfigChannel+0x61a>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80019b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019bc:	66da      	str	r2, [r3, #108]	; 0x6c
          }
          break;
 80019be:	bf00      	nop

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x63c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x63c>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x63e>
 80019e0:	2300      	movs	r3, #0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8197 	bne.w	8001d16 <HAL_ADC_ConfigChannel+0x972>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d00f      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x66e>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	2001      	movs	r0, #1
 8001a04:	fa00 f202 	lsl.w	r2, r0, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001a10:	e06e      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x74c>
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	2001      	movs	r0, #1
 8001a24:	fa00 f202 	lsl.w	r2, r0, r2
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* For channels 9 to 15 (ADC1, ADC2) or to 11 (ADC3), SMPR2 register
           must be configured */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d92e      	bls.n	8001a94 <HAL_ADC_ConfigChannel+0x6f0>
        {
          MODIFY_REG(hadc->Instance->SMPR2,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	6991      	ldr	r1, [r2, #24]
 8001a40:	2238      	movs	r2, #56	; 0x38
 8001a42:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	61fa      	str	r2, [r7, #28]
  return(result);
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	4610      	mov	r0, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	3a09      	subs	r2, #9
 8001a5a:	fb02 f200 	mul.w	r2, r2, r0
 8001a5e:	2007      	movs	r0, #7
 8001a60:	fa00 f202 	lsl.w	r2, r0, r2
 8001a64:	43d2      	mvns	r2, r2
 8001a66:	4011      	ands	r1, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6890      	ldr	r0, [r2, #8]
 8001a6c:	2238      	movs	r2, #56	; 0x38
 8001a6e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7a:	fab2 f282 	clz	r2, r2
 8001a7e:	4614      	mov	r4, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	3a09      	subs	r2, #9
 8001a86:	fb02 f204 	mul.w	r2, r2, r4
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	e02d      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x74c>
                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1),
                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1));
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          MODIFY_REG(hadc->Instance->SMPR1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	6951      	ldr	r1, [r2, #20]
 8001a9e:	2238      	movs	r2, #56	; 0x38
 8001aa0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	fa92 f2a2 	rbit	r2, r2
 8001aa8:	60fa      	str	r2, [r7, #12]
  return(result);
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	fb02 f200 	mul.w	r2, r2, r0
 8001abc:	2007      	movs	r0, #7
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	43d2      	mvns	r2, r2
 8001ac4:	4011      	ands	r1, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6890      	ldr	r0, [r2, #8]
 8001aca:	2238      	movs	r2, #56	; 0x38
 8001acc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	fa92 f2a2 	rbit	r2, r2
 8001ad4:	617a      	str	r2, [r7, #20]
  return(result);
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	4614      	mov	r4, r2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	3201      	adds	r2, #1
 8001ae4:	fb02 f204 	mul.w	r2, r2, r4
 8001ae8:	fa00 f202 	lsl.w	r2, r0, r2
 8001aec:	430a      	orrs	r2, r1
 8001aee:	615a      	str	r2, [r3, #20]
      /*  paths.                                                                */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
    
      /* Configuration of common ADC parameters                                 */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a8d      	ldr	r2, [pc, #564]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0x760>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a8c      	ldr	r2, [pc, #560]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d103      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x768>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8001b04:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_ADC_ConfigChannel+0x990>)
 8001b06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b0a:	e002      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x76e>
      }
      else
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <HAL_ADC_ConfigChannel+0x994>)
 8001b0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
    
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d106      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x784>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x7b4>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b2c:	2b11      	cmp	r3, #17
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x79a>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x7b4>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b42:	2b13      	cmp	r3, #19
 8001b44:	f040 80e7 	bne.w	8001d16 <HAL_ADC_ConfigChannel+0x972>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80df 	bne.w	8001d16 <HAL_ADC_ConfigChannel+0x972>
      {
        /* Configuration of common ADC parameters (continuation)                */
    
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d108      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x7d4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x7d4>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x7d6>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80b6 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x948>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001b84:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d11d      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x822>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001b8a:	4b69      	ldr	r3, [pc, #420]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x7fe>
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d00b      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x816>
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x81a>
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x81a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x81c>
 8001bbe:	2300      	movs	r3, #0
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d04b      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0x8b8>
 8001bc4:	e092      	b.n	8001cec <HAL_ADC_ConfigChannel+0x948>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d120      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x86e>
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x844>
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0x85c>
 8001be8:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x860>
 8001bf4:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x860>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x862>
 8001c04:	2300      	movs	r3, #0
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d120      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x8ae>
 8001c10:	e013      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x896>
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x88a>
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_ADC_ConfigChannel+0x988>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x88a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x88c>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10b      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x8ae>
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x8b2>
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_ADC_ConfigChannel+0x98c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x8b2>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x8b4>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d147      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x948>
        {
          /* Enable Temperature sensor measurement path (channel 18)            */
          /* Note: Temp. sensor internal channels available on ADC3    */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d11f      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x900>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x900>
          {
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c7c:	609a      	str	r2, [r3, #8]
    
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially          */
            /*       CPU processing cycles.                                 */
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_ADC_ConfigChannel+0x99c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a30      	ldr	r2, [pc, #192]	; (8001d44 <HAL_ADC_ConfigChannel+0x9a0>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0cda      	lsrs	r2, r3, #19
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x8f8>
            {
              wait_loop_index--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x8f2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001ca2:	e037      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x970>
            }
          }
          /* If Channel 18 is selected, enable VBAT measurement path.           */
          /* Note: VBAT internal internal channels available on ADC1 and ADC3   */
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	d10d      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x924>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x924>
          {
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cc4:	609a      	str	r2, [r3, #8]
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001cc6:	e025      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x970>
          }
          /* If Channel 19 is selected, enable VREFINT measurement path          */
          /* Note: VBAT internal internal channels available on ADC1 only       */
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b13      	cmp	r3, #19
 8001cce:	d121      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x970>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_ADC_ConfigChannel+0x998>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d11c      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x970>
          {
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ce4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ce8:	609a      	str	r2, [r3, #8]
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001cea:	e013      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x970>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
    
          tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cfe:	e00a      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x972>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x972>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8001d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	37d8      	adds	r7, #216	; 0xd8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc90      	pop	{r4, r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40022100 	.word	0x40022100
 8001d34:	40022300 	.word	0x40022300
 8001d38:	58026300 	.word	0x58026300
 8001d3c:	58026000 	.word	0x58026000
 8001d40:	20000034 	.word	0x20000034
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <ADC_Enable+0x2c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <ADC_Enable+0x2c>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <ADC_Enable+0x2e>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d144      	bne.n	8001e04 <ADC_Enable+0xbc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <ADC_Enable+0xc8>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e030      	b.n	8001e06 <ADC_Enable+0xbe>
    }

    /* Enable the ADC peripheral */
    ADC_ENABLE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	609a      	str	r2, [r3, #8]


    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001db4:	f7fe fcca 	bl	800074c <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dba:	e01c      	b.n	8001df6 <ADC_Enable+0xae>
          has been cleared (after a calibration), ADEN bit is reset by the
          calibration logic.
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      ADC_ENABLE(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6892      	ldr	r2, [r2, #8]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	609a      	str	r2, [r3, #8]

      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
 8001dcc:	f7fe fcbe 	bl	800074c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d90d      	bls.n	8001df6 <ADC_Enable+0xae>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <ADC_Enable+0xbe>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d1db      	bne.n	8001dbc <ADC_Enable+0x74>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	8000003f 	.word	0x8000003f

08001e14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: Master ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b09f      	sub	sp, #124	; 0x7c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0ab      	b.n	8001fee <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d102      	bne.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001ea8:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e001      	b.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e08e      	b.n	8001fee <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                           */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d176      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x154>
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d170      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {

    /* Pointer to the common control register */
    tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8001eec:	673b      	str	r3, [r7, #112]	; 0x70

    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d039      	beq.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 9 clock cycles for 14 bits,                             */
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d158      	bne.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8001f4a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d147      	bne.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8001f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x190>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6811      	ldr	r1, [r2, #0]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	6892      	ldr	r2, [r2, #8]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f66:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f68:	e03a      	b.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
               multimode->Mode | multimode->TwoSamplingDelay );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d121      	bne.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_ADCEx_MultiModeConfigChannel+0x142>
 8001fb8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d110      	bne.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x190>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fc8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fca:	e009      	b.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status  = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001fde:	e000      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe0:	bf00      	nop
  }


  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status ;
 8001fea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	377c      	adds	r7, #124	; 0x7c
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40022100 	.word	0x40022100
 8002004:	40022300 	.word	0x40022300
 8002008:	fffff0e0 	.word	0xfffff0e0

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	05fa0000 	.word	0x05fa0000

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002082:	4909      	ldr	r1, [pc, #36]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 8002084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	490d      	ldr	r1, [pc, #52]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	4909      	ldr	r1, [pc, #36]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	2201      	movs	r2, #1
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	401a      	ands	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002146:	2101      	movs	r1, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	1e59      	subs	r1, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff90 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff2b 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff42 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff92 	bl	8002100 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff61 	bl	80020ac <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff35 	bl	8002070 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa4 	bl	8002164 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e014      	b.n	8002262 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_DAC_Init+0x28>
  {  
  /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f007 ff57 	bl	800a0fc <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	795b      	ldrb	r3, [r3, #5]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_DAC_Start+0x16>
 800227c:	2302      	movs	r3, #2
 800227e:	e03a      	b.n	80022f6 <HAL_DAC_Start+0x8c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	2001      	movs	r0, #1
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <HAL_DAC_Start+0x5e>
  {
    
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d118      	bne.n	80022e8 <HAL_DAC_Start+0x7e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	e00f      	b.n	80022e8 <HAL_DAC_Start+0x7e>
    }
  }
  else
  {  
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80022d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d6:	d107      	bne.n	80022e8 <HAL_DAC_Start+0x7e>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	6852      	ldr	r2, [r2, #4]
 80022e2:	f042 0202 	orr.w	r2, r2, #2
 80022e6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002318:	d120      	bne.n	800235c <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1 */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002328:	d118      	bne.n	800235c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2204      	movs	r2, #4
 800232e:	711a      	strb	r2, [r3, #4]
      
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]
      
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002344:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002354:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f852 	bl	8002400 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236a:	d120      	bne.n	80023ae <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 1 */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237a:	d118      	bne.n	80023ae <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	711a      	strb	r2, [r3, #4]
      
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
      
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002396:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f927 	bl	80025fc <HAL_DACEx_DMAUnderrunCallbackCh2>
    }
  }
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80023b6:	b480      	push	{r7}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3308      	adds	r3, #8
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e004      	b.n	80023ea <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3314      	adds	r3, #20
 80023e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	795b      	ldrb	r3, [r3, #5]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_DAC_ConfigChannel+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e0da      	b.n	80025ee <HAL_DAC_ConfigChannel+0x1da>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2202      	movs	r2, #2
 8002442:	711a      	strb	r2, [r3, #4]
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d157      	bne.n	80024fc <HAL_DAC_ConfigChannel+0xe8>
  /* Sample on old configuration */ 
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d137      	bne.n	80024c2 <HAL_DAC_ConfigChannel+0xae>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002452:	f7fe f97b 	bl	800074c <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]
      
      
      /* SHSR1 can be written when BWST1  equals RESET */
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 8002458:	e011      	b.n	800247e <HAL_DAC_ConfigChannel+0x6a>
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800245a:	f7fe f977 	bl	800074c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d90a      	bls.n	800247e <HAL_DAC_ConfigChannel+0x6a>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f043 0208 	orr.w	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2203      	movs	r2, #3
 8002478:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b7      	b.n	80025ee <HAL_DAC_ConfigChannel+0x1da>
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002484:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_DAC_ConfigChannel+0x1e4>)
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e6      	bne.n	800245a <HAL_DAC_ConfigChannel+0x46>
        }
      }
      HAL_Delay(1);
 800248c:	2001      	movs	r0, #1
 800248e:	f7fe f969 	bl	8000764 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	6992      	ldr	r2, [r2, #24]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
 800249c:	e01e      	b.n	80024dc <HAL_DAC_ConfigChannel+0xc8>
      /* SHSR2 can be written when BWST2 equals RESET */

      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800249e:	f7fe f955 	bl	800074c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d90a      	bls.n	80024c2 <HAL_DAC_ConfigChannel+0xae>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f043 0208 	orr.w	r2, r3, #8
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2203      	movs	r2, #3
 80024bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e095      	b.n	80025ee <HAL_DAC_ConfigChannel+0x1da>
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	dbe8      	blt.n	800249e <HAL_DAC_ConfigChannel+0x8a>
        }
      }
      HAL_Delay(1);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7fe f949 	bl	8000764 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	6992      	ldr	r2, [r2, #24]
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    /* HoldTime */
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	69d1      	ldr	r1, [r2, #28]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	6a11      	ldr	r1, [r2, #32]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d119      	bne.n	8002538 <HAL_DAC_ConfigChannel+0x124>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	61fb      	str	r3, [r7, #28]
  /* Clear trimming value */
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 800250c:	221f      	movs	r2, #31
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	4013      	ands	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	61bb      	str	r3, [r7, #24]
  /* Calculate CCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	4313      	orrs	r3, r2
 800252e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */
  
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODE2_0, DAC_MCR_MODE2_1 and DAC_MCR_MODE2_2 bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 8002540:	2207      	movs	r2, #7
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4013      	ands	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	431a      	orrs	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4313      	orrs	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	fa00 f202 	lsl.w	r2, r0, r2
 800258c:	43d2      	mvns	r2, r2
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 800259a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = (sConfig->DAC_Trigger);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	601a      	str	r2, [r3, #0]
      
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6811      	ldr	r1, [r2, #0]
 80025d2:	20c0      	movs	r0, #192	; 0xc0
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	43d2      	mvns	r2, r2
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20008000 	.word	0x20008000

080025fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e098      	b.n	8002754 <HAL_DMA_Abort_IT+0x144>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e08d      	b.n	8002754 <HAL_DMA_Abort_IT+0x144>
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_DMA_Abort_IT+0x14c>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d907      	bls.n	8002654 <HAL_DMA_Abort_IT+0x44>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_DMA_Abort_IT+0x150>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d801      	bhi.n	8002654 <HAL_DMA_Abort_IT+0x44>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_DMA_Abort_IT+0x46>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d021      	beq.n	800269e <HAL_DMA_Abort_IT+0x8e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HAL_DMA_Abort_IT+0x14c>)
 800266a:	429a      	cmp	r2, r3
 800266c:	d90e      	bls.n	800268c <HAL_DMA_Abort_IT+0x7c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_DMA_Abort_IT+0x150>)
 8002676:	429a      	cmp	r2, r3
 8002678:	d808      	bhi.n	800268c <HAL_DMA_Abort_IT+0x7c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e062      	b.n	8002752 <HAL_DMA_Abort_IT+0x142>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e059      	b.n	8002752 <HAL_DMA_Abort_IT+0x142>
    }
    else /* D3 Domain BDMA */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	f022 020e 	bic.w	r2, r2, #14
 80026ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_DMA_Abort_IT+0x14c>)
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d90e      	bls.n	80026d8 <HAL_DMA_Abort_IT+0xc8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_DMA_Abort_IT+0x150>)
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d808      	bhi.n	80026d8 <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_DMA_Abort_IT+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80026f8:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_DMA_Abort_IT+0x154>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	6053      	str	r3, [r2, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800270e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_DMA_Abort_IT+0x122>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002726:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002730:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_DMA_Abort_IT+0x142>
      {
        hdma->XferAbortCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	4002000f 	.word	0x4002000f
 8002760:	400204b8 	.word	0x400204b8
 8002764:	58025400 	.word	0x58025400

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_GPIO_Init+0x248>)
 8002784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e196      	b.n	8002aba <HAL_GPIO_Init+0x352>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8185 	bne.w	8002ab4 <HAL_GPIO_Init+0x34c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x52>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b12      	cmp	r3, #18
 80027b8:	d123      	bne.n	8002802 <HAL_GPIO_Init+0x9a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	69b9      	ldr	r1, [r7, #24]
 80027fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0203 	and.w	r2, r3, #3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00b      	beq.n	8002856 <HAL_GPIO_Init+0xee>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284a:	2b11      	cmp	r3, #17
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b12      	cmp	r3, #18
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0x150>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80df 	beq.w	8002ab4 <HAL_GPIO_Init+0x34c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x24c>)
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_GPIO_Init+0x24c>)
 80028fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_GPIO_Init+0x24c>)
 8002908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <HAL_GPIO_Init+0x250>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a20      	ldr	r2, [pc, #128]	; (80029bc <HAL_GPIO_Init+0x254>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d051      	beq.n	80029e4 <HAL_GPIO_Init+0x27c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_GPIO_Init+0x258>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_GPIO_Init+0x244>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_GPIO_Init+0x25c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02b      	beq.n	80029a8 <HAL_GPIO_Init+0x240>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x260>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d025      	beq.n	80029a4 <HAL_GPIO_Init+0x23c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_GPIO_Init+0x264>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01f      	beq.n	80029a0 <HAL_GPIO_Init+0x238>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_GPIO_Init+0x268>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d019      	beq.n	800299c <HAL_GPIO_Init+0x234>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_GPIO_Init+0x26c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x230>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_GPIO_Init+0x270>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x22c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_GPIO_Init+0x274>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x228>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_GPIO_Init+0x278>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x224>
 8002988:	2309      	movs	r3, #9
 800298a:	e02c      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 800298c:	230a      	movs	r3, #10
 800298e:	e02a      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 8002990:	2308      	movs	r3, #8
 8002992:	e028      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 8002994:	2307      	movs	r3, #7
 8002996:	e026      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 8002998:	2306      	movs	r3, #6
 800299a:	e024      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 800299c:	2305      	movs	r3, #5
 800299e:	e022      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e020      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 80029a4:	2303      	movs	r3, #3
 80029a6:	e01e      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e01c      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01a      	b.n	80029e6 <HAL_GPIO_Init+0x27e>
 80029b0:	58000080 	.word	0x58000080
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58000400 	.word	0x58000400
 80029bc:	58020000 	.word	0x58020000
 80029c0:	58020400 	.word	0x58020400
 80029c4:	58020800 	.word	0x58020800
 80029c8:	58020c00 	.word	0x58020c00
 80029cc:	58021000 	.word	0x58021000
 80029d0:	58021400 	.word	0x58021400
 80029d4:	58021800 	.word	0x58021800
 80029d8:	58021c00 	.word	0x58021c00
 80029dc:	58022000 	.word	0x58022000
 80029e0:	58022400 	.word	0x58022400
 80029e4:	2300      	movs	r3, #0
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029f6:	4936      	ldr	r1, [pc, #216]	; (8002ad0 <HAL_GPIO_Init+0x368>)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->IMR1 = temp;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	601a      	str	r2, [r3, #0]

        temp = EXTI_Ptr->EMR1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2ea>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->EMR1 = temp;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x316>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x344>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	f67f ae65 	bls.w	800278c <HAL_GPIO_Init+0x24>
      }      
    }
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	58000400 	.word	0x58000400

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	835a      	strh	r2, [r3, #26]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	b08f      	sub	sp, #60	; 0x3c
 8002b08:	af0a      	add	r7, sp, #40	; 0x28
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e105      	b.n	8002d26 <HAL_PCD_Init+0x222>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f007 fd54 	bl	800a5d0 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f005 fabb 	bl	80080a8 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	687e      	ldr	r6, [r7, #4]
 8002b3a:	466d      	mov	r5, sp
 8002b3c:	f106 0410 	add.w	r4, r6, #16
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b50:	1d33      	adds	r3, r6, #4
 8002b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b54:	6838      	ldr	r0, [r7, #0]
 8002b56:	f005 fa55 	bl	8008004 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 fab2 	bl	80080ca <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e04c      	b.n	8002c06 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3339      	adds	r3, #57	; 0x39
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3338      	adds	r3, #56	; 0x38
 8002b94:	4602      	mov	r2, r0
 8002b96:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	333e      	adds	r3, #62	; 0x3e
 8002bac:	4602      	mov	r2, r0
 8002bae:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	333b      	adds	r3, #59	; 0x3b
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3340      	adds	r3, #64	; 0x40
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	334c      	adds	r3, #76	; 0x4c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b0e      	cmp	r3, #14
 8002c0a:	d9af      	bls.n	8002b6c <HAL_PCD_Init+0x68>
 }
 
 for (i = 0; i < 15 ; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e05a      	b.n	8002cc8 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c3e:	4602      	mov	r2, r0
 8002c40:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	b298      	uxth	r0, r3
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	333e      	adds	r3, #62	; 0x3e
 8002c56:	4602      	mov	r2, r0
 8002c58:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3340      	adds	r3, #64	; 0x40
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b0e      	cmp	r3, #14
 8002ccc:	d9a1      	bls.n	8002c12 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	687e      	ldr	r6, [r7, #4]
 8002cd6:	466d      	mov	r5, sp
 8002cd8:	f106 0410 	add.w	r4, r6, #16
 8002cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cec:	1d33      	adds	r3, r6, #4
 8002cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf0:	6838      	ldr	r0, [r7, #0]
 8002cf2:	f005 fa11 	bl	8008118 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f812 	bl	8002d30 <HAL_PCDEx_ActivateLPM>
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_PCD_Init+0x216>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f82f 	bl	8002d78 <HAL_PCDEx_ActivateBCD>
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 fb98 	bl	8008454 <USB_DevDisconnect>
 return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	10000003 	.word	0x10000003

08002d78 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = ENABLE; 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8086 	beq.w	8002eda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dce:	4b93      	ldr	r3, [pc, #588]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3e>
 8002dda:	4b90      	ldr	r3, [pc, #576]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	d111      	bne.n	8002e0a <HAL_RCC_OscConfig+0x56>
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d10b      	bne.n	8002e0a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df2:	4b8a      	ldr	r3, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d06c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x124>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d168      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e364      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x6e>
 8002e14:	4a81      	ldr	r2, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e16:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e02e      	b.n	8002e80 <HAL_RCC_OscConfig+0xcc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x90>
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e2c:	4b7b      	ldr	r3, [pc, #492]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4a79      	ldr	r2, [pc, #484]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e38:	4b78      	ldr	r3, [pc, #480]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xcc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0xb4>
 8002e4e:	4a73      	ldr	r2, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e50:	4b72      	ldr	r3, [pc, #456]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4a70      	ldr	r2, [pc, #448]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xcc>
 8002e68:	4a6c      	ldr	r2, [pc, #432]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4a69      	ldr	r2, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e76:	4b69      	ldr	r3, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd fc60 	bl	800074c <HAL_GetTick>
 8002e8c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xee>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fd fc5c 	bl	800074c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e318      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xdc>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fc4c 	bl	800074c <HAL_GetTick>
 8002eb4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x116>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fc48 	bl	800074c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e304      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	4b54      	ldr	r3, [pc, #336]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x104>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80a2 	beq.w	800302c <HAL_RCC_OscConfig+0x278>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ee8:	4b4c      	ldr	r3, [pc, #304]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x158>
 8002ef4:	4b49      	ldr	r3, [pc, #292]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002efc:	2b18      	cmp	r3, #24
 8002efe:	d143      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1d4>
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d13d      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1d4>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_OscConfig+0x170>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e2d7      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f24:	493d      	ldr	r1, [pc, #244]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0219 	bic.w	r2, r3, #25
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fd fc09 	bl	800074c <HAL_GetTick>
 8002f3a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x19c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7fd fc05 	bl	800074c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e2c1      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x18a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	482f      	ldr	r0, [pc, #188]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f86:	e051      	b.n	800302c <HAL_RCC_OscConfig+0x278>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d031      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x240>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f90:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0219 	bic.w	r2, r3, #25
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fd fbd3 	bl	800074c <HAL_GetTick>
 8002fa6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x208>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fd fbcf 	bl	800074c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e28b      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4814      	ldr	r0, [pc, #80]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6919      	ldr	r1, [r3, #16]
 8002fd6:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	6043      	str	r3, [r0, #4]
 8002ff2:	e01b      	b.n	800302c <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_OscConfig+0x268>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fba4 	bl	800074c <HAL_GetTick>
 8003004:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x26c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fd fba0 	bl	800074c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d904      	bls.n	8003020 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e25c      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003020:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ed      	bne.n	8003008 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d07f      	beq.n	8003138 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003038:	4b9a      	ldr	r3, [pc, #616]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003040:	2b08      	cmp	r3, #8
 8003042:	d00b      	beq.n	800305c <HAL_RCC_OscConfig+0x2a8>
 8003044:	4b97      	ldr	r3, [pc, #604]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800304c:	2b18      	cmp	r3, #24
 800304e:	d127      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2ec>
 8003050:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2ec>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800305c:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x2c0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x2c0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e22f      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003074:	488b      	ldr	r0, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003076:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a19      	ldr	r1, [r3, #32]
 8003082:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8003086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800309e:	e04b      	b.n	8003138 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02e      	beq.n	8003106 <HAL_RCC_OscConfig+0x352>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030a8:	4a7e      	ldr	r2, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80030aa:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd fb4a 	bl	800074c <HAL_GetTick>
 80030b8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x31a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030bc:	f7fd fb46 	bl	800074c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e202      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80030ce:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030da:	4872      	ldr	r0, [pc, #456]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80030dc:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a19      	ldr	r1, [r3, #32]
 80030e8:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80030ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	617b      	str	r3, [r7, #20]
  return(result);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	6043      	str	r3, [r0, #4]
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x384>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fd fb1b 	bl	800074c <HAL_GetTick>
 8003116:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x378>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800311a:	f7fd fb17 	bl	800074c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1d3      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800312c:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d036      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314c:	4a55      	ldr	r2, [pc, #340]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800314e:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fd faf8 	bl	800074c <HAL_GetTick>
 800315c:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x3be>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003160:	f7fd faf4 	bl	800074c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1b0      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x3ac>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fd fade 	bl	800074c <HAL_GetTick>
 8003190:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x3f2>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003194:	f7fd fada 	bl	800074c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e196      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x3e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d019      	beq.n	80031fa <HAL_RCC_OscConfig+0x446>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d0:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 80031d2:	f7fd fabb 	bl	800074c <HAL_GetTick>
 80031d6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031da:	f7fd fab7 	bl	800074c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e173      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x426>
 80031f8:	e018      	b.n	800322c <HAL_RCC_OscConfig+0x478>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031fa:	4a2a      	ldr	r2, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003204:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8003206:	f7fd faa1 	bl	800074c <HAL_GetTick>
 800320a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800320e:	f7fd fa9d 	bl	800074c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e159      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003220:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x45a>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8085 	beq.w	8003344 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800323a:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003246:	f7fd fa81 	bl	800074c <HAL_GetTick>
 800324a:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x4ac>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fd fa7d 	bl	800074c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	; 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x4ac>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e139      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x49a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x4ce>
 8003274:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e031      	b.n	80032e6 <HAL_RCC_OscConfig+0x532>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d110      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f8>
 800328a:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <HAL_RCC_OscConfig+0x4f0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	e020      	b.n	80032e6 <HAL_RCC_OscConfig+0x532>
 80032a4:	58024400 	.word	0x58024400
 80032a8:	58024800 	.word	0x58024800
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x51a>
 80032b4:	4a89      	ldr	r2, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
 80032c0:	4a86      	ldr	r2, [pc, #536]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032c2:	4b86      	ldr	r3, [pc, #536]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e00b      	b.n	80032e6 <HAL_RCC_OscConfig+0x532>
 80032ce:	4a83      	ldr	r2, [pc, #524]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032d0:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032dc:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd fa2d 	bl	800074c <HAL_GetTick>
 80032f2:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x558>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fa29 	bl	800074c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0e3      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCC_OscConfig+0x542>
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fd fa17 	bl	800074c <HAL_GetTick>
 800331e:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x584>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd fa13 	bl	800074c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0cd      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x56e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80c2 	beq.w	80034d2 <HAL_RCC_OscConfig+0x71e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003356:	2b18      	cmp	r3, #24
 8003358:	f000 80b9 	beq.w	80034ce <HAL_RCC_OscConfig+0x71a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b02      	cmp	r3, #2
 8003362:	f040 809a 	bne.w	800349a <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4a5d      	ldr	r2, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003368:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd f9eb 	bl	800074c <HAL_GetTick>
 8003376:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x5d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fd f9e7 	bl	800074c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0a3      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338c:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003398:	4850      	ldr	r0, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800339a:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x72c>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	430a      	orrs	r2, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	6283      	str	r3, [r0, #40]	; 0x28
 80033b2:	494a      	ldr	r1, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	3b01      	subs	r3, #1
 80033ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	3b01      	subs	r3, #1
 80033c4:	025b      	lsls	r3, r3, #9
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	3b01      	subs	r3, #1
 80033d0:	041b      	lsls	r3, r3, #16
 80033d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	3b01      	subs	r3, #1
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033e4:	4313      	orrs	r3, r2
 80033e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033e8:	483c      	ldr	r0, [pc, #240]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80033ea:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80033ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_OscConfig+0x730>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80033f6:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80033fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	fa92 f2a2 	rbit	r2, r2
 8003402:	60fa      	str	r2, [r7, #12]
  return(result);
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	fab2 f282 	clz	r2, r2
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	4313      	orrs	r3, r2
 8003410:	6343      	str	r3, [r0, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */ 
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003412:	4932      	ldr	r1, [pc, #200]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f023 020c 	bic.w	r2, r3, #12
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4313      	orrs	r3, r2
 8003422:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003424:	492d      	ldr	r1, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	f023 0202 	bic.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4313      	orrs	r3, r2
 8003434:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003442:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	62d3      	str	r3, [r2, #44]	; 0x2c
 
        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800345a:	4a20      	ldr	r2, [pc, #128]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd f96b 	bl	800074c <HAL_GetTick>
 8003476:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x6d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd f967 	bl	800074c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e023      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x6c6>
 8003498:	e01b      	b.n	80034d2 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd f951 	bl	800074c <HAL_GetTick>
 80034aa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x70c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fd f94d 	bl	800074c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e009      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x728>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x6fa>
 80034cc:	e001      	b.n	80034d2 <HAL_RCC_OscConfig+0x71e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x720>
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3738      	adds	r7, #56	; 0x38
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58024400 	.word	0x58024400
 80034e0:	fffffc0c 	.word	0xfffffc0c
 80034e4:	ffff0007 	.word	0xffff0007

080034e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80034f6:	4b9d      	ldr	r3, [pc, #628]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0207 	and.w	r2, r3, #7
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d210      	bcs.n	8003526 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003504:	4999      	ldr	r1, [pc, #612]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003506:	4b99      	ldr	r3, [pc, #612]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003514:	4b95      	ldr	r3, [pc, #596]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0207 	and.w	r2, r3, #7
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e11d      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
    }

  }
   /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCC_ClockConfig+0x5c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003532:	498f      	ldr	r1, [pc, #572]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003534:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 020f 	bic.w	r2, r3, #15
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	618b      	str	r3, [r1, #24]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8097 	beq.w	8003680 <HAL_RCC_ClockConfig+0x198>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003552:	4987      	ldr	r1, [pc, #540]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003554:	4b86      	ldr	r3, [pc, #536]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4313      	orrs	r3, r2
 8003562:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356c:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d121      	bne.n	80035bc <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0f2      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0xac>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003584:	4b7a      	ldr	r3, [pc, #488]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d115      	bne.n	80035bc <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0e6      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_ClockConfig+0xc4>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800359c:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0da      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0d2      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035bc:	496c      	ldr	r1, [pc, #432]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035be:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f023 0207 	bic.w	r2, r3, #7
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd f8bd 	bl	800074c <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d112      	bne.n	8003602 <HAL_RCC_ClockConfig+0x11a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fd f8b5 	bl	800074c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0b6      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80035f4:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_ClockConfig+0xf6>
 8003600:	e03e      	b.n	8003680 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d112      	bne.n	8003630 <HAL_RCC_ClockConfig+0x148>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x13a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fd f89e 	bl	800074c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x13a>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e09f      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362a:	2b18      	cmp	r3, #24
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_ClockConfig+0x124>
 800362e:	e027      	b.n	8003680 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d11d      	bne.n	8003674 <HAL_RCC_ClockConfig+0x18c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_ClockConfig+0x168>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fd f887 	bl	800074c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0x168>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e088      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003658:	2b08      	cmp	r3, #8
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_ClockConfig+0x152>
 800365c:	e010      	b.n	8003680 <HAL_RCC_ClockConfig+0x198>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365e:	f7fd f875 	bl	800074c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e076      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ee      	bne.n	800365e <HAL_RCC_ClockConfig+0x176>
        }
      }
    }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0207 	and.w	r2, r3, #7
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d910      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x1c8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 0207 	bic.w	r2, r3, #7
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800369e:	4b33      	ldr	r3, [pc, #204]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x1c8>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e058      	b.n	8003762 <HAL_RCC_ClockConfig+0x27a>
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x1e6>
  {
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036bc:	492c      	ldr	r1, [pc, #176]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	618b      	str	r3, [r1, #24]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61cb      	str	r3, [r1, #28]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x222>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036f8:	491d      	ldr	r1, [pc, #116]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61cb      	str	r3, [r1, #28]
  }


  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCC_ClockConfig+0x240>
  {
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003716:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4313      	orrs	r3, r2
 8003726:	620b      	str	r3, [r1, #32]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8003728:	f000 f828 	bl	800377c <HAL_RCC_GetSysClockFreq>
 800372c:	4601      	mov	r1, r0
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	60fb      	str	r3, [r7, #12]
  return(result);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x28c>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	fa21 f303 	lsr.w	r3, r1, r3
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCC_ClockConfig+0x290>)
 8003758:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800375a:	2000      	movs	r0, #0
 800375c:	f7fc ffb2 	bl	80006c4 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	52002000 	.word	0x52002000
 8003770:	58024400 	.word	0x58024400
 8003774:	0800e114 	.word	0x0800e114
 8003778:	20000034 	.word	0x20000034

0800377c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	2301      	movs	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 float fracn1=0, pllvco = 0;
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 uint32_t sysclockfreq = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a6:	4ba8      	ldr	r3, [pc, #672]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	f200 813f 	bhi.w	8003a32 <HAL_RCC_GetSysClockFreq+0x2b6>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_RCC_GetSysClockFreq+0x40>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	08003821 	.word	0x08003821
 80037c0:	08003a33 	.word	0x08003a33
 80037c4:	08003a33 	.word	0x08003a33
 80037c8:	08003a33 	.word	0x08003a33
 80037cc:	08003a33 	.word	0x08003a33
 80037d0:	08003a33 	.word	0x08003a33
 80037d4:	08003a33 	.word	0x08003a33
 80037d8:	08003a33 	.word	0x08003a33
 80037dc:	08003847 	.word	0x08003847
 80037e0:	08003a33 	.word	0x08003a33
 80037e4:	08003a33 	.word	0x08003a33
 80037e8:	08003a33 	.word	0x08003a33
 80037ec:	08003a33 	.word	0x08003a33
 80037f0:	08003a33 	.word	0x08003a33
 80037f4:	08003a33 	.word	0x08003a33
 80037f8:	08003a33 	.word	0x08003a33
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	08003a33 	.word	0x08003a33
 8003804:	08003a33 	.word	0x08003a33
 8003808:	08003a33 	.word	0x08003a33
 800380c:	08003a33 	.word	0x08003a33
 8003810:	08003a33 	.word	0x08003a33
 8003814:	08003a33 	.word	0x08003a33
 8003818:	08003a33 	.word	0x08003a33
 800381c:	08003853 	.word	0x08003853
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003820:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xc4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800382c:	4b86      	ldr	r3, [pc, #536]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	4a85      	ldr	r2, [pc, #532]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }
      
    break;
 800383e:	e0fb      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2bc>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003840:	4b82      	ldr	r3, [pc, #520]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003842:	61bb      	str	r3, [r7, #24]
    break;
 8003844:	e0f8      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003846:	4b82      	ldr	r3, [pc, #520]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	61bb      	str	r3, [r7, #24]
    break;
 800384a:	e0f5      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800384c:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800384e:	61bb      	str	r3, [r7, #24]
    break;
 8003850:	e0f2      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2bc>
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003852:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800385c:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003866:	60fb      	str	r3, [r7, #12]
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003868:	4b77      	ldr	r3, [pc, #476]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003872:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	edc7 7a00 	vstr	s15, [r7]

    switch (pllsource)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d055      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x1c4>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d302      	bcc.n	800389e <HAL_RCC_GetSysClockFreq+0x122>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d072      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x206>
 800389c:	e092      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
    case 0x00:  /* HSI used as PLL clock source */

     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800389e:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d029      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x182>
      {
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038aa:	4b67      	ldr	r3, [pc, #412]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	607b      	str	r3, [r7, #4]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038cc:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038dc:	ed97 6a00 	vldr	s12, [r7]
 80038e0:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2dc>
 80038e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      }
      break;
 80038fc:	e083      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x28a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80038fe:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800390e:	4b4e      	ldr	r3, [pc, #312]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	ed97 6a00 	vldr	s12, [r7]
 8003922:	eddf 5a4d 	vldr	s11, [pc, #308]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393e:	e062      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x01:  /* CSI used as PLL clock source */
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8003940:	4a43      	ldr	r2, [pc, #268]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	ee07 3a90 	vmov	s15, r3
 800394c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003950:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003960:	ed97 6a00 	vldr	s12, [r7]
 8003964:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003980:	e041      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8003982:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a00 	vldr	s12, [r7]
 80039a6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2dc>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	e020      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x28a>

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e4:	ed97 6a00 	vldr	s12, [r7]
 80039e8:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2dc>
 80039ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a04:	bf00      	nop
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	0a5b      	lsrs	r3, r3, #9
 8003a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2a:	ee17 3a90 	vmov	r3, s15
 8003a2e:	61bb      	str	r3, [r7, #24]
    break;
 8003a30:	e002      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2bc>

  default:
    sysclockfreq = CSI_VALUE;
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	61bb      	str	r3, [r7, #24]
    break;
 8003a36:	bf00      	nop
  }

  return sysclockfreq;
 8003a38:	69bb      	ldr	r3, [r7, #24]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	03d09000 	.word	0x03d09000
 8003a50:	003d0900 	.word	0x003d0900
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	46000000 	.word	0x46000000

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8003a62:	f001 fa15 	bl	8004e90 <HAL_RCCEx_GetD1SysClockFreq>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x44>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	2301      	movs	r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x48>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8e:	4a06      	ldr	r2, [pc, #24]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x4c>)
 8003a90:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x4c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	0800e114 	.word	0x0800e114
 8003aa8:	20000038 	.word	0x20000038

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8003ab2:	f7ff ffd3 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	603b      	str	r3, [r7, #0]
  return(result);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	0800e114 	.word	0x0800e114

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8003af6:	f7ff ffb1 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003afa:	4601      	mov	r1, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b08:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	603b      	str	r3, [r7, #0]
  return(result);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	0800e114 	.word	0x0800e114

08003b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03f      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b58:	d013      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d802      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b64:	e01f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b70:	d01c      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b72:	e018      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	4ab1      	ldr	r2, [pc, #708]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b76:	4bb1      	ldr	r3, [pc, #708]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b80:	e015      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f9a9 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b92:	e00c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	2102      	movs	r1, #2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fa3a 	bl	8005014 <RCCEx_PLL3_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ba4:	e003      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bb4:	49a1      	ldr	r1, [pc, #644]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bb6:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003bc8:	7dba      	ldrb	r2, [r7, #22]
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d03f      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d826      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c01 	.word	0x08003c01
 8003bf0:	08003c0f 	.word	0x08003c0f
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c39 	.word	0x08003c39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4a8e      	ldr	r2, [pc, #568]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c02:	4b8e      	ldr	r3, [pc, #568]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e015      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f963 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c1e:	e00c      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f9f4 	bl	8005014 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
      break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c40:	497e      	ldr	r1, [pc, #504]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c42:	4b7e      	ldr	r3, [pc, #504]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	650b      	str	r3, [r1, #80]	; 0x50
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003c54:	7dba      	ldrb	r2, [r7, #22]
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d040      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d01c      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d804      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003c7c:	e01e      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d01f      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c86:	d01e      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003c88:	e018      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8a:	4a6c      	ldr	r2, [pc, #432]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c8c:	4b6b      	ldr	r3, [pc, #428]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c96:	e017      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f91e 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ca8:	e00e      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f9af 	bl	8005014 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cce:	495b      	ldr	r1, [pc, #364]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003ce2:	7dba      	ldrb	r2, [r7, #22]
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d046      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d805      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d10:	d00e      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003d12:	e01f      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003d14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d18:	d01f      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
 8003d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d1e:	d01e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d20:	e018      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e017      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f8d2 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d40:	e00e      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 f963 	bl	8005014 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d52:	e005      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
      break;
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d66:	4935      	ldr	r1, [pc, #212]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d76:	4313      	orrs	r3, r2
 8003d78:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003d7c:	7dba      	ldrb	r2, [r7, #22]
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9a:	d01f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003da0:	d805      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003daa:	d00e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003dac:	e01f      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003dae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003db2:	d01f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db8:	d01e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003dba:	e018      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dc8:	e017      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f885 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dda:	e00e      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 f916 	bl	8005014 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dec:	e005      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e10:	4313      	orrs	r3, r2
 8003e12:	658b      	str	r3, [r1, #88]	; 0x58
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003e16:	7dba      	ldrb	r2, [r7, #22]
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d804      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e3a:	e016      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d015      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4a:	4aae      	ldr	r2, [pc, #696]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4c:	4bad      	ldr	r3, [pc, #692]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e56:	e00e      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x342>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f83e 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e68:	e005      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x342>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8003e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e7c:	49a1      	ldr	r1, [pc, #644]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7e:	4ba1      	ldr	r3, [pc, #644]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003e90:	7dba      	ldrb	r2, [r7, #22]
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d044      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eac:	d01f      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	d805      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d00e      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003ebe:	e01f      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003ec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ec4:	d01f      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eca:	d01e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8003ecc:	e018      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ece:	4a8d      	ldr	r2, [pc, #564]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed0:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003eda:	e017      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fffc 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003eec:	e00e      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f88d 	bl	8005014 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003efe:	e005      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
      break;
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 8003f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f12:	497c      	ldr	r1, [pc, #496]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f14:	4b7b      	ldr	r3, [pc, #492]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	4313      	orrs	r3, r2
 8003f22:	650b      	str	r3, [r1, #80]	; 0x50
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003f26:	7dba      	ldrb	r2, [r7, #22]
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f42:	d01b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x448>
 8003f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f48:	d805      	bhi.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d022      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f54:	e01b      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8003f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f5a:	d01d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f60:	d01c      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f66:	d01b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003f68:	e011      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 ffb5 	bl	8004ee0 <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f7a:	e012      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3324      	adds	r3, #36	; 0x24
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f846 	bl	8005014 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f8c:	e009      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
      break;
 8003f92:	e006      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8003f94:	bf00      	nop
 8003f96:	e004      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8003f98:	bf00      	nop
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8003fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fa8:	4956      	ldr	r1, [pc, #344]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003faa:	4b56      	ldr	r3, [pc, #344]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8003fba:	e003      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003fbc:	7dba      	ldrb	r2, [r7, #22]
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d046      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fda:	d01b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe0:	d805      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d022      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003fec:	e01b      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d01d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff8:	d01c      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003ffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ffe:	d01b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004000:	e011      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ff69 	bl	8004ee0 <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004012:	e012      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fffa 	bl	8005014 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004024:	e009      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
      break;
 800402a:	e006      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 800402c:	bf00      	nop
 800402e:	e004      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8004038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004040:	4930      	ldr	r1, [pc, #192]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004050:	4313      	orrs	r3, r2
 8004052:	658b      	str	r3, [r1, #88]	; 0x58
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004056:	7dba      	ldrb	r2, [r7, #22]
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	4313      	orrs	r3, r2
 800405c:	75bb      	strb	r3, [r7, #22]
  }


#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004072:	d005      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004078:	d009      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d013      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800407e:	e00f      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800408c:	e00c      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x574>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f000 ff23 	bl	8004ee0 <RCCEx_PLL2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800409e:	e003      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
      break;
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      break;
 80040a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040ae:	4915      	ldr	r1, [pc, #84]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040bc:	4313      	orrs	r3, r2
 80040be:	650b      	str	r3, [r1, #80]	; 0x50
 80040c0:	e003      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x596>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80040c2:	7dba      	ldrb	r2, [r7, #22]
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d036      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d81d      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004121 	.word	0x08004121
 80040e8:	080040f5 	.word	0x080040f5
 80040ec:	08004109 	.word	0x08004109
 80040f0:	08004121 	.word	0x08004121
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4a03      	ldr	r2, [pc, #12]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f6:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fee6 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004118:	e003      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004128:	49b0      	ldr	r1, [pc, #704]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800412a:	4bb0      	ldr	r3, [pc, #704]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4313      	orrs	r3, r2
 8004138:	64cb      	str	r3, [r1, #76]	; 0x4c
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800413c:	7dba      	ldrb	r2, [r7, #22]
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	4313      	orrs	r3, r2
 8004142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 808a 	beq.w	8004266 <HAL_RCCEx_PeriphCLKConfig+0x732>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004152:	4aa7      	ldr	r2, [pc, #668]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004154:	4ba6      	ldr	r3, [pc, #664]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800415e:	f7fc faf5 	bl	800074c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004164:	e009      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x646>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fc faf1 	bl	800074c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	; 0x64
 8004172:	d902      	bls.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        ret = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	75fb      	strb	r3, [r7, #23]
        break;
 8004178:	e005      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x652>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800417a:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ef      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x632>
      }
    }

    if(ret == HAL_OK)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d168      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x72a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800418c:	4b97      	ldr	r3, [pc, #604]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800418e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004196:	4053      	eors	r3, r2
 8004198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419c:	2b00      	cmp	r3, #0
 800419e:	d013      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a0:	4b92      	ldr	r3, [pc, #584]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041aa:	4a90      	ldr	r2, [pc, #576]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041ac:	4b8f      	ldr	r3, [pc, #572]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	4a8d      	ldr	r2, [pc, #564]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041b8:	4b8c      	ldr	r3, [pc, #560]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041c2:	4a8a      	ldr	r2, [pc, #552]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d115      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fc faba 	bl	800074c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041da:	e00b      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fc fab6 	bl	800074c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d902      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
          {
            ret = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	75fb      	strb	r3, [r7, #23]
            break;
 80041f2:	e005      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ed      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
          }
        }
      }

      if(ret == HAL_OK)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d126      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x720>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	d10d      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8004216:	4875      	ldr	r0, [pc, #468]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004218:	4b74      	ldr	r3, [pc, #464]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004226:	0919      	lsrs	r1, r3, #4
 8004228:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800422a:	400b      	ands	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	6103      	str	r3, [r0, #16]
 8004230:	e005      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004232:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004234:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800423c:	6113      	str	r3, [r2, #16]
 800423e:	496b      	ldr	r1, [pc, #428]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004240:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800424a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424e:	4313      	orrs	r3, r2
 8004250:	670b      	str	r3, [r1, #112]	; 0x70
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
      else
      {
        /* set overall return value */
        status |= ret;
 8004254:	7dba      	ldrb	r2, [r7, #22]
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	4313      	orrs	r3, r2
 800425a:	75bb      	strb	r3, [r7, #22]
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800425e:	7dba      	ldrb	r2, [r7, #22]
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	4313      	orrs	r3, r2
 8004264:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d07f      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	2b28      	cmp	r3, #40	; 0x28
 8004278:	d866      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	0800434f 	.word	0x0800434f
 8004284:	08004349 	.word	0x08004349
 8004288:	08004349 	.word	0x08004349
 800428c:	08004349 	.word	0x08004349
 8004290:	08004349 	.word	0x08004349
 8004294:	08004349 	.word	0x08004349
 8004298:	08004349 	.word	0x08004349
 800429c:	08004349 	.word	0x08004349
 80042a0:	08004325 	.word	0x08004325
 80042a4:	08004349 	.word	0x08004349
 80042a8:	08004349 	.word	0x08004349
 80042ac:	08004349 	.word	0x08004349
 80042b0:	08004349 	.word	0x08004349
 80042b4:	08004349 	.word	0x08004349
 80042b8:	08004349 	.word	0x08004349
 80042bc:	08004349 	.word	0x08004349
 80042c0:	08004337 	.word	0x08004337
 80042c4:	08004349 	.word	0x08004349
 80042c8:	08004349 	.word	0x08004349
 80042cc:	08004349 	.word	0x08004349
 80042d0:	08004349 	.word	0x08004349
 80042d4:	08004349 	.word	0x08004349
 80042d8:	08004349 	.word	0x08004349
 80042dc:	08004349 	.word	0x08004349
 80042e0:	0800434f 	.word	0x0800434f
 80042e4:	08004349 	.word	0x08004349
 80042e8:	08004349 	.word	0x08004349
 80042ec:	08004349 	.word	0x08004349
 80042f0:	08004349 	.word	0x08004349
 80042f4:	08004349 	.word	0x08004349
 80042f8:	08004349 	.word	0x08004349
 80042fc:	08004349 	.word	0x08004349
 8004300:	0800434f 	.word	0x0800434f
 8004304:	08004349 	.word	0x08004349
 8004308:	08004349 	.word	0x08004349
 800430c:	08004349 	.word	0x08004349
 8004310:	08004349 	.word	0x08004349
 8004314:	08004349 	.word	0x08004349
 8004318:	08004349 	.word	0x08004349
 800431c:	08004349 	.word	0x08004349
 8004320:	0800434f 	.word	0x0800434f
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fdd8 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004334:	e00c      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x81c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2101      	movs	r1, #1
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fe69 	bl	8005014 <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004356:	4925      	ldr	r1, [pc, #148]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	4313      	orrs	r3, r2
 8004366:	654b      	str	r3, [r1, #84]	; 0x54
 8004368:	e003      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800436a:	7dba      	ldrb	r2, [r7, #22]
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	4313      	orrs	r3, r2
 8004370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d040      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	2b05      	cmp	r3, #5
 8004384:	d820      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043cf 	.word	0x080043cf
 8004390:	080043a5 	.word	0x080043a5
 8004394:	080043b7 	.word	0x080043b7
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd98 	bl	8004ee0 <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043b4:	e00c      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x89c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3324      	adds	r3, #36	; 0x24
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fe29 	bl	8005014 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d110      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043d6:	4905      	ldr	r1, [pc, #20]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f023 0207 	bic.w	r2, r3, #7
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	4313      	orrs	r3, r2
 80043e6:	654b      	str	r3, [r1, #84]	; 0x54
 80043e8:	e00a      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	58024800 	.word	0x58024800
 80043f4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80043f8:	7dba      	ldrb	r2, [r7, #22]
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d03b      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	2b05      	cmp	r3, #5
 8004414:	d820      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800445f 	.word	0x0800445f
 8004420:	08004435 	.word	0x08004435
 8004424:	08004447 	.word	0x08004447
 8004428:	0800445f 	.word	0x0800445f
 800442c:	0800445f 	.word	0x0800445f
 8004430:	0800445f 	.word	0x0800445f
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd50 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004444:	e00c      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x92c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3324      	adds	r3, #36	; 0x24
 800444a:	2101      	movs	r1, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fde1 	bl	8005014 <RCCEx_PLL3_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
      break;
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      break;
 800445e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004466:	49b7      	ldr	r1, [pc, #732]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004468:	4bb6      	ldr	r3, [pc, #728]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f023 0207 	bic.w	r2, r3, #7
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4313      	orrs	r3, r2
 8004478:	658b      	str	r3, [r1, #88]	; 0x58
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800447c:	7dba      	ldrb	r2, [r7, #22]
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	4313      	orrs	r3, r2
 8004482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d046      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449a:	d01b      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a0:	d805      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d022      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80044ac:	e01b      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d01d      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b8:	d01c      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 80044ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044be:	d01b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80044c0:	e011      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd09 	bl	8004ee0 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044d2:	e012      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fd9a 	bl	8005014 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044e4:	e009      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	e006      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80044ec:	bf00      	nop
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004500:	4990      	ldr	r1, [pc, #576]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004502:	4b90      	ldr	r3, [pc, #576]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	4313      	orrs	r3, r2
 8004512:	654b      	str	r3, [r1, #84]	; 0x54
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004516:	7dba      	ldrb	r2, [r7, #22]
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	4313      	orrs	r3, r2
 800451c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d046      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004534:	d01b      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453a:	d805      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa14>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa52>
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004546:	e01b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d01d      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xa56>
 800454e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004552:	d01c      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8004554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004558:	d01b      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fcbc 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800456c:	e012      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd4d 	bl	8005014 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8004586:	bf00      	nop
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8004592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459a:	496a      	ldr	r1, [pc, #424]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800459c:	4b69      	ldr	r3, [pc, #420]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045aa:	4313      	orrs	r3, r2
 80045ac:	658b      	str	r3, [r1, #88]	; 0x58
 80045ae:	e003      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80045b0:	7dba      	ldrb	r2, [r7, #22]
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d046      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ce:	d01b      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d4:	d805      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d022      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80045e0:	e01b      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e6:	d01d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80045e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045ec:	d01c      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 80045ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045f2:	d01b      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80045f4:	e011      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xae6>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fc6f 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004606:	e012      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd00 	bl	8005014 <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004618:	e009      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
      break;
 800461e:	e006      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004620:	bf00      	nop
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 800462c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004634:	4943      	ldr	r1, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004636:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004644:	4313      	orrs	r3, r2
 8004646:	658b      	str	r3, [r1, #88]	; 0x58
 8004648:	e003      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800464a:	7dba      	ldrb	r2, [r7, #22]
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	4313      	orrs	r3, r2
 8004650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004668:	d10b      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fccf 	bl	8005014 <RCCEx_PLL3_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	7dbb      	ldrb	r3, [r7, #22]
 800467c:	4313      	orrs	r3, r2
 800467e:	75bb      	strb	r3, [r7, #22]
 8004680:	e009      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004682:	4930      	ldr	r1, [pc, #192]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	4313      	orrs	r3, r2
 8004694:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ac:	d10b      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2102      	movs	r1, #2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fcad 	bl	8005014 <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	7dbb      	ldrb	r3, [r7, #22]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	75bb      	strb	r3, [r7, #22]
 80046c4:	e009      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046c6:	491f      	ldr	r1, [pc, #124]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80046c8:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d6:	4313      	orrs	r3, r2
 80046d8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d034      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d00d      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80046f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f6:	d016      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xbec>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fbec 	bl	8004ee0 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800470c:	e00c      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xbf4>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fc7d 	bl	8005014 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      break;
 8004726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800472e:	4905      	ldr	r1, [pc, #20]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800473e:	4313      	orrs	r3, r2
 8004740:	658b      	str	r3, [r1, #88]	; 0x58
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 8004744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004748:	7dba      	ldrb	r2, [r7, #22]
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	4313      	orrs	r3, r2
 800474e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d031      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004766:	d00c      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476c:	d015      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800476e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004772:	d10f      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004774:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004776:	4b7c      	ldr	r3, [pc, #496]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004780:	e00c      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc68>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fc43 	bl	8005014 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004792:	e003      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      break;
 800479a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a2:	4971      	ldr	r1, [pc, #452]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80047a4:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b2:	4313      	orrs	r3, r2
 80047b4:	654b      	str	r3, [r1, #84]	; 0x54
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80047b8:	7dba      	ldrb	r2, [r7, #22]
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	4313      	orrs	r3, r2
 80047be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02b      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d007      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 80047da:	e00f      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4a62      	ldr	r2, [pc, #392]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80047de:	4b62      	ldr	r3, [pc, #392]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047e8:	e00b      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fb75 	bl	8004ee0 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047fa:	e002      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004808:	4957      	ldr	r1, [pc, #348]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	4313      	orrs	r3, r2
 8004818:	64cb      	str	r3, [r1, #76]	; 0x4c
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800481c:	7dba      	ldrb	r2, [r7, #22]
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	4313      	orrs	r3, r2
 8004822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fbec 	bl	8005014 <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	7dbb      	ldrb	r3, [r7, #22]
 8004842:	4313      	orrs	r3, r2
 8004844:	75bb      	strb	r3, [r7, #22]
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d031      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d00c      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800485c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004860:	d802      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d011      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004866:	e00d      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d00f      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
 800486e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004872:	d00e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
 8004874:	e006      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd50>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004882:	e007      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
      break;
 8004888:	e004      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8004892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800489a:	4933      	ldr	r1, [pc, #204]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800489c:	4b32      	ldr	r3, [pc, #200]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a8:	4313      	orrs	r3, r2
 80048aa:	654b      	str	r3, [r1, #84]	; 0x54
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80048ae:	7dba      	ldrb	r2, [r7, #22]
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c2:	4929      	ldr	r1, [pc, #164]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80048c4:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4313      	orrs	r3, r2
 80048d2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048e0:	4921      	ldr	r1, [pc, #132]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xdde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004900:	4919      	ldr	r1, [pc, #100]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800490e:	4313      	orrs	r3, r2
 8004910:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004928:	6113      	str	r3, [r2, #16]
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	da08      	bge.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	4313      	orrs	r3, r2
 8004952:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004954:	7dbb      	ldrb	r3, [r7, #22]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe2a>
  {
    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
  }
  return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	58024400 	.word	0x58024400

0800496c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8004972:	f7ff f873 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8004976:	4601      	mov	r1, r0
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCCEx_GetD3PCLK1Freq+0x3c>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004980:	2310      	movs	r3, #16
 8004982:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	603b      	str	r3, [r7, #0]
  return(result);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <HAL_RCCEx_GetD3PCLK1Freq+0x40>)
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	fa21 f303 	lsr.w	r3, r1, r3
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400
 80049ac:	0800e114 	.word	0x0800e114

080049b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t  pllsource = 0, pll2m = 1 ,  pll2fracen = 0, hsivalue = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  float fracn2 =0 ,pll2vco = 0;
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d4:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80049de:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	0b1b      	lsrs	r3, r3, #12
 80049e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80049ea:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	613b      	str	r3, [r7, #16]
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80049f4:	4b85      	ldr	r3, [pc, #532]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	08db      	lsrs	r3, r3, #3
 80049fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	edc7 7a02 	vstr	s15, [r7, #8]

  switch (pllsource)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d055      	beq.n	8004ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d302      	bcc.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d072      	beq.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8004a1e:	e092      	b.n	8004b46 <HAL_RCCEx_GetPLL2ClockFreq+0x196>
  {

  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a20:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d029      	beq.n	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a2c:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	08db      	lsrs	r3, r3, #3
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	4a76      	ldr	r2, [pc, #472]	; (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a4e:	4b6f      	ldr	r3, [pc, #444]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    }
    break;
 8004a7e:	e083      	b.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004a80:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a90:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa4:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abc:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004ac0:	e062      	b.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x01:  /* HSI used as PLL clock source */
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004ac2:	4a55      	ldr	r2, [pc, #340]	; (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae6:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004b02:	e041      	b.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004b04:	4a45      	ldr	r2, [pc, #276]	; (8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x26c>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	ee07 3a90 	vmov	s15, r3
 8004b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b28:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004b44:	e020      	b.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004b46:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b56:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004b86:	bf00      	nop
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	0a5b      	lsrs	r3, r3, #9
 8004b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b92:	3301      	adds	r3, #1
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 2a90 	vmov	r2, s15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bba:	3301      	adds	r3, #1
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 2a90 	vmov	r2, s15
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	3301      	adds	r3, #1
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf8:	ee17 2a90 	vmov	r2, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]


}
 8004c00:	bf00      	nop
 8004c02:	3724      	adds	r7, #36	; 0x24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	03d09000 	.word	0x03d09000
 8004c14:	46000000 	.word	0x46000000
 8004c18:	003d0900 	.word	0x003d0900
 8004c1c:	007a1200 	.word	0x007a1200

08004c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
  float fracn3 =0 , pll3vco = 0;
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c44:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	0d1b      	lsrs	r3, r3, #20
 8004c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c58:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004c5a:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	613b      	str	r3, [r7, #16]
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004c64:	4b85      	ldr	r3, [pc, #532]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7c:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d055      	beq.n	8004d32 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d302      	bcc.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d072      	beq.n	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8004c8e:	e092      	b.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
  {
  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c90:	4b7a      	ldr	r3, [pc, #488]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d029      	beq.n	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c9c:	4b77      	ldr	r3, [pc, #476]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	4a76      	ldr	r2, [pc, #472]	; (8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	60fb      	str	r3, [r7, #12]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd2:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    }
    break;
 8004cee:	e083      	b.n	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004cf0:	4a63      	ldr	r2, [pc, #396]	; (8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d00:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d14:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2c:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004d30:	e062      	b.n	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  case 0x01:  /* HSI used as PLL clock source */
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004d32:	4a55      	ldr	r2, [pc, #340]	; (8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d42:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d56:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004d72:	e041      	b.n	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004d74:	4a45      	ldr	r2, [pc, #276]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x26c>)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d84:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d98:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004db4:	e020      	b.n	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004db6:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dda:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004df6:	bf00      	nop
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	0a5b      	lsrs	r3, r3, #9
 8004dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e02:	3301      	adds	r3, #1
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e40:	ee17 2a90 	vmov	r2, s15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e52:	3301      	adds	r3, #1
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]

}
 8004e70:	bf00      	nop
 8004e72:	3724      	adds	r7, #36	; 0x24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	03d09000 	.word	0x03d09000
 8004e84:	46000000 	.word	0x46000000
 8004e88:	003d0900 	.word	0x003d0900
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8004e96:	f7fe fc71 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCCEx_GetD1SysClockFreq+0x44>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ea8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	603b      	str	r3, [r7, #0]
  return(result);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <HAL_RCCEx_GetD1SysClockFreq+0x48>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8004ec4:	4a05      	ldr	r2, [pc, #20]	; (8004edc <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 8004ec6:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	0800e114 	.word	0x0800e114
 8004edc:	20000034 	.word	0x20000034

08004ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eee:	4b48      	ldr	r3, [pc, #288]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d101      	bne.n	8004efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e083      	b.n	8005006 <RCCEx_PLL2_Config+0x126>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004efe:	4a44      	ldr	r2, [pc, #272]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fb fc1f 	bl	800074c <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL2_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f12:	f7fb fc1b 	bl	800074c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e070      	b.n	8005006 <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004f24:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f30:	4937      	ldr	r1, [pc, #220]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f32:	4b37      	ldr	r3, [pc, #220]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	031b      	lsls	r3, r3, #12
 8004f40:	4313      	orrs	r3, r2
 8004f42:	628b      	str	r3, [r1, #40]	; 0x28
 8004f44:	4932      	ldr	r1, [pc, #200]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	025b      	lsls	r3, r3, #9
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	061b      	lsls	r3, r3, #24
 8004f72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f76:	4313      	orrs	r3, r2
 8004f78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f7a:	4925      	ldr	r1, [pc, #148]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f8c:	4920      	ldr	r1, [pc, #128]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	f023 0220 	bic.w	r2, r3, #32
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <RCCEx_PLL2_Config+0xd2>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb0:	e00f      	b.n	8004fd2 <RCCEx_PLL2_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d106      	bne.n	8004fc6 <RCCEx_PLL2_Config+0xe6>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fb8:	4a15      	ldr	r2, [pc, #84]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fc4:	e005      	b.n	8004fd2 <RCCEx_PLL2_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fb fbb5 	bl	800074c <HAL_GetTick>
 8004fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <RCCEx_PLL2_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fe6:	f7fb fbb1 	bl	800074c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <RCCEx_PLL2_Config+0x118>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e006      	b.n	8005006 <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <RCCEx_PLL2_Config+0x130>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <RCCEx_PLL2_Config+0x106>
    }

  }


  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400

08005014 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005022:	4b48      	ldr	r3, [pc, #288]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d101      	bne.n	8005032 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e083      	b.n	800513a <RCCEx_PLL3_Config+0x126>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005032:	4a44      	ldr	r2, [pc, #272]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fb fb85 	bl	800074c <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8005044:	e008      	b.n	8005058 <RCCEx_PLL3_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005046:	f7fb fb81 	bl	800074c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e070      	b.n	800513a <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8005058:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005064:	4937      	ldr	r1, [pc, #220]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	051b      	lsls	r3, r3, #20
 8005074:	4313      	orrs	r3, r2
 8005076:	628b      	str	r3, [r1, #40]	; 0x28
 8005078:	4932      	ldr	r1, [pc, #200]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	3b01      	subs	r3, #1
 800508a:	025b      	lsls	r3, r3, #9
 800508c:	b29b      	uxth	r3, r3
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	3b01      	subs	r3, #1
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050aa:	4313      	orrs	r3, r2
 80050ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050ae:	4925      	ldr	r1, [pc, #148]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050c0:	4920      	ldr	r1, [pc, #128]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <RCCEx_PLL3_Config+0xd2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050d8:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050e4:	e00f      	b.n	8005106 <RCCEx_PLL3_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <RCCEx_PLL3_Config+0xe6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f8:	e005      	b.n	8005106 <RCCEx_PLL3_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005104:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005106:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005112:	f7fb fb1b 	bl	800074c <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8005118:	e008      	b.n	800512c <RCCEx_PLL3_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800511a:	f7fb fb17 	bl	800074c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <RCCEx_PLL3_Config+0x118>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <RCCEx_PLL3_Config+0x130>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <RCCEx_PLL3_Config+0x106>
    }

  }


  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400

08005148 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e01d      	b.n	8005196 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_TIM_Base_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f005 f812 	bl	800a198 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 fd0a 	bl	8005ba0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	68d2      	ldr	r2, [r2, #12]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	8812      	ldrh	r2, [r2, #0]
 80051c0:	b292      	uxth	r2, r2
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	b292      	uxth	r2, r2
 80051c8:	801a      	strh	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01d      	b.n	8005226 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f815 	bl	800522e <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fcc2 	bl	8005ba0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_OC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e01d      	b.n	8005290 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f815 	bl	8005298 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f000 fc8d 	bl	8005ba0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 f8ac 	bl	800641c <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <HAL_TIM_PWM_Start+0x84>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x4a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_TIM_PWM_Start+0x88>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x4a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_TIM_PWM_Start+0x8c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x4a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIM_PWM_Start+0x90>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x4a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIM_PWM_Start+0x94>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_Start+0x4e>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_TIM_PWM_Start+0x50>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800530a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	b292      	uxth	r2, r2
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	b292      	uxth	r2, r2
 8005322:	801a      	strh	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
} 
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40010000 	.word	0x40010000
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f860 	bl	800641c <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <HAL_TIM_PWM_Stop+0xcc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIM_PWM_Stop+0x4a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <HAL_TIM_PWM_Stop+0xd0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIM_PWM_Stop+0x4a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a28      	ldr	r2, [pc, #160]	; (8005418 <HAL_TIM_PWM_Stop+0xd4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIM_PWM_Stop+0x4a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a27      	ldr	r2, [pc, #156]	; (800541c <HAL_TIM_PWM_Stop+0xd8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIM_PWM_Stop+0x4a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <HAL_TIM_PWM_Stop+0xdc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Stop+0x4e>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_TIM_PWM_Stop+0x50>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	f241 1311 	movw	r3, #4369	; 0x1111
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <HAL_TIM_PWM_Stop+0x84>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	f240 4344 	movw	r3, #1092	; 0x444
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_PWM_Stop+0x84>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d111      	bne.n	80053fc <HAL_TIM_PWM_Stop+0xb8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f240 4344 	movw	r3, #1092	; 0x444
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_TIM_PWM_Stop+0xb8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	b292      	uxth	r2, r2
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	b292      	uxth	r2, r2
 80053fa:	801a      	strh	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
} 
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fb7c 	bl	8005b64 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb6e 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb7f 	bl	8005b78 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb52 	bl	8005b64 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fb44 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb55 	bl	8005b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb28 	bl	8005b64 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fb1a 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb2b 	bl	8005b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fafe 	bl	8005b64 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 faf0 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb01 	bl	8005b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0201 	mvn.w	r2, #1
 80055a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f003 f8b8 	bl	8008718 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 f824 	bl	800661c <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d10e      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 f80d 	bl	800661c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d10e      	bne.n	800562e <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d107      	bne.n	800562e <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005626:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 faaf 	bl	8005b8c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d10e      	bne.n	800565a <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b20      	cmp	r3, #32
 8005648:	d107      	bne.n	800565a <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0220 	mvn.w	r2, #32
 8005652:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 ffd7 	bl	8006608 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Process Locked */
  __HAL_LOCK(htim); 
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_OC_ConfigChannel+0x1a>
 800567a:	2302      	movs	r3, #2
 800567c:	e06c      	b.n	8005758 <HAL_TIM_OC_ConfigChannel+0xf4>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  switch (Channel)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b14      	cmp	r3, #20
 8005692:	d857      	bhi.n	8005744 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_TIM_OC_ConfigChannel+0x38>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	080056ff 	.word	0x080056ff
 80056b0:	08005745 	.word	0x08005745
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	0800571b 	.word	0x0800571b
 80056d0:	08005745 	.word	0x08005745
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005729 	.word	0x08005729
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	08005745 	.word	0x08005745
 80056ec:	08005737 	.word	0x08005737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 faf2 	bl	8005ce0 <TIM_OC1_SetConfig>
    }
    break;
 80056fc:	e023      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fb81 	bl	8005e0c <TIM_OC2_SetConfig>
    }
    break;
 800570a:	e01c      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fc0a 	bl	8005f2c <TIM_OC3_SetConfig>
    }
    break;
 8005718:	e015      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fc8f 	bl	8006044 <TIM_OC4_SetConfig>
    }
    break;
 8005726:	e00e      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fcf6 	bl	8006120 <TIM_OC5_SetConfig>
    }
    break;
 8005734:	e007      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fd57 	bl	80061f0 <TIM_OC6_SetConfig>
    }
    break;
 8005742:	e000      	b.n	8005746 <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 8005744:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim); 
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));



  /* Process Locked */
  __HAL_LOCK(htim);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005776:	2302      	movs	r3, #2
 8005778:	e105      	b.n	8005986 <HAL_TIM_PWM_ConfigChannel+0x226>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b14      	cmp	r3, #20
 800578e:	f200 80f0 	bhi.w	8005972 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005973 	.word	0x08005973
 80057a0:	08005973 	.word	0x08005973
 80057a4:	08005973 	.word	0x08005973
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	08005973 	.word	0x08005973
 80057b0:	08005973 	.word	0x08005973
 80057b4:	08005973 	.word	0x08005973
 80057b8:	0800586f 	.word	0x0800586f
 80057bc:	08005973 	.word	0x08005973
 80057c0:	08005973 	.word	0x08005973
 80057c4:	08005973 	.word	0x08005973
 80057c8:	080058af 	.word	0x080058af
 80057cc:	08005973 	.word	0x08005973
 80057d0:	08005973 	.word	0x08005973
 80057d4:	08005973 	.word	0x08005973
 80057d8:	080058f1 	.word	0x080058f1
 80057dc:	08005973 	.word	0x08005973
 80057e0:	08005973 	.word	0x08005973
 80057e4:	08005973 	.word	0x08005973
 80057e8:	08005931 	.word	0x08005931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa74 	bl	8005ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	6992      	ldr	r2, [r2, #24]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	6992      	ldr	r2, [r2, #24]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	6991      	ldr	r1, [r2, #24]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	6912      	ldr	r2, [r2, #16]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
    }
    break;
 800582a:	e0a3      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 faea 	bl	8005e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	6992      	ldr	r2, [r2, #24]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	6992      	ldr	r2, [r2, #24]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	6991      	ldr	r1, [r2, #24]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	6912      	ldr	r2, [r2, #16]
 8005866:	0212      	lsls	r2, r2, #8
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
    }
    break;
 800586c:	e082      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fb59 	bl	8005f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	69d2      	ldr	r2, [r2, #28]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	69d2      	ldr	r2, [r2, #28]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	69d1      	ldr	r1, [r2, #28]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	6912      	ldr	r2, [r2, #16]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
    }
    break;
 80058ac:	e062      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fbc5 	bl	8006044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	69d2      	ldr	r2, [r2, #28]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	69d2      	ldr	r2, [r2, #28]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	69d1      	ldr	r1, [r2, #28]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	6912      	ldr	r2, [r2, #16]
 80058e8:	0212      	lsls	r2, r2, #8
 80058ea:	430a      	orrs	r2, r1
 80058ec:	61da      	str	r2, [r3, #28]
    }
    break;
 80058ee:	e041      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fc12 	bl	8006120 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	6912      	ldr	r2, [r2, #16]
 800592a:	430a      	orrs	r2, r1
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800592e:	e021      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc5a 	bl	80061f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	6912      	ldr	r2, [r2, #16]
 800596a:	0212      	lsls	r2, r2, #8
 800596c:	430a      	orrs	r2, r1
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8005970:	e000      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>

    default:
    break;
 8005972:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop

08005990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_ConfigClockSource+0x1c>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0c8      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x1ae>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4b60      	ldr	r3, [pc, #384]	; (8005b48 <HAL_TIM_ConfigClockSource+0x1b8>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d077      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x144>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d80e      	bhi.n	8005a06 <HAL_TIM_ConfigClockSource+0x76>
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	f000 808a 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x172>
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d802      	bhi.n	80059f8 <HAL_TIM_ConfigClockSource+0x68>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d07e      	beq.n	8005af4 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80059f6:	e099      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	f000 8089 	beq.w	8005b10 <HAL_TIM_ConfigClockSource+0x180>
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	f000 808d 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8005a04:	e092      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8005a06:	2b70      	cmp	r3, #112	; 0x70
 8005a08:	d016      	beq.n	8005a38 <HAL_TIM_ConfigClockSource+0xa8>
 8005a0a:	2b70      	cmp	r3, #112	; 0x70
 8005a0c:	d804      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x88>
 8005a0e:	2b50      	cmp	r3, #80	; 0x50
 8005a10:	d040      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0x104>
 8005a12:	2b60      	cmp	r3, #96	; 0x60
 8005a14:	d04e      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8005a16:	e089      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8005a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x96>
 8005a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a22:	d024      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8005a24:	e082      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6899      	ldr	r1, [r3, #8]
 8005a30:	4b46      	ldr	r3, [pc, #280]	; (8005b4c <HAL_TIM_ConfigClockSource+0x1bc>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	6093      	str	r3, [r2, #8]
    break;
 8005a36:	e079      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6899      	ldr	r1, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f000 fcc6 	bl	80063d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4b3c      	ldr	r3, [pc, #240]	; (8005b48 <HAL_TIM_ConfigClockSource+0x1b8>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
    break;
 8005a6c:	e05e      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f000 fcab 	bl	80063d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a90:	609a      	str	r2, [r3, #8]
    break;
 8005a92:	e04b      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f000 fc0f 	bl	80062c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2150      	movs	r1, #80	; 0x50
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fc71 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005ab2:	e03b      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f000 fc32 	bl	800632a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2160      	movs	r1, #96	; 0x60
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fc61 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005ad2:	e02b      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f000 fbef 	bl	80062c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2140      	movs	r1, #64	; 0x40
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fc51 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005af2:	e01b      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fc4a 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005b00:	e014      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2110      	movs	r1, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fc43 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005b0e:	e00d      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2120      	movs	r1, #32
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fc3c 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005b1c:	e006      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2130      	movs	r1, #48	; 0x30
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fc35 	bl	8006394 <TIM_ITRx_SetConfig>
    break;
 8005b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	ffceff88 	.word	0xffceff88
 8005b4c:	fffefff8 	.word	0xfffefff8

08005b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <TIM_Base_SetConfig+0x120>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0x46>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0x46>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a3e      	ldr	r2, [pc, #248]	; (8005cc4 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0x46>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0x46>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a3c      	ldr	r2, [pc, #240]	; (8005ccc <TIM_Base_SetConfig+0x12c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0x46>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <TIM_Base_SetConfig+0x130>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <TIM_Base_SetConfig+0x120>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01f      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d01b      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <TIM_Base_SetConfig+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d017      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <TIM_Base_SetConfig+0x128>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <TIM_Base_SetConfig+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00f      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <TIM_Base_SetConfig+0x130>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <TIM_Base_SetConfig+0x134>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <TIM_Base_SetConfig+0x138>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xa0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <TIM_Base_SetConfig+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d108      	bne.n	8005c52 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <TIM_Base_SetConfig+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_Base_SetConfig+0x102>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <TIM_Base_SetConfig+0x130>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_Base_SetConfig+0x102>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <TIM_Base_SetConfig+0x134>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_Base_SetConfig+0x102>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <TIM_Base_SetConfig+0x138>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_Base_SetConfig+0x102>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a0f      	ldr	r2, [pc, #60]	; (8005cdc <TIM_Base_SetConfig+0x13c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d104      	bne.n	8005cac <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	615a      	str	r2, [r3, #20]
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <TIM_OC1_SetConfig+0x114>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 0302 	bic.w	r3, r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <TIM_OC1_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC1_SetConfig+0x88>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <TIM_OC1_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC1_SetConfig+0x88>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2b      	ldr	r2, [pc, #172]	; (8005e00 <TIM_OC1_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC1_SetConfig+0x88>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	; (8005e04 <TIM_OC1_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC1_SetConfig+0x88>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <TIM_OC1_SetConfig+0x128>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10c      	bne.n	8005d82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0308 	bic.w	r3, r3, #8
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <TIM_OC1_SetConfig+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_OC1_SetConfig+0xca>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <TIM_OC1_SetConfig+0x11c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_OC1_SetConfig+0xca>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <TIM_OC1_SetConfig+0x120>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_OC1_SetConfig+0xca>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <TIM_OC1_SetConfig+0x124>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC1_SetConfig+0xca>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC1_SetConfig+0x128>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <TIM_OC1_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
} 
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	fffeff8f 	.word	0xfffeff8f
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800

08005e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0210 	bic.w	r2, r3, #16
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <TIM_OC2_SetConfig+0x108>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0320 	bic.w	r3, r3, #32
 8005e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <TIM_OC2_SetConfig+0x10c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC2_SetConfig+0x74>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_OC2_SetConfig+0x110>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10d      	bne.n	8005e9c <TIM_OC2_SetConfig+0x90>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <TIM_OC2_SetConfig+0x10c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <TIM_OC2_SetConfig+0x110>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_OC2_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <TIM_OC2_SetConfig+0x118>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <TIM_OC2_SetConfig+0x11c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d113      	bne.n	8005eec <TIM_OC2_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	feff8fff 	.word	0xfeff8fff
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800

08005f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a27      	ldr	r2, [pc, #156]	; (8006030 <TIM_OC3_SetConfig+0x104>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_OC3_SetConfig+0x72>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <TIM_OC3_SetConfig+0x108>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d10d      	bne.n	8005fba <TIM_OC3_SetConfig+0x8e>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb8:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <TIM_OC3_SetConfig+0x104>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_OC3_SetConfig+0xb6>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <TIM_OC3_SetConfig+0x108>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_OC3_SetConfig+0xb6>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <TIM_OC3_SetConfig+0x10c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_OC3_SetConfig+0xb6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <TIM_OC3_SetConfig+0x110>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC3_SetConfig+0xb6>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <TIM_OC3_SetConfig+0x114>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d113      	bne.n	800600a <TIM_OC3_SetConfig+0xde>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006086:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	031b      	lsls	r3, r3, #12
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <TIM_OC4_SetConfig+0xc8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00f      	beq.n	80060d0 <TIM_OC4_SetConfig+0x8c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a17      	ldr	r2, [pc, #92]	; (8006110 <TIM_OC4_SetConfig+0xcc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00b      	beq.n	80060d0 <TIM_OC4_SetConfig+0x8c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a16      	ldr	r2, [pc, #88]	; (8006114 <TIM_OC4_SetConfig+0xd0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <TIM_OC4_SetConfig+0x8c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <TIM_OC4_SetConfig+0xd4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_OC4_SetConfig+0x8c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a14      	ldr	r2, [pc, #80]	; (800611c <TIM_OC4_SetConfig+0xd8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d109      	bne.n	80060e4 <TIM_OC4_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	019b      	lsls	r3, r3, #6
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800

08006120 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800616c:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a17      	ldr	r2, [pc, #92]	; (80061dc <TIM_OC5_SetConfig+0xbc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_OC5_SetConfig+0x82>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <TIM_OC5_SetConfig+0xc0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_OC5_SetConfig+0x82>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <TIM_OC5_SetConfig+0xc4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC5_SetConfig+0x82>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <TIM_OC5_SetConfig+0xc8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC5_SetConfig+0x82>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <TIM_OC5_SetConfig+0xcc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d109      	bne.n	80061b6 <TIM_OC5_SetConfig+0x96>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800

080061f0 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	051b      	lsls	r3, r3, #20
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <TIM_OC6_SetConfig+0xc0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_OC6_SetConfig+0x84>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <TIM_OC6_SetConfig+0xc4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00b      	beq.n	8006274 <TIM_OC6_SetConfig+0x84>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <TIM_OC6_SetConfig+0xc8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_OC6_SetConfig+0x84>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <TIM_OC6_SetConfig+0xcc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC6_SetConfig+0x84>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <TIM_OC6_SetConfig+0xd0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d109      	bne.n	8006288 <TIM_OC6_SetConfig+0x98>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
} 
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0210 	bic.w	r2, r3, #16
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800636e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <TIM_ITRx_SetConfig+0x40>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	f043 0307 	orr.w	r3, r3, #7
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	ffcfff8f 	.word	0xffcfff8f

080063d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	609a      	str	r2, [r3, #8]
} 
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800642c:	2201      	movs	r2, #1
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	43db      	mvns	r3, r3
 800643e:	401a      	ands	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006478:	2302      	movs	r3, #2
 800647a:	e03d      	b.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1a      	ldr	r2, [pc, #104]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a19      	ldr	r2, [pc, #100]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d108      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
} 
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	40010000 	.word	0x40010000
 8006508:	40010400 	.word	0x40010400

0800650c <HAL_TIMEx_ConfigBreakDeadTime>:
  *          contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006524:	2302      	movs	r3, #2
 8006526:	e065      	b.n	80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a14      	ldr	r2, [pc, #80]	; (8006604 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d115      	bne.n	80065e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	051b      	lsls	r3, r3, #20
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40010000 	.word	0x40010000
 8006604:	40010400 	.word	0x40010400

08006608 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e043      	b.n	80066ca <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f003 ff68 	bl	800a52c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2224      	movs	r2, #36	; 0x24
 8006660:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fab7 	bl	8006be8 <UART_SetConfig>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e022      	b.n	80066ca <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fa59 	bl	8007b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	6852      	ldr	r2, [r2, #4]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	6892      	ldr	r2, [r2, #8]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fae0 	bl	8007c88 <UART_CheckIdleState>
 80066c8:	4603      	mov	r3, r0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b088      	sub	sp, #32
 80066d6:	af02      	add	r7, sp, #8
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d177      	bne.n	80067e2 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_UART_Transmit+0x2c>
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e070      	b.n	80067e4 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_UART_Transmit+0x3e>
 800670c:	2302      	movs	r3, #2
 800670e:	e069      	b.n	80067e4 <HAL_UART_Transmit+0x112>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2221      	movs	r2, #33	; 0x21
 8006722:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006726:	f7fa f811 	bl	800074c <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    huart->TxXferCount = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 800673c:	e034      	b.n	80067a8 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2200      	movs	r2, #0
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f001 fadd 	bl	8007d1a <UART_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e03c      	b.n	80067e4 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d111      	bne.n	8006798 <HAL_UART_Transmit+0xc6>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10d      	bne.n	8006798 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	8812      	ldrh	r2, [r2, #0]
 8006788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800678c:	b292      	uxth	r2, r2
 800678e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3302      	adds	r3, #2
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	e007      	b.n	80067a8 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1c4      	bne.n	800673e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	2140      	movs	r1, #64	; 0x40
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 faab 	bl	8007d1a <UART_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e00a      	b.n	80067e4 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80067e2:	2302      	movs	r3, #2
  }
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	f040 808b 	bne.w	800691e <HAL_UART_Receive_IT+0x132>
  {
    if((pData == NULL ) || (Size == 0U))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Receive_IT+0x28>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e083      	b.n	8006920 <HAL_UART_Receive_IT+0x134>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UART_Receive_IT+0x3a>
 8006822:	2302      	movs	r3, #2
 8006824:	e07c      	b.n	8006920 <HAL_UART_Receive_IT+0x134>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    huart->pRxBuffPtr = pData;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	665a      	str	r2, [r3, #100]	; 0x64
    huart->RxXferSize = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->RxXferCount = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684c:	d10e      	bne.n	800686c <HAL_UART_Receive_IT+0x80>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <HAL_UART_Receive_IT+0x76>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f240 12ff 	movw	r2, #511	; 0x1ff
 800685c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8006860:	e028      	b.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800686a:	e023      	b.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10d      	bne.n	8006890 <HAL_UART_Receive_IT+0xa4>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_UART_Receive_IT+0x9a>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8006884:	e016      	b.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	227f      	movs	r2, #127	; 0x7f
 800688a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800688e:	e011      	b.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006898:	d10c      	bne.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_UART_Receive_IT+0xc0>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	227f      	movs	r2, #127	; 0x7f
 80068a6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80068aa:	e003      	b.n	80068b4 <HAL_UART_Receive_IT+0xc8>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	223f      	movs	r2, #63	; 0x3f
 80068b0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2222      	movs	r2, #34	; 0x22
 80068be:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	6892      	ldr	r2, [r2, #8]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error interupt and RX FIFO Threshold interrupt
       (if FIFO mode is enabled) or Data Register Not Empty interrupt
       (if FIFO mode is disabled).
    */
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d010      	beq.n	800690a <HAL_UART_Receive_IT+0x11e>
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	6892      	ldr	r2, [r2, #8]
 8006902:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	e007      	b.n	800691a <HAL_UART_Receive_IT+0x12e>
    }
    else
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006918:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	e000      	b.n	8006920 <HAL_UART_Receive_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800691e:	2302      	movs	r3, #2
  }
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d112      	bne.n	8006980 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00d      	beq.n	8006980 <HAL_UART_IRQHandler+0x54>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_UART_IRQHandler+0x4c>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_UART_IRQHandler+0x54>
    {
      UART_Receive_IT(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 facc 	bl	8007f16 <UART_Receive_IT>
      return;
 800697e:	e117      	b.n	8006bb0 <HAL_UART_IRQHandler+0x284>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80c4 	beq.w	8006b10 <HAL_UART_IRQHandler+0x1e4>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4b8b      	ldr	r3, [pc, #556]	; (8006bb8 <HAL_UART_IRQHandler+0x28c>)
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <HAL_UART_IRQHandler+0x72>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80b9 	beq.w	8006b10 <HAL_UART_IRQHandler+0x1e4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <HAL_UART_IRQHandler+0x9a>
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_UART_IRQHandler+0x9a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069be:	f043 0201 	orr.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <HAL_UART_IRQHandler+0xc2>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <HAL_UART_IRQHandler+0xc2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2202      	movs	r2, #2
 80069e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <HAL_UART_IRQHandler+0xea>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <HAL_UART_IRQHandler+0xea>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2204      	movs	r2, #4
 8006a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0e:	f043 0202 	orr.w	r2, r3, #2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d018      	beq.n	8006a52 <HAL_UART_IRQHandler+0x126>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_UART_IRQHandler+0x112>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <HAL_UART_IRQHandler+0x112>
             ((cr3its & USART_CR3_EIE) != RESET)) )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0301 	and.w	r3, r3, #1
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2208      	movs	r2, #8
 8006a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a4a:	f043 0208 	orr.w	r2, r3, #8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80a9 	beq.w	8006bae <HAL_UART_IRQHandler+0x282>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_UART_IRQHandler+0x154>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_UART_IRQHandler+0x14e>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_IRQHandler+0x154>
      {
        UART_Receive_IT(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fa4b 	bl	8007f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <HAL_UART_IRQHandler+0x16e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d031      	beq.n	8006afe <HAL_UART_IRQHandler+0x1d2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f987 	bl	8007dae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d023      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006abc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d013      	beq.n	8006aee <HAL_UART_IRQHandler+0x1c2>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aca:	4a3c      	ldr	r2, [pc, #240]	; (8006bbc <HAL_UART_IRQHandler+0x290>)
 8006acc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fb fd9c 	bl	8002610 <HAL_DMA_Abort_IT>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d016      	beq.n	8006b0c <HAL_UART_IRQHandler+0x1e0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	e00e      	b.n	8006b0c <HAL_UART_IRQHandler+0x1e0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f870 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	e00a      	b.n	8006b0c <HAL_UART_IRQHandler+0x1e0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f86c 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	e006      	b.n	8006b0c <HAL_UART_IRQHandler+0x1e0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f868 	bl	8006bd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006b0a:	e050      	b.n	8006bae <HAL_UART_IRQHandler+0x282>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	bf00      	nop
    return;
 8006b0e:	e04e      	b.n	8006bae <HAL_UART_IRQHandler+0x282>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d015      	beq.n	8006b46 <HAL_UART_IRQHandler+0x21a>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_UART_IRQHandler+0x21a>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b2c:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    HAL_UARTEx_WakeupCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fa55 	bl	8007fee <HAL_UARTEx_WakeupCallback>
    return;
 8006b44:	e034      	b.n	8006bb0 <HAL_UART_IRQHandler+0x284>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_UART_IRQHandler+0x240>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <HAL_UART_IRQHandler+0x238>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_UART_IRQHandler+0x240>
  {
    UART_Transmit_IT(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f956 	bl	8007e16 <UART_Transmit_IT>
    return;
 8006b6a:	e021      	b.n	8006bb0 <HAL_UART_IRQHandler+0x284>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <HAL_UART_IRQHandler+0x25c>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_UART_IRQHandler+0x25c>
  {
    UART_EndTransmit_IT(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f9b0 	bl	8007ee6 <UART_EndTransmit_IT>
    return;
 8006b86:	e013      	b.n	8006bb0 <HAL_UART_IRQHandler+0x284>
  }

  /* UART TX FIFO Empty  -----------------------------------------------------*/
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00e      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x284>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x284>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_IRQHandler+0x284>
    return;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	10000001 	.word	0x10000001
 8006bbc:	08007deb 	.word	0x08007deb

08006bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	b095      	sub	sp, #84	; 0x54
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg                     = 0x00000000U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint16_t brrtemp                    = 0x0000U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t usartdiv                   = 0x0000U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4ac0      	ldr	r2, [pc, #768]	; (8006f3c <UART_SetConfig+0x354>)
 8006c3c:	401a      	ands	r2, r3
 8006c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c40:	4313      	orrs	r3, r2
 8006c42:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	6819      	ldr	r1, [r3, #0]
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4bb6      	ldr	r3, [pc, #728]	; (8006f40 <UART_SetConfig+0x358>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d004      	beq.n	8006c74 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	4313      	orrs	r3, r2
 8006c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c7c:	d107      	bne.n	8006c8e <UART_SetConfig+0xa6>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	431a      	orrs	r2, r3
 8006c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4aaa      	ldr	r2, [pc, #680]	; (8006f44 <UART_SetConfig+0x35c>)
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	f023 020f 	bic.w	r2, r3, #15
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	4ba2      	ldr	r3, [pc, #648]	; (8006f48 <UART_SetConfig+0x360>)
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d175      	bne.n	8006dae <UART_SetConfig+0x1c6>
 8006cc2:	4ba2      	ldr	r3, [pc, #648]	; (8006f4c <UART_SetConfig+0x364>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cca:	2b28      	cmp	r3, #40	; 0x28
 8006ccc:	f200 8266 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <UART_SetConfig+0xf0>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006d7d 	.word	0x08006d7d
 8006cdc:	0800719d 	.word	0x0800719d
 8006ce0:	0800719d 	.word	0x0800719d
 8006ce4:	0800719d 	.word	0x0800719d
 8006ce8:	0800719d 	.word	0x0800719d
 8006cec:	0800719d 	.word	0x0800719d
 8006cf0:	0800719d 	.word	0x0800719d
 8006cf4:	0800719d 	.word	0x0800719d
 8006cf8:	08006d85 	.word	0x08006d85
 8006cfc:	0800719d 	.word	0x0800719d
 8006d00:	0800719d 	.word	0x0800719d
 8006d04:	0800719d 	.word	0x0800719d
 8006d08:	0800719d 	.word	0x0800719d
 8006d0c:	0800719d 	.word	0x0800719d
 8006d10:	0800719d 	.word	0x0800719d
 8006d14:	0800719d 	.word	0x0800719d
 8006d18:	08006d8d 	.word	0x08006d8d
 8006d1c:	0800719d 	.word	0x0800719d
 8006d20:	0800719d 	.word	0x0800719d
 8006d24:	0800719d 	.word	0x0800719d
 8006d28:	0800719d 	.word	0x0800719d
 8006d2c:	0800719d 	.word	0x0800719d
 8006d30:	0800719d 	.word	0x0800719d
 8006d34:	0800719d 	.word	0x0800719d
 8006d38:	08006d95 	.word	0x08006d95
 8006d3c:	0800719d 	.word	0x0800719d
 8006d40:	0800719d 	.word	0x0800719d
 8006d44:	0800719d 	.word	0x0800719d
 8006d48:	0800719d 	.word	0x0800719d
 8006d4c:	0800719d 	.word	0x0800719d
 8006d50:	0800719d 	.word	0x0800719d
 8006d54:	0800719d 	.word	0x0800719d
 8006d58:	08006d9d 	.word	0x08006d9d
 8006d5c:	0800719d 	.word	0x0800719d
 8006d60:	0800719d 	.word	0x0800719d
 8006d64:	0800719d 	.word	0x0800719d
 8006d68:	0800719d 	.word	0x0800719d
 8006d6c:	0800719d 	.word	0x0800719d
 8006d70:	0800719d 	.word	0x0800719d
 8006d74:	0800719d 	.word	0x0800719d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006d82:	e20a      	b.n	800719a <UART_SetConfig+0x5b2>
 8006d84:	2304      	movs	r3, #4
 8006d86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006d8a:	e206      	b.n	800719a <UART_SetConfig+0x5b2>
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006d92:	e202      	b.n	800719a <UART_SetConfig+0x5b2>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006d9a:	e1fe      	b.n	800719a <UART_SetConfig+0x5b2>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006da2:	e1fa      	b.n	800719a <UART_SetConfig+0x5b2>
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006daa:	bf00      	nop
 8006dac:	e1f5      	b.n	800719a <UART_SetConfig+0x5b2>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b67      	ldr	r3, [pc, #412]	; (8006f50 <UART_SetConfig+0x368>)
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d12e      	bne.n	8006e16 <UART_SetConfig+0x22e>
 8006db8:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <UART_SetConfig+0x364>)
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	2b05      	cmp	r3, #5
 8006dc2:	f200 81eb 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <UART_SetConfig+0x1e4>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006de5 	.word	0x08006de5
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006df5 	.word	0x08006df5
 8006dd8:	08006dfd 	.word	0x08006dfd
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006e0d 	.word	0x08006e0d
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006dea:	e1d6      	b.n	800719a <UART_SetConfig+0x5b2>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006df2:	e1d2      	b.n	800719a <UART_SetConfig+0x5b2>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006dfa:	e1ce      	b.n	800719a <UART_SetConfig+0x5b2>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e02:	e1ca      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e0a:	e1c6      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e12:	bf00      	nop
 8006e14:	e1c1      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <UART_SetConfig+0x36c>)
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d12e      	bne.n	8006e7e <UART_SetConfig+0x296>
 8006e20:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <UART_SetConfig+0x364>)
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	f200 81b7 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x24c>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e52:	e1a2      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e5a:	e19e      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e62:	e19a      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e6a:	e196      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e72:	e192      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006e7a:	bf00      	nop
 8006e7c:	e18d      	b.n	800719a <UART_SetConfig+0x5b2>
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b35      	ldr	r3, [pc, #212]	; (8006f58 <UART_SetConfig+0x370>)
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d12e      	bne.n	8006ee6 <UART_SetConfig+0x2fe>
 8006e88:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <UART_SetConfig+0x364>)
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	2b05      	cmp	r3, #5
 8006e92:	f200 8183 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006e96:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <UART_SetConfig+0x2b4>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006eb5 	.word	0x08006eb5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006eba:	e16e      	b.n	800719a <UART_SetConfig+0x5b2>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ec2:	e16a      	b.n	800719a <UART_SetConfig+0x5b2>
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006eca:	e166      	b.n	800719a <UART_SetConfig+0x5b2>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ed2:	e162      	b.n	800719a <UART_SetConfig+0x5b2>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006eda:	e15e      	b.n	800719a <UART_SetConfig+0x5b2>
 8006edc:	2320      	movs	r3, #32
 8006ede:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ee2:	bf00      	nop
 8006ee4:	e159      	b.n	800719a <UART_SetConfig+0x5b2>
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <UART_SetConfig+0x374>)
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d140      	bne.n	8006f72 <UART_SetConfig+0x38a>
 8006ef0:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <UART_SetConfig+0x364>)
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	2b05      	cmp	r3, #5
 8006efa:	f200 814f 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x31c>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f1d 	.word	0x08006f1d
 8006f08:	08006f25 	.word	0x08006f25
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f61 	.word	0x08006f61
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f22:	e13a      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f2a:	e136      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f32:	e132      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f3a:	e12e      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f3c:	cfff69f3 	.word	0xcfff69f3
 8006f40:	58000c00 	.word	0x58000c00
 8006f44:	11fff4ff 	.word	0x11fff4ff
 8006f48:	40011000 	.word	0x40011000
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	40004400 	.word	0x40004400
 8006f54:	40004800 	.word	0x40004800
 8006f58:	40004c00 	.word	0x40004c00
 8006f5c:	40005000 	.word	0x40005000
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f66:	e118      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006f6e:	bf00      	nop
 8006f70:	e113      	b.n	800719a <UART_SetConfig+0x5b2>
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4bc5      	ldr	r3, [pc, #788]	; (800728c <UART_SetConfig+0x6a4>)
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d174      	bne.n	8007066 <UART_SetConfig+0x47e>
 8006f7c:	4bc4      	ldr	r3, [pc, #784]	; (8007290 <UART_SetConfig+0x6a8>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f84:	2b28      	cmp	r3, #40	; 0x28
 8006f86:	f200 8109 	bhi.w	800719c <UART_SetConfig+0x5b4>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x3a8>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08007035 	.word	0x08007035
 8006f94:	0800719d 	.word	0x0800719d
 8006f98:	0800719d 	.word	0x0800719d
 8006f9c:	0800719d 	.word	0x0800719d
 8006fa0:	0800719d 	.word	0x0800719d
 8006fa4:	0800719d 	.word	0x0800719d
 8006fa8:	0800719d 	.word	0x0800719d
 8006fac:	0800719d 	.word	0x0800719d
 8006fb0:	0800703d 	.word	0x0800703d
 8006fb4:	0800719d 	.word	0x0800719d
 8006fb8:	0800719d 	.word	0x0800719d
 8006fbc:	0800719d 	.word	0x0800719d
 8006fc0:	0800719d 	.word	0x0800719d
 8006fc4:	0800719d 	.word	0x0800719d
 8006fc8:	0800719d 	.word	0x0800719d
 8006fcc:	0800719d 	.word	0x0800719d
 8006fd0:	08007045 	.word	0x08007045
 8006fd4:	0800719d 	.word	0x0800719d
 8006fd8:	0800719d 	.word	0x0800719d
 8006fdc:	0800719d 	.word	0x0800719d
 8006fe0:	0800719d 	.word	0x0800719d
 8006fe4:	0800719d 	.word	0x0800719d
 8006fe8:	0800719d 	.word	0x0800719d
 8006fec:	0800719d 	.word	0x0800719d
 8006ff0:	0800704d 	.word	0x0800704d
 8006ff4:	0800719d 	.word	0x0800719d
 8006ff8:	0800719d 	.word	0x0800719d
 8006ffc:	0800719d 	.word	0x0800719d
 8007000:	0800719d 	.word	0x0800719d
 8007004:	0800719d 	.word	0x0800719d
 8007008:	0800719d 	.word	0x0800719d
 800700c:	0800719d 	.word	0x0800719d
 8007010:	08007055 	.word	0x08007055
 8007014:	0800719d 	.word	0x0800719d
 8007018:	0800719d 	.word	0x0800719d
 800701c:	0800719d 	.word	0x0800719d
 8007020:	0800719d 	.word	0x0800719d
 8007024:	0800719d 	.word	0x0800719d
 8007028:	0800719d 	.word	0x0800719d
 800702c:	0800719d 	.word	0x0800719d
 8007030:	0800705d 	.word	0x0800705d
 8007034:	2301      	movs	r3, #1
 8007036:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800703a:	e0ae      	b.n	800719a <UART_SetConfig+0x5b2>
 800703c:	2304      	movs	r3, #4
 800703e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007042:	e0aa      	b.n	800719a <UART_SetConfig+0x5b2>
 8007044:	2340      	movs	r3, #64	; 0x40
 8007046:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800704a:	e0a6      	b.n	800719a <UART_SetConfig+0x5b2>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007052:	e0a2      	b.n	800719a <UART_SetConfig+0x5b2>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800705a:	e09e      	b.n	800719a <UART_SetConfig+0x5b2>
 800705c:	2320      	movs	r3, #32
 800705e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007062:	bf00      	nop
 8007064:	e099      	b.n	800719a <UART_SetConfig+0x5b2>
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b8a      	ldr	r3, [pc, #552]	; (8007294 <UART_SetConfig+0x6ac>)
 800706c:	429a      	cmp	r2, r3
 800706e:	d12e      	bne.n	80070ce <UART_SetConfig+0x4e6>
 8007070:	4b87      	ldr	r3, [pc, #540]	; (8007290 <UART_SetConfig+0x6a8>)
 8007072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	2b05      	cmp	r3, #5
 800707a:	f200 808f 	bhi.w	800719c <UART_SetConfig+0x5b4>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x49c>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	0800709d 	.word	0x0800709d
 8007088:	080070a5 	.word	0x080070a5
 800708c:	080070ad 	.word	0x080070ad
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	2300      	movs	r3, #0
 800709e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070a2:	e07a      	b.n	800719a <UART_SetConfig+0x5b2>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070aa:	e076      	b.n	800719a <UART_SetConfig+0x5b2>
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070b2:	e072      	b.n	800719a <UART_SetConfig+0x5b2>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070ba:	e06e      	b.n	800719a <UART_SetConfig+0x5b2>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070c2:	e06a      	b.n	800719a <UART_SetConfig+0x5b2>
 80070c4:	2320      	movs	r3, #32
 80070c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80070ca:	bf00      	nop
 80070cc:	e065      	b.n	800719a <UART_SetConfig+0x5b2>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b71      	ldr	r3, [pc, #452]	; (8007298 <UART_SetConfig+0x6b0>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d12e      	bne.n	8007136 <UART_SetConfig+0x54e>
 80070d8:	4b6d      	ldr	r3, [pc, #436]	; (8007290 <UART_SetConfig+0x6a8>)
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	2b05      	cmp	r3, #5
 80070e2:	d85b      	bhi.n	800719c <UART_SetConfig+0x5b4>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <UART_SetConfig+0x504>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007105 	.word	0x08007105
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	08007125 	.word	0x08007125
 8007100:	0800712d 	.word	0x0800712d
 8007104:	2300      	movs	r3, #0
 8007106:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800710a:	e046      	b.n	800719a <UART_SetConfig+0x5b2>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007112:	e042      	b.n	800719a <UART_SetConfig+0x5b2>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800711a:	e03e      	b.n	800719a <UART_SetConfig+0x5b2>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007122:	e03a      	b.n	800719a <UART_SetConfig+0x5b2>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800712a:	e036      	b.n	800719a <UART_SetConfig+0x5b2>
 800712c:	2320      	movs	r3, #32
 800712e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007132:	bf00      	nop
 8007134:	e031      	b.n	800719a <UART_SetConfig+0x5b2>
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b58      	ldr	r3, [pc, #352]	; (800729c <UART_SetConfig+0x6b4>)
 800713c:	429a      	cmp	r2, r3
 800713e:	d12d      	bne.n	800719c <UART_SetConfig+0x5b4>
 8007140:	4b53      	ldr	r3, [pc, #332]	; (8007290 <UART_SetConfig+0x6a8>)
 8007142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	2b05      	cmp	r3, #5
 800714a:	d827      	bhi.n	800719c <UART_SetConfig+0x5b4>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x56c>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	0800716d 	.word	0x0800716d
 8007158:	08007175 	.word	0x08007175
 800715c:	0800717d 	.word	0x0800717d
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	2302      	movs	r3, #2
 800716e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007172:	e012      	b.n	800719a <UART_SetConfig+0x5b2>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800717a:	e00e      	b.n	800719a <UART_SetConfig+0x5b2>
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007182:	e00a      	b.n	800719a <UART_SetConfig+0x5b2>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800718a:	e006      	b.n	800719a <UART_SetConfig+0x5b2>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007192:	e002      	b.n	800719a <UART_SetConfig+0x5b2>
 8007194:	2320      	movs	r3, #32
 8007196:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800719a:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b3e      	ldr	r3, [pc, #248]	; (800729c <UART_SetConfig+0x6b4>)
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f040 81f4 	bne.w	8007590 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch (clocksource)
 80071ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d021      	beq.n	80071f8 <UART_SetConfig+0x610>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	dc04      	bgt.n	80071c2 <UART_SetConfig+0x5da>
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d009      	beq.n	80071d0 <UART_SetConfig+0x5e8>
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d00b      	beq.n	80071d8 <UART_SetConfig+0x5f0>
 80071c0:	e033      	b.n	800722a <UART_SetConfig+0x642>
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d02d      	beq.n	8007222 <UART_SetConfig+0x63a>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d00e      	beq.n	80071e8 <UART_SetConfig+0x600>
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d026      	beq.n	800721c <UART_SetConfig+0x634>
 80071ce:	e02c      	b.n	800722a <UART_SetConfig+0x642>
    {
    case UART_CLOCKSOURCE_D3PCLK1:
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 80071d0:	f7fd fbcc 	bl	800496c <HAL_RCCEx_GetD3PCLK1Freq>
 80071d4:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 80071d6:	e02c      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fbe7 	bl	80049b0 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 80071e6:	e024      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd fd17 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 80071f6:	e01c      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f8:	4b25      	ldr	r3, [pc, #148]	; (8007290 <UART_SetConfig+0x6a8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <UART_SetConfig+0x62e>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007204:	4b22      	ldr	r3, [pc, #136]	; (8007290 <UART_SetConfig+0x6a8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	f003 0203 	and.w	r2, r3, #3
 800720e:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <UART_SetConfig+0x6b8>)
 8007210:	40d3      	lsrs	r3, r2
 8007212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8007214:	e00d      	b.n	8007232 <UART_SetConfig+0x64a>
        tmpreg = (uint32_t) HSI_VALUE;
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <UART_SetConfig+0x6b8>)
 8007218:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 800721a:	e00a      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_CSI:
      tmpreg =(uint32_t) CSI_VALUE;
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <UART_SetConfig+0x6bc>)
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8007220:	e007      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007226:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8007228:	e003      	b.n	8007232 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007230:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0U)
 8007232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8475 	beq.w	8007b24 <UART_SetConfig+0xf3c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	441a      	add	r2, r3
 8007244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007246:	429a      	cmp	r2, r3
 8007248:	d805      	bhi.n	8007256 <UART_SetConfig+0x66e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	429a      	cmp	r2, r3
 8007254:	d204      	bcs.n	8007260 <UART_SetConfig+0x678>
      {
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800725c:	f000 bc62 	b.w	8007b24 <UART_SetConfig+0xf3c>
      }
      else
      {
        switch (clocksource)
 8007260:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007264:	2b08      	cmp	r3, #8
 8007266:	f000 80bb 	beq.w	80073e0 <UART_SetConfig+0x7f8>
 800726a:	2b08      	cmp	r3, #8
 800726c:	dc04      	bgt.n	8007278 <UART_SetConfig+0x690>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d01a      	beq.n	80072a8 <UART_SetConfig+0x6c0>
 8007272:	2b04      	cmp	r3, #4
 8007274:	d04a      	beq.n	800730c <UART_SetConfig+0x724>
 8007276:	e16d      	b.n	8007554 <UART_SetConfig+0x96c>
 8007278:	2b20      	cmp	r3, #32
 800727a:	f000 8146 	beq.w	800750a <UART_SetConfig+0x922>
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d079      	beq.n	8007376 <UART_SetConfig+0x78e>
 8007282:	2b10      	cmp	r3, #16
 8007284:	f000 8115 	beq.w	80074b2 <UART_SetConfig+0x8ca>
 8007288:	e164      	b.n	8007554 <UART_SetConfig+0x96c>
 800728a:	bf00      	nop
 800728c:	40011400 	.word	0x40011400
 8007290:	58024400 	.word	0x58024400
 8007294:	40007800 	.word	0x40007800
 8007298:	40007c00 	.word	0x40007c00
 800729c:	58000c00 	.word	0x58000c00
 80072a0:	03d09000 	.word	0x03d09000
 80072a4:	003d0900 	.word	0x003d0900
        {
        case UART_CLOCKSOURCE_D3PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80072a8:	f7fd fb60 	bl	800496c <HAL_RCCEx_GetD3PCLK1Freq>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f04f 0100 	mov.w	r1, #0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	4ab1      	ldr	r2, [pc, #708]	; (8007580 <UART_SetConfig+0x998>)
 80072ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f04f 0400 	mov.w	r4, #0
 80072c4:	461a      	mov	r2, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	f7f9 f862 	bl	8000390 <__aeabi_uldivmod>
 80072cc:	4603      	mov	r3, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	0222      	lsls	r2, r4, #8
 80072d2:	61fa      	str	r2, [r7, #28]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	085b      	lsrs	r3, r3, #1
 80072e6:	f04f 0400 	mov.w	r4, #0
 80072ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072ee:	18c0      	adds	r0, r0, r3
 80072f0:	eb41 0104 	adc.w	r1, r1, r4
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f04f 0400 	mov.w	r4, #0
 80072fc:	461a      	mov	r2, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	f7f9 f846 	bl	8000390 <__aeabi_uldivmod>
 8007304:	4603      	mov	r3, r0
 8007306:	460c      	mov	r4, r1
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 800730a:	e127      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL2:
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800730c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fb4d 	bl	80049b0 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	4618      	mov	r0, r3
 800731a:	f04f 0100 	mov.w	r1, #0
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	4a97      	ldr	r2, [pc, #604]	; (8007580 <UART_SetConfig+0x998>)
 8007324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f04f 0400 	mov.w	r4, #0
 800732e:	461a      	mov	r2, r3
 8007330:	4623      	mov	r3, r4
 8007332:	f7f9 f82d 	bl	8000390 <__aeabi_uldivmod>
 8007336:	4603      	mov	r3, r0
 8007338:	460c      	mov	r4, r1
 800733a:	0222      	lsls	r2, r4, #8
 800733c:	617a      	str	r2, [r7, #20]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8007344:	617a      	str	r2, [r7, #20]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	f04f 0400 	mov.w	r4, #0
 8007354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007358:	18c0      	adds	r0, r0, r3
 800735a:	eb41 0104 	adc.w	r1, r1, r4
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f04f 0400 	mov.w	r4, #0
 8007366:	461a      	mov	r2, r3
 8007368:	4623      	mov	r3, r4
 800736a:	f7f9 f811 	bl	8000390 <__aeabi_uldivmod>
 800736e:	4603      	mov	r3, r0
 8007370:	460c      	mov	r4, r1
 8007372:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8007374:	e0f2      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL3:
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fc50 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	4618      	mov	r0, r3
 8007384:	f04f 0100 	mov.w	r1, #0
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	4a7c      	ldr	r2, [pc, #496]	; (8007580 <UART_SetConfig+0x998>)
 800738e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f04f 0400 	mov.w	r4, #0
 8007398:	461a      	mov	r2, r3
 800739a:	4623      	mov	r3, r4
 800739c:	f7f8 fff8 	bl	8000390 <__aeabi_uldivmod>
 80073a0:	4603      	mov	r3, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	0222      	lsls	r2, r4, #8
 80073a6:	60fa      	str	r2, [r7, #12]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80073ae:	60fa      	str	r2, [r7, #12]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	f04f 0400 	mov.w	r4, #0
 80073be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073c2:	18c0      	adds	r0, r0, r3
 80073c4:	eb41 0104 	adc.w	r1, r1, r4
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f04f 0400 	mov.w	r4, #0
 80073d0:	461a      	mov	r2, r3
 80073d2:	4623      	mov	r3, r4
 80073d4:	f7f8 ffdc 	bl	8000390 <__aeabi_uldivmod>
 80073d8:	4603      	mov	r3, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80073de:	e0bd      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_HSI:
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e0:	4b68      	ldr	r3, [pc, #416]	; (8007584 <UART_SetConfig+0x99c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d036      	beq.n	800745a <UART_SetConfig+0x872>
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80073ec:	4b65      	ldr	r3, [pc, #404]	; (8007584 <UART_SetConfig+0x99c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	4a64      	ldr	r2, [pc, #400]	; (8007588 <UART_SetConfig+0x9a0>)
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	4618      	mov	r0, r3
 80073fe:	f04f 0100 	mov.w	r1, #0
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	4a5e      	ldr	r2, [pc, #376]	; (8007580 <UART_SetConfig+0x998>)
 8007408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f04f 0400 	mov.w	r4, #0
 8007412:	461a      	mov	r2, r3
 8007414:	4623      	mov	r3, r4
 8007416:	f7f8 ffbb 	bl	8000390 <__aeabi_uldivmod>
 800741a:	4603      	mov	r3, r0
 800741c:	460c      	mov	r4, r1
 800741e:	0222      	lsls	r2, r4, #8
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	603b      	str	r3, [r7, #0]
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	f04f 0400 	mov.w	r4, #0
 8007438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743c:	18c0      	adds	r0, r0, r3
 800743e:	eb41 0104 	adc.w	r1, r1, r4
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f04f 0400 	mov.w	r4, #0
 800744a:	461a      	mov	r2, r3
 800744c:	4623      	mov	r3, r4
 800744e:	f7f8 ff9f 	bl	8000390 <__aeabi_uldivmod>
 8007452:	4603      	mov	r3, r0
 8007454:	460c      	mov	r4, r1
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          else
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
          }
          break;
 8007458:	e080      	b.n	800755c <UART_SetConfig+0x974>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	4a48      	ldr	r2, [pc, #288]	; (8007580 <UART_SetConfig+0x998>)
 8007460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007464:	b29b      	uxth	r3, r3
 8007466:	f04f 0400 	mov.w	r4, #0
 800746a:	461a      	mov	r2, r3
 800746c:	4623      	mov	r3, r4
 800746e:	4846      	ldr	r0, [pc, #280]	; (8007588 <UART_SetConfig+0x9a0>)
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	f7f8 ff8c 	bl	8000390 <__aeabi_uldivmod>
 8007478:	4603      	mov	r3, r0
 800747a:	460c      	mov	r4, r1
 800747c:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 8007480:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 8007484:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	f04f 0400 	mov.w	r4, #0
 8007492:	eb1a 0003 	adds.w	r0, sl, r3
 8007496:	eb4b 0104 	adc.w	r1, fp, r4
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f04f 0400 	mov.w	r4, #0
 80074a2:	461a      	mov	r2, r3
 80074a4:	4623      	mov	r3, r4
 80074a6:	f7f8 ff73 	bl	8000390 <__aeabi_uldivmod>
 80074aa:	4603      	mov	r3, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80074b0:	e054      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_CSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	4a32      	ldr	r2, [pc, #200]	; (8007580 <UART_SetConfig+0x998>)
 80074b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f04f 0400 	mov.w	r4, #0
 80074c2:	461a      	mov	r2, r3
 80074c4:	4623      	mov	r3, r4
 80074c6:	4831      	ldr	r0, [pc, #196]	; (800758c <UART_SetConfig+0x9a4>)
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	f7f8 ff60 	bl	8000390 <__aeabi_uldivmod>
 80074d0:	4603      	mov	r3, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80074d8:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80074dc:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	f04f 0400 	mov.w	r4, #0
 80074ea:	eb18 0003 	adds.w	r0, r8, r3
 80074ee:	eb49 0104 	adc.w	r1, r9, r4
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f04f 0400 	mov.w	r4, #0
 80074fa:	461a      	mov	r2, r3
 80074fc:	4623      	mov	r3, r4
 80074fe:	f7f8 ff47 	bl	8000390 <__aeabi_uldivmod>
 8007502:	4603      	mov	r3, r0
 8007504:	460c      	mov	r4, r1
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8007508:	e028      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	4a1c      	ldr	r2, [pc, #112]	; (8007580 <UART_SetConfig+0x998>)
 8007510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	b29b      	uxth	r3, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	f04f 0400 	mov.w	r4, #0
 8007524:	0226      	lsls	r6, r4, #8
 8007526:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 800752a:	021d      	lsls	r5, r3, #8
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	f04f 0400 	mov.w	r4, #0
 8007536:	18e8      	adds	r0, r5, r3
 8007538:	eb46 0104 	adc.w	r1, r6, r4
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	461a      	mov	r2, r3
 8007546:	4623      	mov	r3, r4
 8007548:	f7f8 ff22 	bl	8000390 <__aeabi_uldivmod>
 800754c:	4603      	mov	r3, r0
 800754e:	460c      	mov	r4, r1
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8007552:	e003      	b.n	800755c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          break;
 800755a:	bf00      	nop
        }

        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d308      	bcc.n	8007576 <UART_SetConfig+0x98e>
 8007564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756a:	d204      	bcs.n	8007576 <UART_SetConfig+0x98e>
        {
           huart->Instance->BRR = tmpreg;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	e2d6      	b.n	8007b24 <UART_SetConfig+0xf3c>
        }
        else
        {
          ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800757c:	e2d2      	b.n	8007b24 <UART_SetConfig+0xf3c>
 800757e:	bf00      	nop
 8007580:	0800e0fc 	.word	0x0800e0fc
 8007584:	58024400 	.word	0x58024400
 8007588:	03d09000 	.word	0x03d09000
 800758c:	003d0900 	.word	0x003d0900
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007598:	f040 8165 	bne.w	8007866 <UART_SetConfig+0xc7e>
  {
    switch (clocksource)
 800759c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	f200 8144 	bhi.w	800782e <UART_SetConfig+0xc46>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <UART_SetConfig+0x9c4>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080076b1 	.word	0x080076b1
 80075b0:	080076dd 	.word	0x080076dd
 80075b4:	0800782f 	.word	0x0800782f
 80075b8:	0800782f 	.word	0x0800782f
 80075bc:	08007709 	.word	0x08007709
 80075c0:	0800782f 	.word	0x0800782f
 80075c4:	0800782f 	.word	0x0800782f
 80075c8:	0800782f 	.word	0x0800782f
 80075cc:	0800776d 	.word	0x0800776d
 80075d0:	0800782f 	.word	0x0800782f
 80075d4:	0800782f 	.word	0x0800782f
 80075d8:	0800782f 	.word	0x0800782f
 80075dc:	0800782f 	.word	0x0800782f
 80075e0:	0800782f 	.word	0x0800782f
 80075e4:	0800782f 	.word	0x0800782f
 80075e8:	0800782f 	.word	0x0800782f
 80075ec:	080077d9 	.word	0x080077d9
 80075f0:	0800782f 	.word	0x0800782f
 80075f4:	0800782f 	.word	0x0800782f
 80075f8:	0800782f 	.word	0x0800782f
 80075fc:	0800782f 	.word	0x0800782f
 8007600:	0800782f 	.word	0x0800782f
 8007604:	0800782f 	.word	0x0800782f
 8007608:	0800782f 	.word	0x0800782f
 800760c:	0800782f 	.word	0x0800782f
 8007610:	0800782f 	.word	0x0800782f
 8007614:	0800782f 	.word	0x0800782f
 8007618:	0800782f 	.word	0x0800782f
 800761c:	0800782f 	.word	0x0800782f
 8007620:	0800782f 	.word	0x0800782f
 8007624:	0800782f 	.word	0x0800782f
 8007628:	0800782f 	.word	0x0800782f
 800762c:	08007803 	.word	0x08007803
 8007630:	0800782f 	.word	0x0800782f
 8007634:	0800782f 	.word	0x0800782f
 8007638:	0800782f 	.word	0x0800782f
 800763c:	0800782f 	.word	0x0800782f
 8007640:	0800782f 	.word	0x0800782f
 8007644:	0800782f 	.word	0x0800782f
 8007648:	0800782f 	.word	0x0800782f
 800764c:	0800782f 	.word	0x0800782f
 8007650:	0800782f 	.word	0x0800782f
 8007654:	0800782f 	.word	0x0800782f
 8007658:	0800782f 	.word	0x0800782f
 800765c:	0800782f 	.word	0x0800782f
 8007660:	0800782f 	.word	0x0800782f
 8007664:	0800782f 	.word	0x0800782f
 8007668:	0800782f 	.word	0x0800782f
 800766c:	0800782f 	.word	0x0800782f
 8007670:	0800782f 	.word	0x0800782f
 8007674:	0800782f 	.word	0x0800782f
 8007678:	0800782f 	.word	0x0800782f
 800767c:	0800782f 	.word	0x0800782f
 8007680:	0800782f 	.word	0x0800782f
 8007684:	0800782f 	.word	0x0800782f
 8007688:	0800782f 	.word	0x0800782f
 800768c:	0800782f 	.word	0x0800782f
 8007690:	0800782f 	.word	0x0800782f
 8007694:	0800782f 	.word	0x0800782f
 8007698:	0800782f 	.word	0x0800782f
 800769c:	0800782f 	.word	0x0800782f
 80076a0:	0800782f 	.word	0x0800782f
 80076a4:	0800782f 	.word	0x0800782f
 80076a8:	0800782f 	.word	0x0800782f
 80076ac:	0800773b 	.word	0x0800773b
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80076b0:	f7fc f9fc 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 80076b4:	4601      	mov	r1, r0
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	4ac7      	ldr	r2, [pc, #796]	; (80079d8 <UART_SetConfig+0xdf0>)
 80076bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80076c4:	005a      	lsls	r2, r3, #1
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	441a      	add	r2, r3
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80076da:	e0ac      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80076dc:	f7fc fa08 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80076e0:	4601      	mov	r1, r0
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	4abc      	ldr	r2, [pc, #752]	; (80079d8 <UART_SetConfig+0xdf0>)
 80076e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80076f0:	005a      	lsls	r2, r3, #1
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	441a      	add	r2, r3
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007706:	e096      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800770c:	4618      	mov	r0, r3
 800770e:	f7fd f94f 	bl	80049b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007718:	49af      	ldr	r1, [pc, #700]	; (80079d8 <UART_SetConfig+0xdf0>)
 800771a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800771e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007722:	005a      	lsls	r2, r3, #1
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	441a      	add	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007738:	e07d      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800773e:	4618      	mov	r0, r3
 8007740:	f7fd fa6e 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800774a:	49a3      	ldr	r1, [pc, #652]	; (80079d8 <UART_SetConfig+0xdf0>)
 800774c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007750:	fbb3 f3f2 	udiv	r3, r3, r2
 8007754:	005a      	lsls	r2, r3, #1
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	441a      	add	r2, r3
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	fbb2 f3f3 	udiv	r3, r2, r3
 8007766:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 800776a:	e064      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800776c:	4b9b      	ldr	r3, [pc, #620]	; (80079dc <UART_SetConfig+0xdf4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01a      	beq.n	80077ae <UART_SetConfig+0xbc6>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8007778:	4b98      	ldr	r3, [pc, #608]	; (80079dc <UART_SetConfig+0xdf4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	08db      	lsrs	r3, r3, #3
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	4a97      	ldr	r2, [pc, #604]	; (80079e0 <UART_SetConfig+0xdf8>)
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800778c:	4992      	ldr	r1, [pc, #584]	; (80079d8 <UART_SetConfig+0xdf0>)
 800778e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007792:	fbb3 f3f2 	udiv	r3, r3, r2
 8007796:	005a      	lsls	r2, r3, #1
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	441a      	add	r2, r3
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 80077ac:	e043      	b.n	8007836 <UART_SetConfig+0xc4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	4a89      	ldr	r2, [pc, #548]	; (80079d8 <UART_SetConfig+0xdf0>)
 80077b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b89      	ldr	r3, [pc, #548]	; (80079e0 <UART_SetConfig+0xdf8>)
 80077bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c0:	005a      	lsls	r2, r3, #1
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	441a      	add	r2, r3
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80077d6:	e02e      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	4a7e      	ldr	r2, [pc, #504]	; (80079d8 <UART_SetConfig+0xdf0>)
 80077de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <UART_SetConfig+0xdfc>)
 80077e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ea:	005a      	lsls	r2, r3, #1
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	441a      	add	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007800:	e019      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	4a74      	ldr	r2, [pc, #464]	; (80079d8 <UART_SetConfig+0xdf0>)
 8007808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007810:	fbb2 f3f3 	udiv	r3, r2, r3
 8007814:	b29b      	uxth	r3, r3
 8007816:	005a      	lsls	r2, r3, #1
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	441a      	add	r2, r3
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 800782c:	e003      	b.n	8007836 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007834:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8007836:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800783a:	f023 030f 	bic.w	r3, r3, #15
 800783e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007842:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007846:	105b      	asrs	r3, r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	b29a      	uxth	r2, r3
 8007850:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007854:	4313      	orrs	r3, r2
 8007856:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    huart->Instance->BRR = brrtemp;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007862:	60da      	str	r2, [r3, #12]
 8007864:	e15e      	b.n	8007b24 <UART_SetConfig+0xf3c>
  }
  else
  {
    switch (clocksource)
 8007866:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	f200 8156 	bhi.w	8007b1c <UART_SetConfig+0xf34>
 8007870:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <UART_SetConfig+0xc90>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	0800797d 	.word	0x0800797d
 800787c:	080079ab 	.word	0x080079ab
 8007880:	08007b1d 	.word	0x08007b1d
 8007884:	08007b1d 	.word	0x08007b1d
 8007888:	080079e9 	.word	0x080079e9
 800788c:	08007b1d 	.word	0x08007b1d
 8007890:	08007b1d 	.word	0x08007b1d
 8007894:	08007b1d 	.word	0x08007b1d
 8007898:	08007a51 	.word	0x08007a51
 800789c:	08007b1d 	.word	0x08007b1d
 80078a0:	08007b1d 	.word	0x08007b1d
 80078a4:	08007b1d 	.word	0x08007b1d
 80078a8:	08007b1d 	.word	0x08007b1d
 80078ac:	08007b1d 	.word	0x08007b1d
 80078b0:	08007b1d 	.word	0x08007b1d
 80078b4:	08007b1d 	.word	0x08007b1d
 80078b8:	08007ac1 	.word	0x08007ac1
 80078bc:	08007b1d 	.word	0x08007b1d
 80078c0:	08007b1d 	.word	0x08007b1d
 80078c4:	08007b1d 	.word	0x08007b1d
 80078c8:	08007b1d 	.word	0x08007b1d
 80078cc:	08007b1d 	.word	0x08007b1d
 80078d0:	08007b1d 	.word	0x08007b1d
 80078d4:	08007b1d 	.word	0x08007b1d
 80078d8:	08007b1d 	.word	0x08007b1d
 80078dc:	08007b1d 	.word	0x08007b1d
 80078e0:	08007b1d 	.word	0x08007b1d
 80078e4:	08007b1d 	.word	0x08007b1d
 80078e8:	08007b1d 	.word	0x08007b1d
 80078ec:	08007b1d 	.word	0x08007b1d
 80078f0:	08007b1d 	.word	0x08007b1d
 80078f4:	08007b1d 	.word	0x08007b1d
 80078f8:	08007aed 	.word	0x08007aed
 80078fc:	08007b1d 	.word	0x08007b1d
 8007900:	08007b1d 	.word	0x08007b1d
 8007904:	08007b1d 	.word	0x08007b1d
 8007908:	08007b1d 	.word	0x08007b1d
 800790c:	08007b1d 	.word	0x08007b1d
 8007910:	08007b1d 	.word	0x08007b1d
 8007914:	08007b1d 	.word	0x08007b1d
 8007918:	08007b1d 	.word	0x08007b1d
 800791c:	08007b1d 	.word	0x08007b1d
 8007920:	08007b1d 	.word	0x08007b1d
 8007924:	08007b1d 	.word	0x08007b1d
 8007928:	08007b1d 	.word	0x08007b1d
 800792c:	08007b1d 	.word	0x08007b1d
 8007930:	08007b1d 	.word	0x08007b1d
 8007934:	08007b1d 	.word	0x08007b1d
 8007938:	08007b1d 	.word	0x08007b1d
 800793c:	08007b1d 	.word	0x08007b1d
 8007940:	08007b1d 	.word	0x08007b1d
 8007944:	08007b1d 	.word	0x08007b1d
 8007948:	08007b1d 	.word	0x08007b1d
 800794c:	08007b1d 	.word	0x08007b1d
 8007950:	08007b1d 	.word	0x08007b1d
 8007954:	08007b1d 	.word	0x08007b1d
 8007958:	08007b1d 	.word	0x08007b1d
 800795c:	08007b1d 	.word	0x08007b1d
 8007960:	08007b1d 	.word	0x08007b1d
 8007964:	08007b1d 	.word	0x08007b1d
 8007968:	08007b1d 	.word	0x08007b1d
 800796c:	08007b1d 	.word	0x08007b1d
 8007970:	08007b1d 	.word	0x08007b1d
 8007974:	08007b1d 	.word	0x08007b1d
 8007978:	08007a1d 	.word	0x08007a1d
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	681c      	ldr	r4, [r3, #0]
 8007980:	f7fc f894 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8007984:	4601      	mov	r1, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	4a13      	ldr	r2, [pc, #76]	; (80079d8 <UART_SetConfig+0xdf0>)
 800798c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007990:	fbb1 f2f3 	udiv	r2, r1, r3
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	441a      	add	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	60e3      	str	r3, [r4, #12]
      break;
 80079a8:	e0bc      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_D2PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681c      	ldr	r4, [r3, #0]
 80079ae:	f7fc f89f 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80079b2:	4601      	mov	r1, r0
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	4a07      	ldr	r2, [pc, #28]	; (80079d8 <UART_SetConfig+0xdf0>)
 80079ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079be:	fbb1 f2f3 	udiv	r2, r1, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	441a      	add	r2, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	60e3      	str	r3, [r4, #12]
      break;
 80079d6:	e0a5      	b.n	8007b24 <UART_SetConfig+0xf3c>
 80079d8:	0800e0fc 	.word	0x0800e0fc
 80079dc:	58024400 	.word	0x58024400
 80079e0:	03d09000 	.word	0x03d09000
 80079e4:	003d0900 	.word	0x003d0900
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fc ffdf 	bl	80049b0 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80079fc:	484d      	ldr	r0, [pc, #308]	; (8007b34 <UART_SetConfig+0xf4c>)
 80079fe:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8007a02:	fbb2 f1f1 	udiv	r1, r2, r1
 8007a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a08:	6852      	ldr	r2, [r2, #4]
 8007a0a:	0852      	lsrs	r2, r2, #1
 8007a0c:	4411      	add	r1, r2
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6852      	ldr	r2, [r2, #4]
 8007a12:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a16:	b292      	uxth	r2, r2
 8007a18:	60da      	str	r2, [r3, #12]
      break;
 8007a1a:	e083      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fd f8fd 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a2e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007a30:	4840      	ldr	r0, [pc, #256]	; (8007b34 <UART_SetConfig+0xf4c>)
 8007a32:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8007a36:	fbb2 f1f1 	udiv	r1, r2, r1
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	6852      	ldr	r2, [r2, #4]
 8007a3e:	0852      	lsrs	r2, r2, #1
 8007a40:	4411      	add	r1, r2
 8007a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	60da      	str	r2, [r3, #12]
      break;
 8007a4e:	e069      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a50:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <UART_SetConfig+0xf50>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01b      	beq.n	8007a94 <UART_SetConfig+0xeac>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a35      	ldr	r2, [pc, #212]	; (8007b38 <UART_SetConfig+0xf50>)
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	08d2      	lsrs	r2, r2, #3
 8007a66:	f002 0203 	and.w	r2, r2, #3
 8007a6a:	4934      	ldr	r1, [pc, #208]	; (8007b3c <UART_SetConfig+0xf54>)
 8007a6c:	fa21 f202 	lsr.w	r2, r1, r2
 8007a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a72:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007a74:	482f      	ldr	r0, [pc, #188]	; (8007b34 <UART_SetConfig+0xf4c>)
 8007a76:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8007a7a:	fbb2 f1f1 	udiv	r1, r2, r1
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a80:	6852      	ldr	r2, [r2, #4]
 8007a82:	0852      	lsrs	r2, r2, #1
 8007a84:	4411      	add	r1, r2
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	6852      	ldr	r2, [r2, #4]
 8007a8a:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	60da      	str	r2, [r3, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 8007a92:	e047      	b.n	8007b24 <UART_SetConfig+0xf3c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a9c:	4925      	ldr	r1, [pc, #148]	; (8007b34 <UART_SetConfig+0xf4c>)
 8007a9e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <UART_SetConfig+0xf54>)
 8007aa6:	fbb2 f1f1 	udiv	r1, r2, r1
 8007aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aac:	6852      	ldr	r2, [r2, #4]
 8007aae:	0852      	lsrs	r2, r2, #1
 8007ab0:	4411      	add	r1, r2
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	6852      	ldr	r2, [r2, #4]
 8007ab6:	fbb1 f2f2 	udiv	r2, r1, r2
 8007aba:	b292      	uxth	r2, r2
 8007abc:	60da      	str	r2, [r3, #12]
      break;
 8007abe:	e031      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_CSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ac8:	491a      	ldr	r1, [pc, #104]	; (8007b34 <UART_SetConfig+0xf4c>)
 8007aca:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <UART_SetConfig+0xf58>)
 8007ad2:	fbb2 f1f1 	udiv	r1, r2, r1
 8007ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad8:	6852      	ldr	r2, [r2, #4]
 8007ada:	0852      	lsrs	r2, r2, #1
 8007adc:	4411      	add	r1, r2
 8007ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae0:	6852      	ldr	r2, [r2, #4]
 8007ae2:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	60da      	str	r2, [r3, #12]
      break;
 8007aea:	e01b      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007af4:	490f      	ldr	r1, [pc, #60]	; (8007b34 <UART_SetConfig+0xf4c>)
 8007af6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afe:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b02:	b292      	uxth	r2, r2
 8007b04:	4611      	mov	r1, r2
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	0852      	lsrs	r2, r2, #1
 8007b0c:	4411      	add	r1, r2
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b10:	6852      	ldr	r2, [r2, #4]
 8007b12:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b16:	b292      	uxth	r2, r2
 8007b18:	60da      	str	r2, [r3, #12]
      break;
 8007b1a:	e003      	b.n	8007b24 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b22:	bf00      	nop
    }
  }

  return ret;
 8007b24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3754      	adds	r7, #84	; 0x54
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	bf00      	nop
 8007b34:	0800e0fc 	.word	0x0800e0fc
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	003d0900 	.word	0x003d0900

08007b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	6852      	ldr	r2, [r2, #4]
 8007b62:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	6852      	ldr	r2, [r2, #4]
 8007b84:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6852      	ldr	r2, [r2, #4]
 8007bc8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	6892      	ldr	r2, [r2, #8]
 8007c0c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01a      	beq.n	8007c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	6852      	ldr	r2, [r2, #4]
 8007c2e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c36:	430a      	orrs	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c42:	d10a      	bne.n	8007c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	6852      	ldr	r2, [r2, #4]
 8007c4e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	6852      	ldr	r2, [r2, #4]
 8007c70:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	605a      	str	r2, [r3, #4]
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007c9a:	f7f8 fd57 	bl	800074c <HAL_GetTick>
 8007c9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d10e      	bne.n	8007ccc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f82c 	bl	8007d1a <UART_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e022      	b.n	8007d12 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d10e      	bne.n	8007cf8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f816 	bl	8007d1a <UART_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e00c      	b.n	8007d12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2a:	e02c      	b.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d028      	beq.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d3a:	f7f8 fd07 	bl	800074c <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1ad2      	subs	r2, r2, r3
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d91d      	bls.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	6812      	ldr	r2, [r2, #0]
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	6892      	ldr	r2, [r2, #8]
 8007d64:	f022 0201 	bic.w	r2, r2, #1
 8007d68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e00f      	b.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	401a      	ands	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	bf0c      	ite	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	2300      	movne	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d0c3      	beq.n	8007d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	6892      	ldr	r2, [r2, #8]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->TxXferCount = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  HAL_UART_ErrorCallback(huart);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7fe fee3 	bl	8006bd4 <HAL_UART_ErrorCallback>
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b21      	cmp	r3, #33	; 0x21
 8007e28:	d156      	bne.n	8007ed8 <UART_Transmit_IT+0xc2>
  {
    if(huart->TxXferCount == 0U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d121      	bne.n	8007e7a <UART_Transmit_IT+0x64>
    {
      /* Disable the TX FIFO threshold interrupt (if FIFO mode is enabled) or
         Transmit Data Register Empty interrupt (if FIFO mode is Disabled).
      */
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <UART_Transmit_IT+0x40>
      {
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	6892      	ldr	r2, [r2, #8]
 8007e4e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	e007      	b.n	8007e66 <UART_Transmit_IT+0x50>
      }
      else
      {
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6812      	ldr	r2, [r2, #0]
 8007e5e:	6812      	ldr	r2, [r2, #0]
 8007e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e64:	601a      	str	r2, [r3, #0]
      }

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e74:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e02f      	b.n	8007eda <UART_Transmit_IT+0xc4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e82:	d114      	bne.n	8007eae <UART_Transmit_IT+0x98>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d110      	bne.n	8007eae <UART_Transmit_IT+0x98>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	8812      	ldrh	r2, [r2, #0]
 8007e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	65da      	str	r2, [r3, #92]	; 0x5c
 8007eac:	e009      	b.n	8007ec2 <UART_Transmit_IT+0xac>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb6:	1c58      	adds	r0, r3, #1
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	65c8      	str	r0, [r1, #92]	; 0x5c
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

      return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e000      	b.n	8007eda <UART_Transmit_IT+0xc4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ed8:	2302      	movs	r3, #2
  }
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  HAL_UART_TxCpltCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fe fe5a 	bl	8006bc0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8007f24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b22      	cmp	r3, #34	; 0x22
 8007f30:	d14e      	bne.n	8007fd0 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f38:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f42:	d112      	bne.n	8007f6a <UART_Receive_IT+0x54>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f50:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f52:	89ba      	ldrh	r2, [r7, #12]
 8007f54:	89fb      	ldrh	r3, [r7, #14]
 8007f56:	4013      	ands	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f62:	1c9a      	adds	r2, r3, #2
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	665a      	str	r2, [r3, #100]	; 0x64
 8007f68:	e00b      	b.n	8007f82 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6e:	1c59      	adds	r1, r3, #1
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6651      	str	r1, [r2, #100]	; 0x64
 8007f74:	89ba      	ldrh	r2, [r7, #12]
 8007f76:	b2d1      	uxtb	r1, r2
 8007f78:	89fa      	ldrh	r2, [r7, #14]
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	400a      	ands	r2, r1
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d118      	bne.n	8007fcc <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6812      	ldr	r2, [r2, #0]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	6892      	ldr	r2, [r2, #8]
 8007fb4:	f022 0201 	bic.w	r2, r2, #1
 8007fb8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

      HAL_UART_RxCpltCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 ff88 	bl	8009ed8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e00c      	b.n	8007fe6 <UART_Receive_IT+0xd0>
    }

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e00a      	b.n	8007fe6 <UART_Receive_IT+0xd0>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	8b12      	ldrh	r2, [r2, #24]
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	f042 0208 	orr.w	r2, r2, #8
 8007fe0:	b292      	uxth	r2, r2
 8007fe2:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008004:	b084      	sub	sp, #16
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	f107 0014 	add.w	r0, r7, #20
 8008012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	2b01      	cmp	r3, #1
 800801a:	d11e      	bne.n	800805a <USB_CoreInit+0x56>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <USB_CoreInit+0xa0>)
 800802e:	4013      	ands	r3, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8008040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008042:	2b01      	cmp	r3, #1
 8008044:	d105      	bne.n	8008052 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa16 	bl	8008484 <USB_CoreReset>
 8008058:	e00c      	b.n	8008074 <USB_CoreInit+0x70>
  }
  else /* FS interface (embedded Phy) */
  {
    
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa0c 	bl	8008484 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10b      	bne.n	8008092 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f043 020c 	orr.w	r2, r3, #12
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f043 0220 	orr.w	r2, r3, #32
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800809e:	b004      	add	sp, #16
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	ffbdffbf 	.word	0xffbdffbf

080080a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f023 0201 	bic.w	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d106      	bne.n	80080f6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]
 80080f4:	e008      	b.n	8008108 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8008108:	2032      	movs	r0, #50	; 0x32
 800810a:	f7f8 fb2b 	bl	8000764 <HAL_Delay>
  
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008118:	b084      	sub	sp, #16
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	f107 001c 	add.w	r0, r7, #28
 8008126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 800813a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813c:	2b00      	cmp	r3, #0
 800813e:	d111      	bne.n	8008164 <USB_DevInit+0x4c>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816a:	461a      	mov	r2, r3
 800816c:	2300      	movs	r3, #0
 800816e:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10c      	bne.n	80081a2 <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d104      	bne.n	8008198 <USB_DevInit+0x80>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f947 	bl	8008424 <USB_SetDevSpeed>
 8008196:	e008      	b.n	80081aa <USB_DevInit+0x92>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8008198:	2101      	movs	r1, #1
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f942 	bl	8008424 <USB_SetDevSpeed>
 80081a0:	e003      	b.n	80081aa <USB_DevInit+0x92>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80081a2:	2103      	movs	r1, #3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f93d 	bl	8008424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80081aa:	2110      	movs	r1, #16
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8f1 	bl	8008394 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f914 	bl	80083e0 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	461a      	mov	r2, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	461a      	mov	r2, r3
 80081d8:	f04f 33ff 	mov.w	r3, #4294967295
 80081dc:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e4:	461a      	mov	r2, r3
 80081e6:	2300      	movs	r3, #0
 80081e8:	61d3      	str	r3, [r2, #28]
  
  for (i = 0; i < cfg.dev_endpoints; i++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e034      	b.n	800825a <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008206:	d10a      	bne.n	800821e <USB_DevInit+0x106>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	461a      	mov	r2, r3
 8008216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	e008      	b.n	8008230 <USB_DevInit+0x118>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822a:	461a      	mov	r2, r3
 800822c:	2300      	movs	r3, #0
 800822e:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	461a      	mov	r2, r3
 800823e:	2300      	movs	r3, #0
 8008240:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	461a      	mov	r2, r3
 8008250:	23ff      	movs	r3, #255	; 0xff
 8008252:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3301      	adds	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d8c6      	bhi.n	80081f0 <USB_DevInit+0xd8>
  }
  
  for (i = 0; i < cfg.dev_endpoints; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e034      	b.n	80082d2 <USB_DevInit+0x1ba>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800827a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827e:	d10a      	bne.n	8008296 <USB_DevInit+0x17e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	461a      	mov	r2, r3
 800828e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	e008      	b.n	80082a8 <USB_DevInit+0x190>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	461a      	mov	r2, r3
 80082a4:	2300      	movs	r3, #0
 80082a6:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b4:	461a      	mov	r2, r3
 80082b6:	2300      	movs	r3, #0
 80082b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	23ff      	movs	r3, #255	; 0xff
 80082ca:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d8c6      	bhi.n	8008268 <USB_DevInit+0x150>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e0:	461a      	mov	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082ee:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1)
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d115      	bne.n	8008322 <USB_DevInit+0x20a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fc:	461a      	mov	r2, r3
 80082fe:	4b21      	ldr	r3, [pc, #132]	; (8008384 <USB_DevInit+0x26c>)
 8008300:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	4619      	mov	r1, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008312:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <USB_DevInit+0x270>)
 8008314:	4313      	orrs	r3, r2
 8008316:	630b      	str	r3, [r1, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008320:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800832e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <USB_DevInit+0x22a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f043 0210 	orr.w	r2, r3, #16
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <USB_DevInit+0x274>)
 8008348:	4313      	orrs	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <USB_DevInit+0x248>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f043 0208 	orr.w	r2, r3, #8
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8008360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008362:	2b01      	cmp	r3, #1
 8008364:	d105      	bne.n	8008372 <USB_DevInit+0x25a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <USB_DevInit+0x278>)
 800836c:	4313      	orrs	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800837e:	b004      	add	sp, #16
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	02000400 	.word	0x02000400
 8008388:	08010003 	.word	0x08010003
 800838c:	803c3800 	.word	0x803c3800
 8008390:	40000004 	.word	0x40000004

08008394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	f043 0220 	orr.w	r2, r3, #32
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <USB_FlushTxFifo+0x48>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d901      	bls.n	80083c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e006      	b.n	80083ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d0f0      	beq.n	80083ae <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	00030d40 	.word	0x00030d40

080083e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2210      	movs	r2, #16
 80083f0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <USB_FlushRxFifo+0x40>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e006      	b.n	8008412 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b10      	cmp	r3, #16
 800840e:	d0f0      	beq.n	80083f2 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	00030d40 	.word	0x00030d40

08008424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	4619      	mov	r1, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	4313      	orrs	r3, r2
 8008444:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008472:	2003      	movs	r0, #3
 8008474:	f7f8 f976 	bl	8000764 <HAL_Delay>
  
  return HAL_OK;  
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3301      	adds	r3, #1
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <USB_CoreReset+0x64>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e01b      	b.n	80084da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	daf2      	bge.n	8008490 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f043 0201 	orr.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <USB_CoreReset+0x64>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d901      	bls.n	80084cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e006      	b.n	80084da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d0f0      	beq.n	80084ba <USB_CoreReset+0x36>
  
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	00030d40 	.word	0x00030d40

080084ec <CalculateValues>:
static void SendValues(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CalculateValues(void){
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
	LOAD_VOLTAGE = (((ADC_float[2]*ScaleFactor)+offset)*mVoltsPerBit);
 80084f0:	4b29      	ldr	r3, [pc, #164]	; (8008598 <CalculateValues+0xac>)
 80084f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80084f6:	4b29      	ldr	r3, [pc, #164]	; (800859c <CalculateValues+0xb0>)
 80084f8:	edd3 7a00 	vldr	s15, [r3]
 80084fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <CalculateValues+0xb4>)
 8008502:	edd3 7a00 	vldr	s15, [r3]
 8008506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800850a:	4b26      	ldr	r3, [pc, #152]	; (80085a4 <CalculateValues+0xb8>)
 800850c:	edd3 7a00 	vldr	s15, [r3]
 8008510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <CalculateValues+0xbc>)
 8008516:	edc3 7a00 	vstr	s15, [r3]
	if (Calibrating == 1){return;}
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <CalculateValues+0xc0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d037      	beq.n	8008592 <CalculateValues+0xa6>
	LOAD_CURRENT = (((ADC_float[0]*ScaleFactor)+offset)*mAmpsPerBit);
 8008522:	4b1d      	ldr	r3, [pc, #116]	; (8008598 <CalculateValues+0xac>)
 8008524:	ed93 7a00 	vldr	s14, [r3]
 8008528:	4b1c      	ldr	r3, [pc, #112]	; (800859c <CalculateValues+0xb0>)
 800852a:	edd3 7a00 	vldr	s15, [r3]
 800852e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008532:	4b1b      	ldr	r3, [pc, #108]	; (80085a0 <CalculateValues+0xb4>)
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800853c:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <CalculateValues+0xc4>)
 800853e:	edd3 7a00 	vldr	s15, [r3]
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <CalculateValues+0xc8>)
 8008548:	edc3 7a00 	vstr	s15, [r3]
	TEMPERATURE = (((ADC_float[1]*ScaleFactor)+offset)*DegsPerBit);
 800854c:	4b12      	ldr	r3, [pc, #72]	; (8008598 <CalculateValues+0xac>)
 800854e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008552:	4b12      	ldr	r3, [pc, #72]	; (800859c <CalculateValues+0xb0>)
 8008554:	edd3 7a00 	vldr	s15, [r3]
 8008558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800855c:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <CalculateValues+0xb4>)
 800855e:	edd3 7a00 	vldr	s15, [r3]
 8008562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <CalculateValues+0xcc>)
 8008568:	edd3 7a00 	vldr	s15, [r3]
 800856c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <CalculateValues+0xd0>)
 8008572:	edc3 7a00 	vstr	s15, [r3]
	updatePID();
 8008576:	f000 fa99 	bl	8008aac <updatePID>
	updateCount++;
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <CalculateValues+0xd4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <CalculateValues+0xd4>)
 8008582:	6013      	str	r3, [r2, #0]
	if(updateCount==UpdateStall){
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <CalculateValues+0xd4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b1e      	cmp	r3, #30
 800858a:	d103      	bne.n	8008594 <CalculateValues+0xa8>
		updateCount==0;
		SendValues();
 800858c:	f000 f81a 	bl	80085c4 <SendValues>
 8008590:	e000      	b.n	8008594 <CalculateValues+0xa8>
	if (Calibrating == 1){return;}
 8008592:	bf00      	nop
	}
}
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	2000024c 	.word	0x2000024c
 800859c:	20000020 	.word	0x20000020
 80085a0:	20000024 	.word	0x20000024
 80085a4:	20000014 	.word	0x20000014
 80085a8:	20000a30 	.word	0x20000a30
 80085ac:	20000230 	.word	0x20000230
 80085b0:	20000018 	.word	0x20000018
 80085b4:	20000a98 	.word	0x20000a98
 80085b8:	2000001c 	.word	0x2000001c
 80085bc:	20000800 	.word	0x20000800
 80085c0:	20000238 	.word	0x20000238

080085c4 <SendValues>:

void SendValues(void){
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0

	len=sprintf(buffer, "!Voltage!%.3f!\n", (LOAD_VOLTAGE));
 80085c8:	4b23      	ldr	r3, [pc, #140]	; (8008658 <SendValues+0x94>)
 80085ca:	edd3 7a00 	vldr	s15, [r3]
 80085ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80085d2:	ec53 2b17 	vmov	r2, r3, d7
 80085d6:	4921      	ldr	r1, [pc, #132]	; (800865c <SendValues+0x98>)
 80085d8:	4821      	ldr	r0, [pc, #132]	; (8008660 <SendValues+0x9c>)
 80085da:	f002 fe5b 	bl	800b294 <siprintf>
 80085de:	4602      	mov	r2, r0
 80085e0:	4b20      	ldr	r3, [pc, #128]	; (8008664 <SendValues+0xa0>)
 80085e2:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 80085e4:	4b1f      	ldr	r3, [pc, #124]	; (8008664 <SendValues+0xa0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085ee:	491c      	ldr	r1, [pc, #112]	; (8008660 <SendValues+0x9c>)
 80085f0:	481d      	ldr	r0, [pc, #116]	; (8008668 <SendValues+0xa4>)
 80085f2:	f7fe f86e 	bl	80066d2 <HAL_UART_Transmit>

	len=sprintf(buffer, "!Current!%.3f!\n", LOAD_CURRENT);
 80085f6:	4b1d      	ldr	r3, [pc, #116]	; (800866c <SendValues+0xa8>)
 80085f8:	edd3 7a00 	vldr	s15, [r3]
 80085fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008600:	ec53 2b17 	vmov	r2, r3, d7
 8008604:	491a      	ldr	r1, [pc, #104]	; (8008670 <SendValues+0xac>)
 8008606:	4816      	ldr	r0, [pc, #88]	; (8008660 <SendValues+0x9c>)
 8008608:	f002 fe44 	bl	800b294 <siprintf>
 800860c:	4602      	mov	r2, r0
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <SendValues+0xa0>)
 8008610:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <SendValues+0xa0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	b29a      	uxth	r2, r3
 8008618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800861c:	4910      	ldr	r1, [pc, #64]	; (8008660 <SendValues+0x9c>)
 800861e:	4812      	ldr	r0, [pc, #72]	; (8008668 <SendValues+0xa4>)
 8008620:	f7fe f857 	bl	80066d2 <HAL_UART_Transmit>

	len=sprintf(buffer, "!Temperature!%.3f!\n", TEMPERATURE);
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <SendValues+0xb0>)
 8008626:	edd3 7a00 	vldr	s15, [r3]
 800862a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800862e:	ec53 2b17 	vmov	r2, r3, d7
 8008632:	4911      	ldr	r1, [pc, #68]	; (8008678 <SendValues+0xb4>)
 8008634:	480a      	ldr	r0, [pc, #40]	; (8008660 <SendValues+0x9c>)
 8008636:	f002 fe2d 	bl	800b294 <siprintf>
 800863a:	4602      	mov	r2, r0
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <SendValues+0xa0>)
 800863e:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <SendValues+0xa0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	b29a      	uxth	r2, r3
 8008646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800864a:	4905      	ldr	r1, [pc, #20]	; (8008660 <SendValues+0x9c>)
 800864c:	4806      	ldr	r0, [pc, #24]	; (8008668 <SendValues+0xa4>)
 800864e:	f7fe f840 	bl	80066d2 <HAL_UART_Transmit>
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000a30 	.word	0x20000a30
 800865c:	0800e090 	.word	0x0800e090
 8008660:	200008cc 	.word	0x200008cc
 8008664:	20000b04 	.word	0x20000b04
 8008668:	200002f0 	.word	0x200002f0
 800866c:	20000a98 	.word	0x20000a98
 8008670:	0800e0a0 	.word	0x0800e0a0
 8008674:	20000800 	.word	0x20000800
 8008678:	0800e0b0 	.word	0x0800e0b0

0800867c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	uint8_t i;
	 if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b04      	cmp	r3, #4
 8008690:	d118      	bne.n	80086c4 <HAL_ADC_ConvCpltCallback+0x48>
	  {
	  ADC_raw[i] = HAL_ADC_GetValue(hadc);
 8008692:	7bfc      	ldrb	r4, [r7, #15]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7f8 fbf1 	bl	8000e7c <HAL_ADC_GetValue>
 800869a:	4602      	mov	r2, r0
 800869c:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <HAL_ADC_ConvCpltCallback+0x94>)
 800869e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  ADC_float[i] = (float)ADC_raw[i];
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	7bfa      	ldrb	r2, [r7, #15]
 80086a6:	491a      	ldr	r1, [pc, #104]	; (8008710 <HAL_ADC_ConvCpltCallback+0x94>)
 80086a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086ac:	ee07 2a90 	vmov	s15, r2
 80086b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b4:	4a17      	ldr	r2, [pc, #92]	; (8008714 <HAL_ADC_ConvCpltCallback+0x98>)
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	edc3 7a00 	vstr	s15, [r3]
	  i++;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	3301      	adds	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]

	  }
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d119      	bne.n	8008706 <HAL_ADC_ConvCpltCallback+0x8a>
		{
			ADC_raw[i] = HAL_ADC_GetValue(hadc);
 80086d2:	7bfc      	ldrb	r4, [r7, #15]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7f8 fbd1 	bl	8000e7c <HAL_ADC_GetValue>
 80086da:	4602      	mov	r2, r0
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <HAL_ADC_ConvCpltCallback+0x94>)
 80086de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			ADC_float[i] = (float)ADC_raw[i];
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	7bfa      	ldrb	r2, [r7, #15]
 80086e6:	490a      	ldr	r1, [pc, #40]	; (8008710 <HAL_ADC_ConvCpltCallback+0x94>)
 80086e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086ec:	ee07 2a90 	vmov	s15, r2
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	4a07      	ldr	r2, [pc, #28]	; (8008714 <HAL_ADC_ConvCpltCallback+0x98>)
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	edc3 7a00 	vstr	s15, [r3]
			i=0;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
			CalculateValues();
 8008702:	f7ff fef3 	bl	80084ec <CalculateValues>
		}
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bd90      	pop	{r4, r7, pc}
 800870e:	bf00      	nop
 8008710:	20000930 	.word	0x20000930
 8008714:	2000024c 	.word	0x2000024c

08008718 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b5b0      	push	{r4, r5, r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM8) //check if the interrupt comes from TIM8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a17      	ldr	r2, [pc, #92]	; (8008784 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d11b      	bne.n	8008762 <HAL_TIM_PeriodElapsedCallback+0x4a>
        {
			len=sprintf(buffer, "!Protection 1 Alive!!\n");
 800872a:	4a17      	ldr	r2, [pc, #92]	; (8008788 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800872e:	4614      	mov	r4, r2
 8008730:	461d      	mov	r5, r3
 8008732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008734:	6020      	str	r0, [r4, #0]
 8008736:	6061      	str	r1, [r4, #4]
 8008738:	60a2      	str	r2, [r4, #8]
 800873a:	60e3      	str	r3, [r4, #12]
 800873c:	6828      	ldr	r0, [r5, #0]
 800873e:	6120      	str	r0, [r4, #16]
 8008740:	88ab      	ldrh	r3, [r5, #4]
 8008742:	79aa      	ldrb	r2, [r5, #6]
 8008744:	82a3      	strh	r3, [r4, #20]
 8008746:	4613      	mov	r3, r2
 8008748:	75a3      	strb	r3, [r4, #22]
 800874a:	2216      	movs	r2, #22
 800874c:	4b10      	ldr	r3, [pc, #64]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800874e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8008750:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	b29a      	uxth	r2, r3
 8008756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800875a:	490b      	ldr	r1, [pc, #44]	; (8008788 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800875c:	480d      	ldr	r0, [pc, #52]	; (8008794 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800875e:	f7fd ffb8 	bl	80066d2 <HAL_UART_Transmit>
        }
    if (htim->Instance==TIM1) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a0c      	ldr	r2, [pc, #48]	; (8008798 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d108      	bne.n	800877e <HAL_TIM_PeriodElapsedCallback+0x66>
    	if (Calibrating == 1){return;}
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d003      	beq.n	800877c <HAL_TIM_PeriodElapsedCallback+0x64>
        	HAL_ADC_Start_IT(&hadc1);
 8008774:	480a      	ldr	r0, [pc, #40]	; (80087a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8008776:	f7f8 fa41 	bl	8000bfc <HAL_ADC_Start_IT>
 800877a:	e000      	b.n	800877e <HAL_TIM_PeriodElapsedCallback+0x66>
    	if (Calibrating == 1){return;}
 800877c:	bf00      	nop
        }
}
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bdb0      	pop	{r4, r5, r7, pc}
 8008784:	40010400 	.word	0x40010400
 8008788:	200008cc 	.word	0x200008cc
 800878c:	0800e0c4 	.word	0x0800e0c4
 8008790:	20000b04 	.word	0x20000b04
 8008794:	200002f0 	.word	0x200002f0
 8008798:	40010000 	.word	0x40010000
 800879c:	20000230 	.word	0x20000230
 80087a0:	20000804 	.word	0x20000804

080087a4 <Calibrate>:

void Calibrate(void){
 80087a4:	b5b0      	push	{r4, r5, r7, lr}
 80087a6:	ed2d 8b02 	vpush	{d8}
 80087aa:	b0ec      	sub	sp, #432	; 0x1b0
 80087ac:	af00      	add	r7, sp, #0
	Calibrating=1;											// Enable the Calibrating flag to disable normal voltage/current/temperature measurements
 80087ae:	4bb2      	ldr	r3, [pc, #712]	; (8008a78 <Calibrate+0x2d4>)
 80087b0:	2201      	movs	r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
	float VoltageSum = 0;
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float SD = 5;
 80087bc:	4baf      	ldr	r3, [pc, #700]	; (8008a7c <Calibrate+0x2d8>)
 80087be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float Difference;
	float Varsum;
	float Variance;
	float MeanVoltages[100];
	unsigned k=0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	unsigned m=0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

recalibrate:
	for (Setpoint=TurnOn; Setpoint < MaxSetpoint; Setpoint = Setpoint + SetpointStep){
 80087ce:	4bac      	ldr	r3, [pc, #688]	; (8008a80 <Calibrate+0x2dc>)
 80087d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e097      	b.n	8008908 <Calibrate+0x164>

		while (SD > MaximumSD) {
			VoltageSum = 0;
 80087d8:	f04f 0300 	mov.w	r3, #0
 80087dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
			Difference = 0;
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			Variance = 0;
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
			Varsum = 0;
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
			k=0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

			while (k<Averages){
 80087fe:	e049      	b.n	8008894 <Calibrate+0xf0>
				HAL_ADC_Start_IT(&hadc1);					// Take ADC readings
 8008800:	48a0      	ldr	r0, [pc, #640]	; (8008a84 <Calibrate+0x2e0>)
 8008802:	f7f8 f9fb 	bl	8000bfc <HAL_ADC_Start_IT>
				PreviousVoltages[k]=LOAD_VOLTAGE;
 8008806:	4ba0      	ldr	r3, [pc, #640]	; (8008a88 <Calibrate+0x2e4>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	49a0      	ldr	r1, [pc, #640]	; (8008a8c <Calibrate+0x2e8>)
 800880c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	601a      	str	r2, [r3, #0]
				HAL_Delay(CalibrationDelay);
 8008816:	f242 7010 	movw	r0, #10000	; 0x2710
 800881a:	f7f7 ffa3 	bl	8000764 <HAL_Delay>
				k++;
 800881e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008822:	3301      	adds	r3, #1
 8008824:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
				VoltageSum = VoltageSum + LOAD_VOLTAGE;		// Add the current LOAD_VOLTAGE to the running sum
 8008828:	4b97      	ldr	r3, [pc, #604]	; (8008a88 <Calibrate+0x2e4>)
 800882a:	edd3 7a00 	vldr	s15, [r3]
 800882e:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8008832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008836:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
				MeanVoltage = (VoltageSum/k);				// and take the mean
 800883a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008846:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800884a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884e:	4b90      	ldr	r3, [pc, #576]	; (8008a90 <Calibrate+0x2ec>)
 8008850:	edc3 7a00 	vstr	s15, [r3]
				Difference = LOAD_VOLTAGE - MeanVoltage;	// The difference is the current LOAD_VOLTAGE less the running MeanVoltage
 8008854:	4b8c      	ldr	r3, [pc, #560]	; (8008a88 <Calibrate+0x2e4>)
 8008856:	ed93 7a00 	vldr	s14, [r3]
 800885a:	4b8d      	ldr	r3, [pc, #564]	; (8008a90 <Calibrate+0x2ec>)
 800885c:	edd3 7a00 	vldr	s15, [r3]
 8008860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008864:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
				Varsum = Varsum + pow(Difference,2);		// and Varsum is the running sum of the squares of the Difference
 8008868:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 800886c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008870:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8008874:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008878:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800887c:	eeb0 0b47 	vmov.f64	d0, d7
 8008880:	f004 fcde 	bl	800d240 <pow>
 8008884:	eeb0 7b40 	vmov.f64	d7, d0
 8008888:	ee38 7b07 	vadd.f64	d7, d8, d7
 800888c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008890:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
			while (k<Averages){
 8008894:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008898:	2b04      	cmp	r3, #4
 800889a:	d9b1      	bls.n	8008800 <Calibrate+0x5c>
			}
		  Variance = Varsum / (float)k;
 800889c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088a8:	edd7 6a69 	vldr	s13, [r7, #420]	; 0x1a4
 80088ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b0:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
		  SD = sqrt(Variance);
 80088b4:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80088b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088bc:	eeb0 0b47 	vmov.f64	d0, d7
 80088c0:	f004 fdf2 	bl	800d4a8 <sqrt>
 80088c4:	eeb0 7b40 	vmov.f64	d7, d0
 80088c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80088cc:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
		while (SD > MaximumSD) {
 80088d0:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80088d4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8008a94 <Calibrate+0x2f0>
 80088d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e0:	f73f af7a 	bgt.w	80087d8 <Calibrate+0x34>
		}
		MeanVoltages[m]=MeanVoltage;
 80088e4:	4b6a      	ldr	r3, [pc, #424]	; (8008a90 <Calibrate+0x2ec>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	1d39      	adds	r1, r7, #4
 80088ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	601a      	str	r2, [r3, #0]
		m++;
 80088f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80088f8:	3301      	adds	r3, #1
 80088fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	for (Setpoint=TurnOn; Setpoint < MaxSetpoint; Setpoint = Setpoint + SetpointStep){
 80088fe:	4b60      	ldr	r3, [pc, #384]	; (8008a80 <Calibrate+0x2dc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	330a      	adds	r3, #10
 8008904:	4a5e      	ldr	r2, [pc, #376]	; (8008a80 <Calibrate+0x2dc>)
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4b5d      	ldr	r3, [pc, #372]	; (8008a80 <Calibrate+0x2dc>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b62      	ldr	r3, [pc, #392]	; (8008a98 <Calibrate+0x2f4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d3dd      	bcc.n	80088d0 <Calibrate+0x12c>
	}

	for (m=0; m<100; m++) {
 8008914:	2300      	movs	r3, #0
 8008916:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800891a:	e088      	b.n	8008a2e <Calibrate+0x28a>
		VoltageSum = 0;
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		Difference = 0;
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		Variance = 0;
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		Varsum = 0;
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		k=0;
 800893c:	2300      	movs	r3, #0
 800893e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

		while (k<5){
 8008942:	e03a      	b.n	80089ba <Calibrate+0x216>
			k++;
 8008944:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008948:	3301      	adds	r3, #1
 800894a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			MeanVoltages[(m+k)];
			VoltageSum = VoltageSum + LOAD_VOLTAGE;
 800894e:	4b4e      	ldr	r3, [pc, #312]	; (8008a88 <Calibrate+0x2e4>)
 8008950:	edd3 7a00 	vldr	s15, [r3]
 8008954:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8008958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895c:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
			MeanVoltage = (VoltageSum/k);
 8008960:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800896c:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 8008970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008974:	4b46      	ldr	r3, [pc, #280]	; (8008a90 <Calibrate+0x2ec>)
 8008976:	edc3 7a00 	vstr	s15, [r3]
			Difference = LOAD_VOLTAGE - MeanVoltage;
 800897a:	4b43      	ldr	r3, [pc, #268]	; (8008a88 <Calibrate+0x2e4>)
 800897c:	ed93 7a00 	vldr	s14, [r3]
 8008980:	4b43      	ldr	r3, [pc, #268]	; (8008a90 <Calibrate+0x2ec>)
 8008982:	edd3 7a00 	vldr	s15, [r3]
 8008986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800898a:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
			Varsum = Varsum + pow(Difference,2);
 800898e:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8008992:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008996:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800899a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800899e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80089a2:	eeb0 0b47 	vmov.f64	d0, d7
 80089a6:	f004 fc4b 	bl	800d240 <pow>
 80089aa:	eeb0 7b40 	vmov.f64	d7, d0
 80089ae:	ee38 7b07 	vadd.f64	d7, d8, d7
 80089b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80089b6:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		while (k<5){
 80089ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d9c0      	bls.n	8008944 <Calibrate+0x1a0>
		}
	  Variance = Varsum / (float)k;
 80089c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089ce:	edd7 6a69 	vldr	s13, [r7, #420]	; 0x1a4
 80089d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d6:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
	  SD = sqrt(Variance);
 80089da:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80089de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80089e2:	eeb0 0b47 	vmov.f64	d0, d7
 80089e6:	f004 fd5f 	bl	800d4a8 <sqrt>
 80089ea:	eeb0 7b40 	vmov.f64	d7, d0
 80089ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80089f2:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
	  if (SD<Threshold ){
 80089f6:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80089fa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80089fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d50d      	bpl.n	8008a24 <Calibrate+0x280>
		  Setpoint=(TurnOn+(m*SetpointStep));				// Set the new Setpoint
 8008a08:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8008a18:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <Calibrate+0x2dc>)
 8008a1a:	6013      	str	r3, [r2, #0]
		  Calibrating=0;									// Disable the Calibrating flag to resume normal voltage/current/temperature measurements
 8008a1c:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <Calibrate+0x2d4>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
		  return;											// break and return from the loop
 8008a22:	e023      	b.n	8008a6c <Calibrate+0x2c8>
	for (m=0; m<100; m++) {
 8008a24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008a28:	3301      	adds	r3, #1
 8008a2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008a2e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008a32:	2b63      	cmp	r3, #99	; 0x63
 8008a34:	f67f af72 	bls.w	800891c <Calibrate+0x178>
	  }
	}
	/*
	 * If this is reached calibration failed
	 */
	len=sprintf(buffer, "!CalibrationFailed!1!");			// Report the failure
 8008a38:	4a18      	ldr	r2, [pc, #96]	; (8008a9c <Calibrate+0x2f8>)
 8008a3a:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <Calibrate+0x2fc>)
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	461c      	mov	r4, r3
 8008a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a42:	6028      	str	r0, [r5, #0]
 8008a44:	6069      	str	r1, [r5, #4]
 8008a46:	60aa      	str	r2, [r5, #8]
 8008a48:	60eb      	str	r3, [r5, #12]
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	6128      	str	r0, [r5, #16]
 8008a4e:	88a3      	ldrh	r3, [r4, #4]
 8008a50:	82ab      	strh	r3, [r5, #20]
 8008a52:	2215      	movs	r2, #21
 8008a54:	4b13      	ldr	r3, [pc, #76]	; (8008aa4 <Calibrate+0x300>)
 8008a56:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8008a58:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <Calibrate+0x300>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a62:	490e      	ldr	r1, [pc, #56]	; (8008a9c <Calibrate+0x2f8>)
 8008a64:	4810      	ldr	r0, [pc, #64]	; (8008aa8 <Calibrate+0x304>)
 8008a66:	f7fd fe34 	bl	80066d2 <HAL_UART_Transmit>
	goto recalibrate;										// and attempt to recalibrate
 8008a6a:	e6b0      	b.n	80087ce <Calibrate+0x2a>
	SetMode(AUTOMATIC);
}
 8008a6c:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8008a70:	46bd      	mov	sp, r7
 8008a72:	ecbd 8b02 	vpop	{d8}
 8008a76:	bdb0      	pop	{r4, r5, r7, pc}
 8008a78:	20000230 	.word	0x20000230
 8008a7c:	40a00000 	.word	0x40a00000
 8008a80:	2000000c 	.word	0x2000000c
 8008a84:	20000804 	.word	0x20000804
 8008a88:	20000a30 	.word	0x20000a30
 8008a8c:	20000868 	.word	0x20000868
 8008a90:	2000093c 	.word	0x2000093c
 8008a94:	42480000 	.word	0x42480000
 8008a98:	20000010 	.word	0x20000010
 8008a9c:	200008cc 	.word	0x200008cc
 8008aa0:	0800e0dc 	.word	0x0800e0dc
 8008aa4:	20000b04 	.word	0x20000b04
 8008aa8:	200002f0 	.word	0x200002f0

08008aac <updatePID>:

void updatePID(void){
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
	   if(!inAuto) return;
 8008ab2:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <updatePID+0xd8>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d060      	beq.n	8008b7c <updatePID+0xd0>

	  /*Compute all the working error variables*/
	  Input = ((ADC_float[2]*ScaleFactor)+offset);			// Take the corrected ADC value for voltage and store as input
 8008aba:	4b33      	ldr	r3, [pc, #204]	; (8008b88 <updatePID+0xdc>)
 8008abc:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ac0:	4b32      	ldr	r3, [pc, #200]	; (8008b8c <updatePID+0xe0>)
 8008ac2:	edd3 7a00 	vldr	s15, [r3]
 8008ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008aca:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <updatePID+0xe4>)
 8008acc:	edd3 7a00 	vldr	s15, [r3]
 8008ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ad8:	ee17 2a90 	vmov	r2, s15
 8008adc:	4b2d      	ldr	r3, [pc, #180]	; (8008b94 <updatePID+0xe8>)
 8008ade:	601a      	str	r2, [r3, #0]
	  double error = Setpoint - Input;						// Find the error value
 8008ae0:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <updatePID+0xec>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a2b      	ldr	r2, [pc, #172]	; (8008b94 <updatePID+0xe8>)
 8008ae6:	6812      	ldr	r2, [r2, #0]
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008af2:	ed87 7b02 	vstr	d7, [r7, #8]
	  double dInput = (Input - lastInput);					// Input difference
 8008af6:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <updatePID+0xe8>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b28      	ldr	r3, [pc, #160]	; (8008b9c <updatePID+0xf0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	ee07 3a90 	vmov	s15, r3
 8008b04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b08:	ed87 7b00 	vstr	d7, [r7]

	  /*Compute PID Output*/
	  Output = kp * error - kd * dInput;					// Find the new output
 8008b0c:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <updatePID+0xf4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	ee07 3a90 	vmov	s15, r3
 8008b14:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008b18:	ed97 7b02 	vldr	d7, [r7, #8]
 8008b1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008b20:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <updatePID+0xf8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008b2c:	ed97 7b00 	vldr	d7, [r7]
 8008b30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008b34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008b38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008b3c:	ee17 2a90 	vmov	r2, s15
 8008b40:	4b19      	ldr	r3, [pc, #100]	; (8008ba8 <updatePID+0xfc>)
 8008b42:	601a      	str	r2, [r3, #0]
	  if(Output > OutMax) Output = OutMax;					// Stop wind-up
 8008b44:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <updatePID+0xfc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4c:	dd04      	ble.n	8008b58 <updatePID+0xac>
 8008b4e:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <updatePID+0xfc>)
 8008b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	e009      	b.n	8008b6c <updatePID+0xc0>
	  else if(Output < TurnOn) Output = TurnOn;				// Stop wind-down
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <updatePID+0xfc>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008b60:	4293      	cmp	r3, r2
 8008b62:	dc03      	bgt.n	8008b6c <updatePID+0xc0>
 8008b64:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <updatePID+0xfc>)
 8008b66:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008b6a:	601a      	str	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, Output);
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <updatePID+0xfc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2208      	movs	r2, #8
 8008b72:	2100      	movs	r1, #0
 8008b74:	480d      	ldr	r0, [pc, #52]	; (8008bac <updatePID+0x100>)
 8008b76:	f7f9 fc1e 	bl	80023b6 <HAL_DAC_SetValue>
 8008b7a:	e000      	b.n	8008b7e <updatePID+0xd2>
	   if(!inAuto) return;
 8008b7c:	bf00      	nop
}
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000234 	.word	0x20000234
 8008b88:	2000024c 	.word	0x2000024c
 8008b8c:	20000020 	.word	0x20000020
 8008b90:	20000024 	.word	0x20000024
 8008b94:	20000a2c 	.word	0x20000a2c
 8008b98:	2000000c 	.word	0x2000000c
 8008b9c:	2000087c 	.word	0x2000087c
 8008ba0:	2000002c 	.word	0x2000002c
 8008ba4:	20000030 	.word	0x20000030
 8008ba8:	20000884 	.word	0x20000884
 8008bac:	200002dc 	.word	0x200002dc

08008bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bb4:	f7f7 fd74 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bb8:	f000 f84e 	bl	8008c58 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008bbc:	f000 fde4 	bl	8009788 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8008bc0:	f000 fd72 	bl	80096a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008bc4:	f000 fdac 	bl	8009720 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8008bc8:	f000 f904 	bl	8008dd4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8008bcc:	f000 f998 	bl	8008f00 <MX_DAC1_Init>
  MX_TIM3_Init();
 8008bd0:	f000 faf4 	bl	80091bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8008bd4:	f000 fb76 	bl	80092c4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8008bd8:	f000 fa6e 	bl	80090b8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8008bdc:	f000 fbea 	bl	80093b4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8008be0:	f000 fc6c 	bl	80094bc <MX_TIM8_Init>
  MX_TIM1_Init();
 8008be4:	f000 f9be 	bl	8008f64 <MX_TIM1_Init>
  MX_TIM13_Init();
 8008be8:	f000 fd12 	bl	8009610 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8008bec:	4812      	ldr	r0, [pc, #72]	; (8008c38 <main+0x88>)
 8008bee:	f7f8 f805 	bl	8000bfc <HAL_ADC_Start_IT>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, Vout);
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <main+0x8c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4811      	ldr	r0, [pc, #68]	; (8008c40 <main+0x90>)
 8008bfc:	f7f9 fbdb 	bl	80023b6 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8008c00:	2100      	movs	r1, #0
 8008c02:	480f      	ldr	r0, [pc, #60]	; (8008c40 <main+0x90>)
 8008c04:	f7f9 fb31 	bl	800226a <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8008c08:	480e      	ldr	r0, [pc, #56]	; (8008c44 <main+0x94>)
 8008c0a:	f7fc fac8 	bl	800519e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8008c0e:	480e      	ldr	r0, [pc, #56]	; (8008c48 <main+0x98>)
 8008c10:	f7fc fac5 	bl	800519e <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, Rx_data, 1);	// Activate USART rx interrupt
 8008c14:	2201      	movs	r2, #1
 8008c16:	490d      	ldr	r1, [pc, #52]	; (8008c4c <main+0x9c>)
 8008c18:	480d      	ldr	r0, [pc, #52]	; (8008c50 <main+0xa0>)
 8008c1a:	f7fd fde7 	bl	80067ec <HAL_UART_Receive_IT>
//  Cabin1PWM();
//  Cabin2PWM();
//  RidePWM();


  Calibrate();
 8008c1e:	f7ff fdc1 	bl	80087a4 <Calibrate>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (Transfer_cplt==1) {
 8008c22:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <main+0xa4>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d1fb      	bne.n	8008c22 <main+0x72>
		  StringSort();
 8008c2a:	f000 ff07 	bl	8009a3c <StringSort>
		  Transfer_cplt=0;
 8008c2e:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <main+0xa4>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
	  if (Transfer_cplt==1) {
 8008c34:	e7f5      	b.n	8008c22 <main+0x72>
 8008c36:	bf00      	nop
 8008c38:	20000804 	.word	0x20000804
 8008c3c:	20000028 	.word	0x20000028
 8008c40:	200002dc 	.word	0x200002dc
 8008c44:	20000940 	.word	0x20000940
 8008c48:	2000025c 	.word	0x2000025c
 8008c4c:	20000778 	.word	0x20000778
 8008c50:	200002f0 	.word	0x200002f0
 8008c54:	20000258 	.word	0x20000258

08008c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0cc      	sub	sp, #304	; 0x130
 8008c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008c62:	224c      	movs	r2, #76	; 0x4c
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 fe5e 	bl	800a928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c70:	2220      	movs	r2, #32
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 fe57 	bl	800a928 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	23bc      	movs	r3, #188	; 0xbc
 8008c82:	461a      	mov	r2, r3
 8008c84:	2100      	movs	r1, #0
 8008c86:	f001 fe4f 	bl	800a928 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8008c8a:	4a50      	ldr	r2, [pc, #320]	; (8008dcc <SystemClock_Config+0x174>)
 8008c8c:	4b4f      	ldr	r3, [pc, #316]	; (8008dcc <SystemClock_Config+0x174>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f023 0304 	bic.w	r3, r3, #4
 8008c94:	60d3      	str	r3, [r2, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	4a4b      	ldr	r2, [pc, #300]	; (8008dcc <SystemClock_Config+0x174>)
 8008c9e:	4b4b      	ldr	r3, [pc, #300]	; (8008dcc <SystemClock_Config+0x174>)
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008caa:	6193      	str	r3, [r2, #24]
 8008cac:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <SystemClock_Config+0x174>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	681b      	ldr	r3, [r3, #0]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8008cbc:	bf00      	nop
 8008cbe:	4b43      	ldr	r3, [pc, #268]	; (8008dcc <SystemClock_Config+0x174>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cca:	d1f8      	bne.n	8008cbe <SystemClock_Config+0x66>
  {
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008cec:	2302      	movs	r3, #2
 8008cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8008cf8:	2318      	movs	r3, #24
 8008cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008d04:	2304      	movs	r3, #4
 8008d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008d10:	230c      	movs	r3, #12
 8008d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fa f844 	bl	8002db4 <HAL_RCC_OscConfig>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008d32:	f001 f939 	bl	8009fa8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d36:	233f      	movs	r3, #63	; 0x3f
 8008d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8008d54:	2300      	movs	r3, #0
 8008d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008d66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fa fbbb 	bl	80034e8 <HAL_RCC_ClockConfig>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8008d78:	f001 f916 	bl	8009fa8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8008d7c:	f107 0308 	add.w	r3, r7, #8
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <SystemClock_Config+0x178>)
 8008d82:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	2200      	movs	r2, #0
 8008d8a:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	2200      	movs	r2, #0
 8008d92:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8008d94:	f107 0308 	add.w	r3, r7, #8
 8008d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dac:	f107 0308 	add.w	r3, r7, #8
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fa febf 	bl	8003b34 <HAL_RCCEx_PeriphCLKConfig>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <SystemClock_Config+0x168>
  {
    Error_Handler();
 8008dbc:	f001 f8f4 	bl	8009fa8 <Error_Handler>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	58024800 	.word	0x58024800
 8008dd0:	800c0002 	.word	0x800c0002

08008dd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	; 0x28
 8008dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008dda:	f107 031c 	add.w	r3, r7, #28
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008de6:	463b      	mov	r3, r7
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	609a      	str	r2, [r3, #8]
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	611a      	str	r2, [r3, #16]
 8008df4:	615a      	str	r2, [r3, #20]
 8008df6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Common config 
  */
  hadc1.Instance = ADC1;
 8008df8:	4b3f      	ldr	r3, [pc, #252]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008dfa:	4a40      	ldr	r2, [pc, #256]	; (8008efc <MX_ADC1_Init+0x128>)
 8008dfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8008e04:	4b3c      	ldr	r3, [pc, #240]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008e0a:	4b3b      	ldr	r3, [pc, #236]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008e10:	4b39      	ldr	r3, [pc, #228]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e12:	2204      	movs	r2, #4
 8008e14:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008e16:	4b38      	ldr	r3, [pc, #224]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008e1c:	4b36      	ldr	r3, [pc, #216]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8008e22:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e24:	2203      	movs	r2, #3
 8008e26:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008e28:	4b33      	ldr	r3, [pc, #204]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008e34:	4b30      	ldr	r3, [pc, #192]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8008e3a:	4b2f      	ldr	r3, [pc, #188]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008e40:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8008e46:	4b2c      	ldr	r3, [pc, #176]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.BoostMode = DISABLE;
 8008e4c:	4b2a      	ldr	r3, [pc, #168]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008e5c:	4826      	ldr	r0, [pc, #152]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e5e:	f7f7 fca3 	bl	80007a8 <HAL_ADC_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008e68:	f001 f89e 	bl	8009fa8 <Error_Handler>
  }
  /**Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008e70:	f107 031c 	add.w	r3, r7, #28
 8008e74:	4619      	mov	r1, r3
 8008e76:	4820      	ldr	r0, [pc, #128]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008e78:	f7f8 fffe 	bl	8001e78 <HAL_ADCEx_MultiModeConfigChannel>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008e82:	f001 f891 	bl	8009fa8 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008e86:	2302      	movs	r3, #2
 8008e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4815      	ldr	r0, [pc, #84]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008ea4:	f7f8 fa7e 	bl	80013a4 <HAL_ADC_ConfigChannel>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008eae:	f001 f87b 	bl	8009fa8 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008eb2:	2304      	movs	r3, #4
 8008eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	480e      	ldr	r0, [pc, #56]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008ec0:	f7f8 fa70 	bl	80013a4 <HAL_ADC_ConfigChannel>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008eca:	f001 f86d 	bl	8009fa8 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008ece:	2305      	movs	r3, #5
 8008ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008eda:	463b      	mov	r3, r7
 8008edc:	4619      	mov	r1, r3
 8008ede:	4806      	ldr	r0, [pc, #24]	; (8008ef8 <MX_ADC1_Init+0x124>)
 8008ee0:	f7f8 fa60 	bl	80013a4 <HAL_ADC_ConfigChannel>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8008eea:	f001 f85d 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008eee:	bf00      	nop
 8008ef0:	3728      	adds	r7, #40	; 0x28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000804 	.word	0x20000804
 8008efc:	40022000 	.word	0x40022000

08008f00 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	2224      	movs	r2, #36	; 0x24
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f001 fd0b 	bl	800a928 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <MX_DAC1_Init+0x5c>)
 8008f14:	4a12      	ldr	r2, [pc, #72]	; (8008f60 <MX_DAC1_Init+0x60>)
 8008f16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008f18:	4810      	ldr	r0, [pc, #64]	; (8008f5c <MX_DAC1_Init+0x5c>)
 8008f1a:	f7f9 f984 	bl	8002226 <HAL_DAC_Init>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008f24:	f001 f840 	bl	8009fa8 <Error_Handler>
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008f3c:	1d3b      	adds	r3, r7, #4
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4619      	mov	r1, r3
 8008f42:	4806      	ldr	r0, [pc, #24]	; (8008f5c <MX_DAC1_Init+0x5c>)
 8008f44:	f7f9 fa66 	bl	8002414 <HAL_DAC_ConfigChannel>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8008f4e:	f001 f82b 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008f52:	bf00      	nop
 8008f54:	3728      	adds	r7, #40	; 0x28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	200002dc 	.word	0x200002dc
 8008f60:	40007400 	.word	0x40007400

08008f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b09a      	sub	sp, #104	; 0x68
 8008f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
 8008f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	611a      	str	r2, [r3, #16]
 8008f94:	615a      	str	r2, [r3, #20]
 8008f96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008f98:	1d3b      	adds	r3, r7, #4
 8008f9a:	222c      	movs	r2, #44	; 0x2c
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fcc2 	bl	800a928 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008fa4:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fa6:	4a43      	ldr	r2, [pc, #268]	; (80090b4 <MX_TIM1_Init+0x150>)
 8008fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8008faa:	4b41      	ldr	r3, [pc, #260]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008fb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fb2:	4b3f      	ldr	r3, [pc, #252]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19960;
 8008fb8:	4b3d      	ldr	r3, [pc, #244]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fba:	f644 52f8 	movw	r2, #19960	; 0x4df8
 8008fbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fc0:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008fc6:	4b3a      	ldr	r3, [pc, #232]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008fcc:	4b38      	ldr	r3, [pc, #224]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fce:	2280      	movs	r2, #128	; 0x80
 8008fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008fd2:	4837      	ldr	r0, [pc, #220]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008fd4:	f7fc f8b8 	bl	8005148 <HAL_TIM_Base_Init>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8008fde:	f000 ffe3 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008fe8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008fec:	4619      	mov	r1, r3
 8008fee:	4830      	ldr	r0, [pc, #192]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8008ff0:	f7fc fcce 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8008ffa:	f000 ffd5 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8008ffe:	482c      	ldr	r0, [pc, #176]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8009000:	f7fc f8ea 	bl	80051d8 <HAL_TIM_OC_Init>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800900a:	f000 ffcd 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800900e:	2300      	movs	r3, #0
 8009010:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009012:	2300      	movs	r3, #0
 8009014:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009016:	2300      	movs	r3, #0
 8009018:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800901a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800901e:	4619      	mov	r1, r3
 8009020:	4823      	ldr	r0, [pc, #140]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8009022:	f7fd fa1f 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800902c:	f000 ffbc 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009030:	2300      	movs	r3, #0
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009038:	2300      	movs	r3, #0
 800903a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009040:	2300      	movs	r3, #0
 8009042:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009044:	2300      	movs	r3, #0
 8009046:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009048:	2300      	movs	r3, #0
 800904a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800904c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009050:	2200      	movs	r2, #0
 8009052:	4619      	mov	r1, r3
 8009054:	4816      	ldr	r0, [pc, #88]	; (80090b0 <MX_TIM1_Init+0x14c>)
 8009056:	f7fc fb05 	bl	8005664 <HAL_TIM_OC_ConfigChannel>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009060:	f000 ffa2 	bl	8009fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009064:	2300      	movs	r3, #0
 8009066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009068:	2300      	movs	r3, #0
 800906a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800907c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009090:	2300      	movs	r3, #0
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <MX_TIM1_Init+0x14c>)
 800909a:	f7fd fa37 	bl	800650c <HAL_TIMEx_ConfigBreakDeadTime>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80090a4:	f000 ff80 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80090a8:	bf00      	nop
 80090aa:	3768      	adds	r7, #104	; 0x68
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000940 	.word	0x20000940
 80090b4:	40010000 	.word	0x40010000

080090b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80090be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	609a      	str	r2, [r3, #8]
 80090ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090cc:	f107 031c 	add.w	r3, r7, #28
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80090d8:	463b      	mov	r3, r7
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	609a      	str	r2, [r3, #8]
 80090e2:	60da      	str	r2, [r3, #12]
 80090e4:	611a      	str	r2, [r3, #16]
 80090e6:	615a      	str	r2, [r3, #20]
 80090e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80090ea:	4b33      	ldr	r3, [pc, #204]	; (80091b8 <MX_TIM2_Init+0x100>)
 80090ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80090f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480;
 80090f2:	4b31      	ldr	r3, [pc, #196]	; (80091b8 <MX_TIM2_Init+0x100>)
 80090f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80090f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <MX_TIM2_Init+0x100>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8009100:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009102:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009108:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <MX_TIM2_Init+0x100>)
 800910a:	2200      	movs	r2, #0
 800910c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800910e:	4b2a      	ldr	r3, [pc, #168]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009110:	2280      	movs	r2, #128	; 0x80
 8009112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009114:	4828      	ldr	r0, [pc, #160]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009116:	f7fc f817 	bl	8005148 <HAL_TIM_Base_Init>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009120:	f000 ff42 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800912a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800912e:	4619      	mov	r1, r3
 8009130:	4821      	ldr	r0, [pc, #132]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009132:	f7fc fc2d 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800913c:	f000 ff34 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009140:	481d      	ldr	r0, [pc, #116]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009142:	f7fc f87e 	bl	8005242 <HAL_TIM_PWM_Init>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800914c:	f000 ff2c 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009150:	2300      	movs	r3, #0
 8009152:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009154:	2300      	movs	r3, #0
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009158:	f107 031c 	add.w	r3, r7, #28
 800915c:	4619      	mov	r1, r3
 800915e:	4816      	ldr	r0, [pc, #88]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009160:	f7fd f980 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800916a:	f000 ff1d 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800916e:	2360      	movs	r3, #96	; 0x60
 8009170:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800917e:	463b      	mov	r3, r7
 8009180:	2204      	movs	r2, #4
 8009182:	4619      	mov	r1, r3
 8009184:	480c      	ldr	r0, [pc, #48]	; (80091b8 <MX_TIM2_Init+0x100>)
 8009186:	f7fc faeb 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009190:	f000 ff0a 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009194:	463b      	mov	r3, r7
 8009196:	2208      	movs	r2, #8
 8009198:	4619      	mov	r1, r3
 800919a:	4807      	ldr	r0, [pc, #28]	; (80091b8 <MX_TIM2_Init+0x100>)
 800919c:	f7fc fae0 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80091a6:	f000 feff 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80091aa:	4803      	ldr	r0, [pc, #12]	; (80091b8 <MX_TIM2_Init+0x100>)
 80091ac:	f001 f8ec 	bl	800a388 <HAL_TIM_MspPostInit>

}
 80091b0:	bf00      	nop
 80091b2:	3738      	adds	r7, #56	; 0x38
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	200009ec 	.word	0x200009ec

080091bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	; 0x38
 80091c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	605a      	str	r2, [r3, #4]
 80091cc:	609a      	str	r2, [r3, #8]
 80091ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091d0:	f107 031c 	add.w	r3, r7, #28
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091dc:	463b      	mov	r3, r7
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	605a      	str	r2, [r3, #4]
 80091e4:	609a      	str	r2, [r3, #8]
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	611a      	str	r2, [r3, #16]
 80091ea:	615a      	str	r2, [r3, #20]
 80091ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80091ee:	4b33      	ldr	r3, [pc, #204]	; (80092bc <MX_TIM3_Init+0x100>)
 80091f0:	4a33      	ldr	r2, [pc, #204]	; (80092c0 <MX_TIM3_Init+0x104>)
 80091f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 80091f4:	4b31      	ldr	r3, [pc, #196]	; (80092bc <MX_TIM3_Init+0x100>)
 80091f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80091fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091fc:	4b2f      	ldr	r3, [pc, #188]	; (80092bc <MX_TIM3_Init+0x100>)
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8009202:	4b2e      	ldr	r3, [pc, #184]	; (80092bc <MX_TIM3_Init+0x100>)
 8009204:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009208:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800920a:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <MX_TIM3_Init+0x100>)
 800920c:	2200      	movs	r2, #0
 800920e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009210:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <MX_TIM3_Init+0x100>)
 8009212:	2280      	movs	r2, #128	; 0x80
 8009214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009216:	4829      	ldr	r0, [pc, #164]	; (80092bc <MX_TIM3_Init+0x100>)
 8009218:	f7fb ff96 	bl	8005148 <HAL_TIM_Base_Init>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8009222:	f000 fec1 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800922c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009230:	4619      	mov	r1, r3
 8009232:	4822      	ldr	r0, [pc, #136]	; (80092bc <MX_TIM3_Init+0x100>)
 8009234:	f7fc fbac 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800923e:	f000 feb3 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009242:	481e      	ldr	r0, [pc, #120]	; (80092bc <MX_TIM3_Init+0x100>)
 8009244:	f7fb fffd 	bl	8005242 <HAL_TIM_PWM_Init>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800924e:	f000 feab 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009256:	2300      	movs	r3, #0
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800925a:	f107 031c 	add.w	r3, r7, #28
 800925e:	4619      	mov	r1, r3
 8009260:	4816      	ldr	r0, [pc, #88]	; (80092bc <MX_TIM3_Init+0x100>)
 8009262:	f7fd f8ff 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800926c:	f000 fe9c 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009270:	2360      	movs	r3, #96	; 0x60
 8009272:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009278:	2300      	movs	r3, #0
 800927a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009280:	463b      	mov	r3, r7
 8009282:	2200      	movs	r2, #0
 8009284:	4619      	mov	r1, r3
 8009286:	480d      	ldr	r0, [pc, #52]	; (80092bc <MX_TIM3_Init+0x100>)
 8009288:	f7fc fa6a 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8009292:	f000 fe89 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009296:	463b      	mov	r3, r7
 8009298:	2204      	movs	r2, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4807      	ldr	r0, [pc, #28]	; (80092bc <MX_TIM3_Init+0x100>)
 800929e:	f7fc fa5f 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80092a8:	f000 fe7e 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80092ac:	4803      	ldr	r0, [pc, #12]	; (80092bc <MX_TIM3_Init+0x100>)
 80092ae:	f001 f86b 	bl	800a388 <HAL_TIM_MspPostInit>

}
 80092b2:	bf00      	nop
 80092b4:	3738      	adds	r7, #56	; 0x38
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	200007bc 	.word	0x200007bc
 80092c0:	40000400 	.word	0x40000400

080092c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08e      	sub	sp, #56	; 0x38
 80092c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80092ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	605a      	str	r2, [r3, #4]
 80092d4:	609a      	str	r2, [r3, #8]
 80092d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092d8:	f107 031c 	add.w	r3, r7, #28
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80092e4:	463b      	mov	r3, r7
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	609a      	str	r2, [r3, #8]
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	611a      	str	r2, [r3, #16]
 80092f2:	615a      	str	r2, [r3, #20]
 80092f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80092f6:	4b2d      	ldr	r3, [pc, #180]	; (80093ac <MX_TIM4_Init+0xe8>)
 80092f8:	4a2d      	ldr	r2, [pc, #180]	; (80093b0 <MX_TIM4_Init+0xec>)
 80092fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480;
 80092fc:	4b2b      	ldr	r3, [pc, #172]	; (80093ac <MX_TIM4_Init+0xe8>)
 80092fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009304:	4b29      	ldr	r3, [pc, #164]	; (80093ac <MX_TIM4_Init+0xe8>)
 8009306:	2200      	movs	r2, #0
 8009308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800930a:	4b28      	ldr	r3, [pc, #160]	; (80093ac <MX_TIM4_Init+0xe8>)
 800930c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009312:	4b26      	ldr	r3, [pc, #152]	; (80093ac <MX_TIM4_Init+0xe8>)
 8009314:	2200      	movs	r2, #0
 8009316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009318:	4b24      	ldr	r3, [pc, #144]	; (80093ac <MX_TIM4_Init+0xe8>)
 800931a:	2280      	movs	r2, #128	; 0x80
 800931c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800931e:	4823      	ldr	r0, [pc, #140]	; (80093ac <MX_TIM4_Init+0xe8>)
 8009320:	f7fb ff12 	bl	8005148 <HAL_TIM_Base_Init>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800932a:	f000 fe3d 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800932e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009338:	4619      	mov	r1, r3
 800933a:	481c      	ldr	r0, [pc, #112]	; (80093ac <MX_TIM4_Init+0xe8>)
 800933c:	f7fc fb28 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8009346:	f000 fe2f 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800934a:	4818      	ldr	r0, [pc, #96]	; (80093ac <MX_TIM4_Init+0xe8>)
 800934c:	f7fb ff79 	bl	8005242 <HAL_TIM_PWM_Init>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8009356:	f000 fe27 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800935e:	2300      	movs	r3, #0
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009362:	f107 031c 	add.w	r3, r7, #28
 8009366:	4619      	mov	r1, r3
 8009368:	4810      	ldr	r0, [pc, #64]	; (80093ac <MX_TIM4_Init+0xe8>)
 800936a:	f7fd f87b 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8009374:	f000 fe18 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009378:	2360      	movs	r3, #96	; 0x60
 800937a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009380:	2300      	movs	r3, #0
 8009382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009388:	463b      	mov	r3, r7
 800938a:	2200      	movs	r2, #0
 800938c:	4619      	mov	r1, r3
 800938e:	4807      	ldr	r0, [pc, #28]	; (80093ac <MX_TIM4_Init+0xe8>)
 8009390:	f7fc f9e6 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800939a:	f000 fe05 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800939e:	4803      	ldr	r0, [pc, #12]	; (80093ac <MX_TIM4_Init+0xe8>)
 80093a0:	f000 fff2 	bl	800a388 <HAL_TIM_MspPostInit>

}
 80093a4:	bf00      	nop
 80093a6:	3738      	adds	r7, #56	; 0x38
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	2000029c 	.word	0x2000029c
 80093b0:	40000800 	.word	0x40000800

080093b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08e      	sub	sp, #56	; 0x38
 80093b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	605a      	str	r2, [r3, #4]
 80093c4:	609a      	str	r2, [r3, #8]
 80093c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093c8:	f107 031c 	add.w	r3, r7, #28
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	605a      	str	r2, [r3, #4]
 80093d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093d4:	463b      	mov	r3, r7
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	605a      	str	r2, [r3, #4]
 80093dc:	609a      	str	r2, [r3, #8]
 80093de:	60da      	str	r2, [r3, #12]
 80093e0:	611a      	str	r2, [r3, #16]
 80093e2:	615a      	str	r2, [r3, #20]
 80093e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80093e6:	4b33      	ldr	r3, [pc, #204]	; (80094b4 <MX_TIM5_Init+0x100>)
 80093e8:	4a33      	ldr	r2, [pc, #204]	; (80094b8 <MX_TIM5_Init+0x104>)
 80093ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 480;
 80093ec:	4b31      	ldr	r3, [pc, #196]	; (80094b4 <MX_TIM5_Init+0x100>)
 80093ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80093f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093f4:	4b2f      	ldr	r3, [pc, #188]	; (80094b4 <MX_TIM5_Init+0x100>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 499;
 80093fa:	4b2e      	ldr	r3, [pc, #184]	; (80094b4 <MX_TIM5_Init+0x100>)
 80093fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009400:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009402:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <MX_TIM5_Init+0x100>)
 8009404:	2200      	movs	r2, #0
 8009406:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009408:	4b2a      	ldr	r3, [pc, #168]	; (80094b4 <MX_TIM5_Init+0x100>)
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800940e:	4829      	ldr	r0, [pc, #164]	; (80094b4 <MX_TIM5_Init+0x100>)
 8009410:	f7fb fe9a 	bl	8005148 <HAL_TIM_Base_Init>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 800941a:	f000 fdc5 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800941e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009428:	4619      	mov	r1, r3
 800942a:	4822      	ldr	r0, [pc, #136]	; (80094b4 <MX_TIM5_Init+0x100>)
 800942c:	f7fc fab0 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8009436:	f000 fdb7 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800943a:	481e      	ldr	r0, [pc, #120]	; (80094b4 <MX_TIM5_Init+0x100>)
 800943c:	f7fb ff01 	bl	8005242 <HAL_TIM_PWM_Init>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8009446:	f000 fdaf 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800944e:	2300      	movs	r3, #0
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009452:	f107 031c 	add.w	r3, r7, #28
 8009456:	4619      	mov	r1, r3
 8009458:	4816      	ldr	r0, [pc, #88]	; (80094b4 <MX_TIM5_Init+0x100>)
 800945a:	f7fd f803 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8009464:	f000 fda0 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009468:	2360      	movs	r3, #96	; 0x60
 800946a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009470:	2300      	movs	r3, #0
 8009472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009478:	463b      	mov	r3, r7
 800947a:	2208      	movs	r2, #8
 800947c:	4619      	mov	r1, r3
 800947e:	480d      	ldr	r0, [pc, #52]	; (80094b4 <MX_TIM5_Init+0x100>)
 8009480:	f7fc f96e 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800948a:	f000 fd8d 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800948e:	463b      	mov	r3, r7
 8009490:	220c      	movs	r2, #12
 8009492:	4619      	mov	r1, r3
 8009494:	4807      	ldr	r0, [pc, #28]	; (80094b4 <MX_TIM5_Init+0x100>)
 8009496:	f7fc f963 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80094a0:	f000 fd82 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80094a4:	4803      	ldr	r0, [pc, #12]	; (80094b4 <MX_TIM5_Init+0x100>)
 80094a6:	f000 ff6f 	bl	800a388 <HAL_TIM_MspPostInit>

}
 80094aa:	bf00      	nop
 80094ac:	3738      	adds	r7, #56	; 0x38
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	2000077c 	.word	0x2000077c
 80094b8:	40000c00 	.word	0x40000c00

080094bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b09a      	sub	sp, #104	; 0x68
 80094c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	605a      	str	r2, [r3, #4]
 80094cc:	609a      	str	r2, [r3, #8]
 80094ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	605a      	str	r2, [r3, #4]
 80094da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	605a      	str	r2, [r3, #4]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	611a      	str	r2, [r3, #16]
 80094ec:	615a      	str	r2, [r3, #20]
 80094ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	222c      	movs	r2, #44	; 0x2c
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fa16 	bl	800a928 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80094fc:	4b42      	ldr	r3, [pc, #264]	; (8009608 <MX_TIM8_Init+0x14c>)
 80094fe:	4a43      	ldr	r2, [pc, #268]	; (800960c <MX_TIM8_Init+0x150>)
 8009500:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 48000;
 8009502:	4b41      	ldr	r3, [pc, #260]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009504:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8009508:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800950a:	4b3f      	ldr	r3, [pc, #252]	; (8009608 <MX_TIM8_Init+0x14c>)
 800950c:	2200      	movs	r2, #0
 800950e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 29940;
 8009510:	4b3d      	ldr	r3, [pc, #244]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009512:	f247 42f4 	movw	r2, #29940	; 0x74f4
 8009516:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009518:	4b3b      	ldr	r3, [pc, #236]	; (8009608 <MX_TIM8_Init+0x14c>)
 800951a:	2200      	movs	r2, #0
 800951c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800951e:	4b3a      	ldr	r3, [pc, #232]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009520:	2200      	movs	r2, #0
 8009522:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009524:	4b38      	ldr	r3, [pc, #224]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009526:	2280      	movs	r2, #128	; 0x80
 8009528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800952a:	4837      	ldr	r0, [pc, #220]	; (8009608 <MX_TIM8_Init+0x14c>)
 800952c:	f7fb fe0c 	bl	8005148 <HAL_TIM_Base_Init>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009536:	f000 fd37 	bl	8009fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800953a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800953e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009544:	4619      	mov	r1, r3
 8009546:	4830      	ldr	r0, [pc, #192]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009548:	f7fc fa22 	bl	8005990 <HAL_TIM_ConfigClockSource>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009552:	f000 fd29 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8009556:	482c      	ldr	r0, [pc, #176]	; (8009608 <MX_TIM8_Init+0x14c>)
 8009558:	f7fb fe3e 	bl	80051d8 <HAL_TIM_OC_Init>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009562:	f000 fd21 	bl	8009fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009566:	2300      	movs	r3, #0
 8009568:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800956a:	2300      	movs	r3, #0
 800956c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800956e:	2300      	movs	r3, #0
 8009570:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009576:	4619      	mov	r1, r3
 8009578:	4823      	ldr	r0, [pc, #140]	; (8009608 <MX_TIM8_Init+0x14c>)
 800957a:	f7fc ff73 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009584:	f000 fd10 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009588:	2300      	movs	r3, #0
 800958a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009590:	2300      	movs	r3, #0
 8009592:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009598:	2300      	movs	r3, #0
 800959a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800959c:	2300      	movs	r3, #0
 800959e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80095a0:	2300      	movs	r3, #0
 80095a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095a8:	2200      	movs	r2, #0
 80095aa:	4619      	mov	r1, r3
 80095ac:	4816      	ldr	r0, [pc, #88]	; (8009608 <MX_TIM8_Init+0x14c>)
 80095ae:	f7fc f859 	bl	8005664 <HAL_TIM_OC_ConfigChannel>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80095b8:	f000 fcf6 	bl	8009fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80095bc:	2300      	movs	r3, #0
 80095be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80095d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80095da:	2300      	movs	r3, #0
 80095dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80095de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4805      	ldr	r0, [pc, #20]	; (8009608 <MX_TIM8_Init+0x14c>)
 80095f2:	f7fc ff8b 	bl	800650c <HAL_TIMEx_ConfigBreakDeadTime>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80095fc:	f000 fcd4 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009600:	bf00      	nop
 8009602:	3768      	adds	r7, #104	; 0x68
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	2000025c 	.word	0x2000025c
 800960c:	40010400 	.word	0x40010400

08009610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009616:	1d3b      	adds	r3, r7, #4
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	609a      	str	r2, [r3, #8]
 8009620:	60da      	str	r2, [r3, #12]
 8009622:	611a      	str	r2, [r3, #16]
 8009624:	615a      	str	r2, [r3, #20]
 8009626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009628:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <MX_TIM13_Init+0x90>)
 800962a:	4a1e      	ldr	r2, [pc, #120]	; (80096a4 <MX_TIM13_Init+0x94>)
 800962c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 480;
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009630:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009634:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009638:	2200      	movs	r2, #0
 800963a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 333;
 800963c:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <MX_TIM13_Init+0x90>)
 800963e:	f240 124d 	movw	r2, #333	; 0x14d
 8009642:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009646:	2200      	movs	r2, #0
 8009648:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <MX_TIM13_Init+0x90>)
 800964c:	2280      	movs	r2, #128	; 0x80
 800964e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009650:	4813      	ldr	r0, [pc, #76]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009652:	f7fb fd79 	bl	8005148 <HAL_TIM_Base_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800965c:	f000 fca4 	bl	8009fa8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8009660:	480f      	ldr	r0, [pc, #60]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009662:	f7fb fdb9 	bl	80051d8 <HAL_TIM_OC_Init>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800966c:	f000 fc9c 	bl	8009fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009670:	2300      	movs	r3, #0
 8009672:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800967c:	2300      	movs	r3, #0
 800967e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	2200      	movs	r2, #0
 8009684:	4619      	mov	r1, r3
 8009686:	4806      	ldr	r0, [pc, #24]	; (80096a0 <MX_TIM13_Init+0x90>)
 8009688:	f7fb ffec 	bl	8005664 <HAL_TIM_OC_ConfigChannel>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8009692:	f000 fc89 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8009696:	bf00      	nop
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20000888 	.word	0x20000888
 80096a4:	40001c00 	.word	0x40001c00

080096a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80096ac:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096ae:	4a1b      	ldr	r2, [pc, #108]	; (800971c <MX_USART3_UART_Init+0x74>)
 80096b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80096b2:	4b19      	ldr	r3, [pc, #100]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80096b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80096ba:	4b17      	ldr	r3, [pc, #92]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096bc:	2200      	movs	r2, #0
 80096be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80096c0:	4b15      	ldr	r3, [pc, #84]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80096c6:	4b14      	ldr	r3, [pc, #80]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80096cc:	4b12      	ldr	r3, [pc, #72]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096ce:	220c      	movs	r2, #12
 80096d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096d2:	4b11      	ldr	r3, [pc, #68]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80096d8:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096da:	2200      	movs	r2, #0
 80096dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	621a      	str	r2, [r3, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 80096ea:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 80096f6:	4b08      	ldr	r3, [pc, #32]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <MX_USART3_UART_Init+0x70>)
 80096fe:	2200      	movs	r2, #0
 8009700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <MX_USART3_UART_Init+0x70>)
 8009704:	f7fc ff94 	bl	8006630 <HAL_UART_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800970e:	f000 fc4b 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009712:	bf00      	nop
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	200002f0 	.word	0x200002f0
 800971c:	40004800 	.word	0x40004800

08009720 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009724:	4b16      	ldr	r3, [pc, #88]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009726:	4a17      	ldr	r2, [pc, #92]	; (8009784 <MX_USB_OTG_FS_PCD_Init+0x64>)
 8009728:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800972a:	4b15      	ldr	r3, [pc, #84]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800972c:	2209      	movs	r2, #9
 800972e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009730:	4b13      	ldr	r3, [pc, #76]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009732:	2202      	movs	r2, #2
 8009734:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009736:	4b12      	ldr	r3, [pc, #72]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009738:	2200      	movs	r2, #0
 800973a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800973e:	2200      	movs	r2, #0
 8009740:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009744:	2202      	movs	r2, #2
 8009746:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800974a:	2201      	movs	r2, #1
 800974c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009750:	2200      	movs	r2, #0
 8009752:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009756:	2200      	movs	r2, #0
 8009758:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800975c:	2201      	movs	r2, #1
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009762:	2201      	movs	r2, #1
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009766:	4b06      	ldr	r3, [pc, #24]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009768:	2200      	movs	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800976c:	4804      	ldr	r0, [pc, #16]	; (8009780 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800976e:	f7f9 f9c9 	bl	8002b04 <HAL_PCD_Init>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <MX_USB_OTG_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8009778:	f000 fc16 	bl	8009fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800977c:	bf00      	nop
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000374 	.word	0x20000374
 8009784:	40080000 	.word	0x40080000

08009788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08e      	sub	sp, #56	; 0x38
 800978c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800978e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	605a      	str	r2, [r3, #4]
 8009798:	609a      	str	r2, [r3, #8]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800979e:	4a88      	ldr	r2, [pc, #544]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097a0:	4b87      	ldr	r3, [pc, #540]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097a6:	f043 0304 	orr.w	r3, r3, #4
 80097aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ae:	4b84      	ldr	r3, [pc, #528]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	623b      	str	r3, [r7, #32]
 80097ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80097bc:	4a80      	ldr	r2, [pc, #512]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097be:	4b80      	ldr	r3, [pc, #512]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097cc:	4b7c      	ldr	r3, [pc, #496]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d6:	61fb      	str	r3, [r7, #28]
 80097d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097da:	4a79      	ldr	r2, [pc, #484]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097dc:	4b78      	ldr	r3, [pc, #480]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ea:	4b75      	ldr	r3, [pc, #468]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097f8:	4a71      	ldr	r2, [pc, #452]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097fa:	4b71      	ldr	r3, [pc, #452]	; (80099c0 <MX_GPIO_Init+0x238>)
 80097fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009800:	f043 0302 	orr.w	r3, r3, #2
 8009804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009808:	4b6d      	ldr	r3, [pc, #436]	; (80099c0 <MX_GPIO_Init+0x238>)
 800980a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009816:	4a6a      	ldr	r2, [pc, #424]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009818:	4b69      	ldr	r3, [pc, #420]	; (80099c0 <MX_GPIO_Init+0x238>)
 800981a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800981e:	f043 0320 	orr.w	r3, r3, #32
 8009822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009826:	4b66      	ldr	r3, [pc, #408]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009834:	4a62      	ldr	r2, [pc, #392]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009836:	4b62      	ldr	r3, [pc, #392]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800983c:	f043 0310 	orr.w	r3, r3, #16
 8009840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009844:	4b5e      	ldr	r3, [pc, #376]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009852:	4a5b      	ldr	r2, [pc, #364]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009854:	4b5a      	ldr	r3, [pc, #360]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800985a:	f043 0308 	orr.w	r3, r3, #8
 800985e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009862:	4b57      	ldr	r3, [pc, #348]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009868:	f003 0308 	and.w	r3, r3, #8
 800986c:	60bb      	str	r3, [r7, #8]
 800986e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009870:	4a53      	ldr	r2, [pc, #332]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009872:	4b53      	ldr	r3, [pc, #332]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009880:	4b4f      	ldr	r3, [pc, #316]	; (80099c0 <MX_GPIO_Init+0x238>)
 8009882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988a:	607b      	str	r3, [r7, #4]
 800988c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800988e:	2200      	movs	r2, #0
 8009890:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8009894:	484b      	ldr	r0, [pc, #300]	; (80099c4 <MX_GPIO_Init+0x23c>)
 8009896:	f7f9 f91d 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800989a:	2200      	movs	r2, #0
 800989c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098a0:	4849      	ldr	r0, [pc, #292]	; (80099c8 <MX_GPIO_Init+0x240>)
 80098a2:	f7f9 f917 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80098a6:	2200      	movs	r2, #0
 80098a8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80098ac:	4847      	ldr	r0, [pc, #284]	; (80099cc <MX_GPIO_Init+0x244>)
 80098ae:	f7f9 f911 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80098b2:	2200      	movs	r2, #0
 80098b4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80098b8:	4845      	ldr	r0, [pc, #276]	; (80099d0 <MX_GPIO_Init+0x248>)
 80098ba:	f7f9 f90b 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80098be:	2200      	movs	r2, #0
 80098c0:	2140      	movs	r1, #64	; 0x40
 80098c2:	4844      	ldr	r0, [pc, #272]	; (80099d4 <MX_GPIO_Init+0x24c>)
 80098c4:	f7f9 f906 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80098c8:	2200      	movs	r2, #0
 80098ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098ce:	4842      	ldr	r0, [pc, #264]	; (80099d8 <MX_GPIO_Init+0x250>)
 80098d0:	f7f9 f900 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80098d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80098da:	4b40      	ldr	r3, [pc, #256]	; (80099dc <MX_GPIO_Init+0x254>)
 80098dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80098e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e6:	4619      	mov	r1, r3
 80098e8:	483d      	ldr	r0, [pc, #244]	; (80099e0 <MX_GPIO_Init+0x258>)
 80098ea:	f7f8 ff3d 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80098ee:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098f4:	2301      	movs	r3, #1
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098fc:	2300      	movs	r3, #0
 80098fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009904:	4619      	mov	r1, r3
 8009906:	482f      	ldr	r0, [pc, #188]	; (80099c4 <MX_GPIO_Init+0x23c>)
 8009908:	f7f8 ff2e 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800990c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009912:	2301      	movs	r3, #1
 8009914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009916:	2300      	movs	r3, #0
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800991a:	2300      	movs	r3, #0
 800991c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800991e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009922:	4619      	mov	r1, r3
 8009924:	4828      	ldr	r0, [pc, #160]	; (80099c8 <MX_GPIO_Init+0x240>)
 8009926:	f7f8 ff1f 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800992a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009930:	2301      	movs	r3, #1
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009934:	2300      	movs	r3, #0
 8009936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009938:	2300      	movs	r3, #0
 800993a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800993c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009940:	4619      	mov	r1, r3
 8009942:	4822      	ldr	r0, [pc, #136]	; (80099cc <MX_GPIO_Init+0x244>)
 8009944:	f7f8 ff10 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009948:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800994e:	2301      	movs	r3, #1
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009952:	2300      	movs	r3, #0
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009956:	2300      	movs	r3, #0
 8009958:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800995a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800995e:	4619      	mov	r1, r3
 8009960:	481b      	ldr	r0, [pc, #108]	; (80099d0 <MX_GPIO_Init+0x248>)
 8009962:	f7f8 ff01 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800996a:	2301      	movs	r3, #1
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996e:	2300      	movs	r3, #0
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009972:	2300      	movs	r3, #0
 8009974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800997a:	4619      	mov	r1, r3
 800997c:	4815      	ldr	r0, [pc, #84]	; (80099d4 <MX_GPIO_Init+0x24c>)
 800997e:	f7f8 fef3 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8009982:	2380      	movs	r3, #128	; 0x80
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009986:	2300      	movs	r3, #0
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998a:	2300      	movs	r3, #0
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800998e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009992:	4619      	mov	r1, r3
 8009994:	480f      	ldr	r0, [pc, #60]	; (80099d4 <MX_GPIO_Init+0x24c>)
 8009996:	f7f8 fee7 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800999a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099a0:	2301      	movs	r3, #1
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099a8:	2300      	movs	r3, #0
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099b0:	4619      	mov	r1, r3
 80099b2:	4809      	ldr	r0, [pc, #36]	; (80099d8 <MX_GPIO_Init+0x250>)
 80099b4:	f7f8 fed8 	bl	8002768 <HAL_GPIO_Init>

}
 80099b8:	bf00      	nop
 80099ba:	3738      	adds	r7, #56	; 0x38
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	58024400 	.word	0x58024400
 80099c4:	58021400 	.word	0x58021400
 80099c8:	58021000 	.word	0x58021000
 80099cc:	58020400 	.word	0x58020400
 80099d0:	58020c00 	.word	0x58020c00
 80099d4:	58021800 	.word	0x58021800
 80099d8:	58020000 	.word	0x58020000
 80099dc:	11110000 	.word	0x11110000
 80099e0:	58020800 	.word	0x58020800

080099e4 <StringSlice>:
//}
//void RidePWM(void) {
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3,PWM);
//}

void *StringSlice(void){
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0

	    int m = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	607b      	str	r3, [r7, #4]
	    char *p = strtok (Rx_Buffer, "!");
 80099ee:	490f      	ldr	r1, [pc, #60]	; (8009a2c <StringSlice+0x48>)
 80099f0:	480f      	ldr	r0, [pc, #60]	; (8009a30 <StringSlice+0x4c>)
 80099f2:	f001 fc7b 	bl	800b2ec <strtok>
 80099f6:	6038      	str	r0, [r7, #0]

	    while (p != "\r")
 80099f8:	e00e      	b.n	8009a18 <StringSlice+0x34>
	    {
	        Command[m++] = p;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	490c      	ldr	r1, [pc, #48]	; (8009a34 <StringSlice+0x50>)
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        printf("%s\n", p);
 8009a08:	6838      	ldr	r0, [r7, #0]
 8009a0a:	f001 fc3b 	bl	800b284 <puts>
	    	p = strtok (NULL, "!");
 8009a0e:	4907      	ldr	r1, [pc, #28]	; (8009a2c <StringSlice+0x48>)
 8009a10:	2000      	movs	r0, #0
 8009a12:	f001 fc6b 	bl	800b2ec <strtok>
 8009a16:	6038      	str	r0, [r7, #0]
	    while (p != "\r")
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <StringSlice+0x54>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d1ec      	bne.n	80099fa <StringSlice+0x16>
	    }

	return 0;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0800e0f4 	.word	0x0800e0f4
 8009a30:	20000980 	.word	0x20000980
 8009a34:	20000b08 	.word	0x20000b08
 8009a38:	0800e0f8 	.word	0x0800e0f8

08009a3c <StringSort>:



void StringSort(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
	/*
	 * Split the string into components
	 */

	StringSlice();
 8009a42:	f7ff ffcf 	bl	80099e4 <StringSlice>
	Device=(uint8_t)(Command[1]);				// Determine the device type
 8009a46:	4ba2      	ldr	r3, [pc, #648]	; (8009cd0 <StringSort+0x294>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4ba1      	ldr	r3, [pc, #644]	; (8009cd4 <StringSort+0x298>)
 8009a4e:	701a      	strb	r2, [r3, #0]
	Timer = Command[2];							// Load the timer address
 8009a50:	4b9f      	ldr	r3, [pc, #636]	; (8009cd0 <StringSort+0x294>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4ba0      	ldr	r3, [pc, #640]	; (8009cd8 <StringSort+0x29c>)
 8009a58:	701a      	strb	r2, [r3, #0]
	Channel=Command[3];							// Set the channel address
 8009a5a:	4b9d      	ldr	r3, [pc, #628]	; (8009cd0 <StringSort+0x294>)
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	4b9e      	ldr	r3, [pc, #632]	; (8009cdc <StringSort+0x2a0>)
 8009a62:	701a      	strb	r2, [r3, #0]
	State = (uint8_t)(Command[4]);				// Boolean identifier for State
 8009a64:	4b9a      	ldr	r3, [pc, #616]	; (8009cd0 <StringSort+0x294>)
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b9d      	ldr	r3, [pc, #628]	; (8009ce0 <StringSort+0x2a4>)
 8009a6c:	701a      	strb	r2, [r3, #0]

	char strLen = strlen(Rx_Buffer);			// Find the string length of the Rx_Buffer
 8009a6e:	489d      	ldr	r0, [pc, #628]	; (8009ce4 <StringSort+0x2a8>)
 8009a70:	f7f6 fc36 	bl	80002e0 <strlen>
 8009a74:	4603      	mov	r3, r0
 8009a76:	71bb      	strb	r3, [r7, #6]
	switch (strLen) {
 8009a78:	79bb      	ldrb	r3, [r7, #6]
 8009a7a:	2b06      	cmp	r3, #6
 8009a7c:	d00f      	beq.n	8009a9e <StringSort+0x62>
 8009a7e:	2b07      	cmp	r3, #7
 8009a80:	d016      	beq.n	8009ab0 <StringSort+0x74>
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d11a      	bne.n	8009abc <StringSort+0x80>
		case 5 :		Brightness[0] = '0';
 8009a86:	4b98      	ldr	r3, [pc, #608]	; (8009ce8 <StringSort+0x2ac>)
 8009a88:	2230      	movs	r2, #48	; 0x30
 8009a8a:	701a      	strb	r2, [r3, #0]
						Brightness[1] = '0';
 8009a8c:	4b96      	ldr	r3, [pc, #600]	; (8009ce8 <StringSort+0x2ac>)
 8009a8e:	2230      	movs	r2, #48	; 0x30
 8009a90:	705a      	strb	r2, [r3, #1]
						strcpy(Brightness, Command[5]);
 8009a92:	4b8f      	ldr	r3, [pc, #572]	; (8009cd0 <StringSort+0x294>)
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4893      	ldr	r0, [pc, #588]	; (8009ce8 <StringSort+0x2ac>)
 8009a9a:	f001 fc1f 	bl	800b2dc <strcpy>

		case 6 :		Brightness[0] = '0';
 8009a9e:	4b92      	ldr	r3, [pc, #584]	; (8009ce8 <StringSort+0x2ac>)
 8009aa0:	2230      	movs	r2, #48	; 0x30
 8009aa2:	701a      	strb	r2, [r3, #0]
						strcpy(Brightness, Command[5]);
 8009aa4:	4b8a      	ldr	r3, [pc, #552]	; (8009cd0 <StringSort+0x294>)
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	488f      	ldr	r0, [pc, #572]	; (8009ce8 <StringSort+0x2ac>)
 8009aac:	f001 fc16 	bl	800b2dc <strcpy>

		case 7 :		strcpy(Brightness, Command[5]);
 8009ab0:	4b87      	ldr	r3, [pc, #540]	; (8009cd0 <StringSort+0x294>)
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	488c      	ldr	r0, [pc, #560]	; (8009ce8 <StringSort+0x2ac>)
 8009ab8:	f001 fc10 	bl	800b2dc <strcpy>
	}
	PWM = atoi(Brightness);
 8009abc:	488a      	ldr	r0, [pc, #552]	; (8009ce8 <StringSort+0x2ac>)
 8009abe:	f000 ff0a 	bl	800a8d6 <atoi>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	4b89      	ldr	r3, [pc, #548]	; (8009cec <StringSort+0x2b0>)
 8009ac6:	601a      	str	r2, [r3, #0]
	/*
	 * Perform the operation
	 */
	switch(Device)
 8009ac8:	4b82      	ldr	r3, [pc, #520]	; (8009cd4 <StringSort+0x298>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b31      	cmp	r3, #49	; 0x31
 8009ace:	f040 81e6 	bne.w	8009e9e <StringSort+0x462>
	{
	case '1':									// Case 1 is a light

		switch (Timer) {
 8009ad2:	4b81      	ldr	r3, [pc, #516]	; (8009cd8 <StringSort+0x29c>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	3b32      	subs	r3, #50	; 0x32
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	f200 81df 	bhi.w	8009e9c <StringSort+0x460>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <StringSort+0xa8>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009bd3 	.word	0x08009bd3
 8009aec:	08009caf 	.word	0x08009caf
 8009af0:	08009db3 	.word	0x08009db3
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); case '3': HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);}
//				case '4': __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,PWM);
//				switch (State) {case '0': HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4); case '1': HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);}
//					}
		case '2':
			switch (Channel) {
 8009af4:	4b79      	ldr	r3, [pc, #484]	; (8009cdc <StringSort+0x2a0>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	3b31      	subs	r3, #49	; 0x31
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	f200 81c7 	bhi.w	8009e8e <StringSort+0x452>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <StringSort+0xcc>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b19 	.word	0x08009b19
 8009b0c:	08009b47 	.word	0x08009b47
 8009b10:	08009b75 	.word	0x08009b75
 8009b14:	08009ba3 	.word	0x08009ba3
				case '1': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,PWM);
 8009b18:	4b75      	ldr	r3, [pc, #468]	; (8009cf0 <StringSort+0x2b4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a73      	ldr	r2, [pc, #460]	; (8009cec <StringSort+0x2b0>)
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	635a      	str	r2, [r3, #52]	; 0x34
					switch (State) {
 8009b22:	4b6f      	ldr	r3, [pc, #444]	; (8009ce0 <StringSort+0x2a4>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	d002      	beq.n	8009b30 <StringSort+0xf4>
 8009b2a:	2b31      	cmp	r3, #49	; 0x31
 8009b2c:	d006      	beq.n	8009b3c <StringSort+0x100>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); break;
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
					}break;
 8009b2e:	e04f      	b.n	8009bd0 <StringSort+0x194>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); break;
 8009b30:	2100      	movs	r1, #0
 8009b32:	486f      	ldr	r0, [pc, #444]	; (8009cf0 <StringSort+0x2b4>)
 8009b34:	f7fb fc06 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009b38:	bf00      	nop
					}break;
 8009b3a:	e049      	b.n	8009bd0 <StringSort+0x194>
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	486c      	ldr	r0, [pc, #432]	; (8009cf0 <StringSort+0x2b4>)
 8009b40:	f7fb fbb4 	bl	80052ac <HAL_TIM_PWM_Start>
					}break;
 8009b44:	e044      	b.n	8009bd0 <StringSort+0x194>
				case '2': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,PWM);
 8009b46:	4b6a      	ldr	r3, [pc, #424]	; (8009cf0 <StringSort+0x2b4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a68      	ldr	r2, [pc, #416]	; (8009cec <StringSort+0x2b0>)
 8009b4c:	6812      	ldr	r2, [r2, #0]
 8009b4e:	639a      	str	r2, [r3, #56]	; 0x38
					switch (State) {
 8009b50:	4b63      	ldr	r3, [pc, #396]	; (8009ce0 <StringSort+0x2a4>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b30      	cmp	r3, #48	; 0x30
 8009b56:	d002      	beq.n	8009b5e <StringSort+0x122>
 8009b58:	2b31      	cmp	r3, #49	; 0x31
 8009b5a:	d006      	beq.n	8009b6a <StringSort+0x12e>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); break;
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
					} break;
 8009b5c:	e038      	b.n	8009bd0 <StringSort+0x194>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); break;
 8009b5e:	2104      	movs	r1, #4
 8009b60:	4863      	ldr	r0, [pc, #396]	; (8009cf0 <StringSort+0x2b4>)
 8009b62:	f7fb fbef 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009b66:	bf00      	nop
					} break;
 8009b68:	e032      	b.n	8009bd0 <StringSort+0x194>
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	4860      	ldr	r0, [pc, #384]	; (8009cf0 <StringSort+0x2b4>)
 8009b6e:	f7fb fb9d 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009b72:	e02d      	b.n	8009bd0 <StringSort+0x194>
				case '3': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,PWM);
 8009b74:	4b5e      	ldr	r3, [pc, #376]	; (8009cf0 <StringSort+0x2b4>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a5c      	ldr	r2, [pc, #368]	; (8009cec <StringSort+0x2b0>)
 8009b7a:	6812      	ldr	r2, [r2, #0]
 8009b7c:	63da      	str	r2, [r3, #60]	; 0x3c
					switch (State) {
 8009b7e:	4b58      	ldr	r3, [pc, #352]	; (8009ce0 <StringSort+0x2a4>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b30      	cmp	r3, #48	; 0x30
 8009b84:	d002      	beq.n	8009b8c <StringSort+0x150>
 8009b86:	2b31      	cmp	r3, #49	; 0x31
 8009b88:	d006      	beq.n	8009b98 <StringSort+0x15c>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3); break;
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
					}break;
 8009b8a:	e021      	b.n	8009bd0 <StringSort+0x194>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3); break;
 8009b8c:	2108      	movs	r1, #8
 8009b8e:	4858      	ldr	r0, [pc, #352]	; (8009cf0 <StringSort+0x2b4>)
 8009b90:	f7fb fbd8 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009b94:	bf00      	nop
					}break;
 8009b96:	e01b      	b.n	8009bd0 <StringSort+0x194>
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8009b98:	2108      	movs	r1, #8
 8009b9a:	4855      	ldr	r0, [pc, #340]	; (8009cf0 <StringSort+0x2b4>)
 8009b9c:	f7fb fb86 	bl	80052ac <HAL_TIM_PWM_Start>
					}break;
 8009ba0:	e016      	b.n	8009bd0 <StringSort+0x194>
				case '4': __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,PWM);
 8009ba2:	4b53      	ldr	r3, [pc, #332]	; (8009cf0 <StringSort+0x2b4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a51      	ldr	r2, [pc, #324]	; (8009cec <StringSort+0x2b0>)
 8009ba8:	6812      	ldr	r2, [r2, #0]
 8009baa:	641a      	str	r2, [r3, #64]	; 0x40
					switch (State) {
 8009bac:	4b4c      	ldr	r3, [pc, #304]	; (8009ce0 <StringSort+0x2a4>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b30      	cmp	r3, #48	; 0x30
 8009bb2:	d002      	beq.n	8009bba <StringSort+0x17e>
 8009bb4:	2b31      	cmp	r3, #49	; 0x31
 8009bb6:	d006      	beq.n	8009bc6 <StringSort+0x18a>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); break;
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
					} break;
 8009bb8:	e009      	b.n	8009bce <StringSort+0x192>
						case '0': HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); break;
 8009bba:	210c      	movs	r1, #12
 8009bbc:	484c      	ldr	r0, [pc, #304]	; (8009cf0 <StringSort+0x2b4>)
 8009bbe:	f7fb fbc1 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009bc2:	bf00      	nop
					} break;
 8009bc4:	e003      	b.n	8009bce <StringSort+0x192>
						case '1': HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8009bc6:	210c      	movs	r1, #12
 8009bc8:	4849      	ldr	r0, [pc, #292]	; (8009cf0 <StringSort+0x2b4>)
 8009bca:	f7fb fb6f 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009bce:	bf00      	nop
			} break;
 8009bd0:	e15d      	b.n	8009e8e <StringSort+0x452>

		case '3':
			switch (Channel) {
 8009bd2:	4b42      	ldr	r3, [pc, #264]	; (8009cdc <StringSort+0x2a0>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	3b31      	subs	r3, #49	; 0x31
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	f200 815a 	bhi.w	8009e92 <StringSort+0x456>
 8009bde:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <StringSort+0x1a8>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009bf5 	.word	0x08009bf5
 8009be8:	08009c23 	.word	0x08009c23
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c7f 	.word	0x08009c7f
				case '1': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8009bf4:	4b3f      	ldr	r3, [pc, #252]	; (8009cf4 <StringSort+0x2b8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a3c      	ldr	r2, [pc, #240]	; (8009cec <StringSort+0x2b0>)
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	635a      	str	r2, [r3, #52]	; 0x34
					switch (State) {
 8009bfe:	4b38      	ldr	r3, [pc, #224]	; (8009ce0 <StringSort+0x2a4>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b30      	cmp	r3, #48	; 0x30
 8009c04:	d002      	beq.n	8009c0c <StringSort+0x1d0>
 8009c06:	2b31      	cmp	r3, #49	; 0x31
 8009c08:	d006      	beq.n	8009c18 <StringSort+0x1dc>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); break;
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
					} break;
 8009c0a:	e04f      	b.n	8009cac <StringSort+0x270>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); break;
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4839      	ldr	r0, [pc, #228]	; (8009cf4 <StringSort+0x2b8>)
 8009c10:	f7fb fb98 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009c14:	bf00      	nop
					} break;
 8009c16:	e049      	b.n	8009cac <StringSort+0x270>
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4836      	ldr	r0, [pc, #216]	; (8009cf4 <StringSort+0x2b8>)
 8009c1c:	f7fb fb46 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009c20:	e044      	b.n	8009cac <StringSort+0x270>
				case '2': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,PWM);
 8009c22:	4b34      	ldr	r3, [pc, #208]	; (8009cf4 <StringSort+0x2b8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a31      	ldr	r2, [pc, #196]	; (8009cec <StringSort+0x2b0>)
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38
					switch (State) {
 8009c2c:	4b2c      	ldr	r3, [pc, #176]	; (8009ce0 <StringSort+0x2a4>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b30      	cmp	r3, #48	; 0x30
 8009c32:	d002      	beq.n	8009c3a <StringSort+0x1fe>
 8009c34:	2b31      	cmp	r3, #49	; 0x31
 8009c36:	d006      	beq.n	8009c46 <StringSort+0x20a>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); break;
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
					} break;
 8009c38:	e038      	b.n	8009cac <StringSort+0x270>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); break;
 8009c3a:	2104      	movs	r1, #4
 8009c3c:	482d      	ldr	r0, [pc, #180]	; (8009cf4 <StringSort+0x2b8>)
 8009c3e:	f7fb fb81 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009c42:	bf00      	nop
					} break;
 8009c44:	e032      	b.n	8009cac <StringSort+0x270>
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8009c46:	2104      	movs	r1, #4
 8009c48:	482a      	ldr	r0, [pc, #168]	; (8009cf4 <StringSort+0x2b8>)
 8009c4a:	f7fb fb2f 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009c4e:	e02d      	b.n	8009cac <StringSort+0x270>
				case '3': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3,PWM);
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <StringSort+0x2b8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a25      	ldr	r2, [pc, #148]	; (8009cec <StringSort+0x2b0>)
 8009c56:	6812      	ldr	r2, [r2, #0]
 8009c58:	63da      	str	r2, [r3, #60]	; 0x3c
					switch (State) {
 8009c5a:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <StringSort+0x2a4>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b30      	cmp	r3, #48	; 0x30
 8009c60:	d002      	beq.n	8009c68 <StringSort+0x22c>
 8009c62:	2b31      	cmp	r3, #49	; 0x31
 8009c64:	d006      	beq.n	8009c74 <StringSort+0x238>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); break;
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
					} break;
 8009c66:	e021      	b.n	8009cac <StringSort+0x270>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); break;
 8009c68:	2108      	movs	r1, #8
 8009c6a:	4822      	ldr	r0, [pc, #136]	; (8009cf4 <StringSort+0x2b8>)
 8009c6c:	f7fb fb6a 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009c70:	bf00      	nop
					} break;
 8009c72:	e01b      	b.n	8009cac <StringSort+0x270>
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8009c74:	2108      	movs	r1, #8
 8009c76:	481f      	ldr	r0, [pc, #124]	; (8009cf4 <StringSort+0x2b8>)
 8009c78:	f7fb fb18 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009c7c:	e016      	b.n	8009cac <StringSort+0x270>
				case '4': __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4,PWM);
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <StringSort+0x2b8>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a1a      	ldr	r2, [pc, #104]	; (8009cec <StringSort+0x2b0>)
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
					switch (State) {
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <StringSort+0x2a4>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b30      	cmp	r3, #48	; 0x30
 8009c8e:	d002      	beq.n	8009c96 <StringSort+0x25a>
 8009c90:	2b31      	cmp	r3, #49	; 0x31
 8009c92:	d006      	beq.n	8009ca2 <StringSort+0x266>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4); break;
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
					} break;
 8009c94:	e009      	b.n	8009caa <StringSort+0x26e>
						case '0': HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4); break;
 8009c96:	210c      	movs	r1, #12
 8009c98:	4816      	ldr	r0, [pc, #88]	; (8009cf4 <StringSort+0x2b8>)
 8009c9a:	f7fb fb53 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009c9e:	bf00      	nop
					} break;
 8009ca0:	e003      	b.n	8009caa <StringSort+0x26e>
						case '1': HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8009ca2:	210c      	movs	r1, #12
 8009ca4:	4813      	ldr	r0, [pc, #76]	; (8009cf4 <StringSort+0x2b8>)
 8009ca6:	f7fb fb01 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009caa:	bf00      	nop
			} break;
 8009cac:	e0f1      	b.n	8009e92 <StringSort+0x456>

		case '4':
			switch (Channel) {
 8009cae:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <StringSort+0x2a0>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	3b31      	subs	r3, #49	; 0x31
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	f200 80ee 	bhi.w	8009e96 <StringSort+0x45a>
 8009cba:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <StringSort+0x284>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009cf9 	.word	0x08009cf9
 8009cc4:	08009d27 	.word	0x08009d27
 8009cc8:	08009d55 	.word	0x08009d55
 8009ccc:	08009d83 	.word	0x08009d83
 8009cd0:	20000b08 	.word	0x20000b08
 8009cd4:	20000370 	.word	0x20000370
 8009cd8:	200007fd 	.word	0x200007fd
 8009cdc:	200007fc 	.word	0x200007fc
 8009ce0:	20000880 	.word	0x20000880
 8009ce4:	20000980 	.word	0x20000980
 8009ce8:	20000008 	.word	0x20000008
 8009cec:	200009e8 	.word	0x200009e8
 8009cf0:	200009ec 	.word	0x200009ec
 8009cf4:	200007bc 	.word	0x200007bc
				case '1': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1,PWM);
 8009cf8:	4b71      	ldr	r3, [pc, #452]	; (8009ec0 <StringSort+0x484>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a71      	ldr	r2, [pc, #452]	; (8009ec4 <StringSort+0x488>)
 8009cfe:	6812      	ldr	r2, [r2, #0]
 8009d00:	635a      	str	r2, [r3, #52]	; 0x34
					switch (State) {
 8009d02:	4b71      	ldr	r3, [pc, #452]	; (8009ec8 <StringSort+0x48c>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b30      	cmp	r3, #48	; 0x30
 8009d08:	d002      	beq.n	8009d10 <StringSort+0x2d4>
 8009d0a:	2b31      	cmp	r3, #49	; 0x31
 8009d0c:	d006      	beq.n	8009d1c <StringSort+0x2e0>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); break;
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
					} break;
 8009d0e:	e04f      	b.n	8009db0 <StringSort+0x374>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); break;
 8009d10:	2100      	movs	r1, #0
 8009d12:	486b      	ldr	r0, [pc, #428]	; (8009ec0 <StringSort+0x484>)
 8009d14:	f7fb fb16 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009d18:	bf00      	nop
					} break;
 8009d1a:	e049      	b.n	8009db0 <StringSort+0x374>
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4868      	ldr	r0, [pc, #416]	; (8009ec0 <StringSort+0x484>)
 8009d20:	f7fb fac4 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009d24:	e044      	b.n	8009db0 <StringSort+0x374>
				case '2': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2,PWM);
 8009d26:	4b66      	ldr	r3, [pc, #408]	; (8009ec0 <StringSort+0x484>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a66      	ldr	r2, [pc, #408]	; (8009ec4 <StringSort+0x488>)
 8009d2c:	6812      	ldr	r2, [r2, #0]
 8009d2e:	639a      	str	r2, [r3, #56]	; 0x38
					switch (State) {
 8009d30:	4b65      	ldr	r3, [pc, #404]	; (8009ec8 <StringSort+0x48c>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b30      	cmp	r3, #48	; 0x30
 8009d36:	d002      	beq.n	8009d3e <StringSort+0x302>
 8009d38:	2b31      	cmp	r3, #49	; 0x31
 8009d3a:	d006      	beq.n	8009d4a <StringSort+0x30e>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2); break;
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
					} break;
 8009d3c:	e038      	b.n	8009db0 <StringSort+0x374>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2); break;
 8009d3e:	2104      	movs	r1, #4
 8009d40:	485f      	ldr	r0, [pc, #380]	; (8009ec0 <StringSort+0x484>)
 8009d42:	f7fb faff 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009d46:	bf00      	nop
					} break;
 8009d48:	e032      	b.n	8009db0 <StringSort+0x374>
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8009d4a:	2104      	movs	r1, #4
 8009d4c:	485c      	ldr	r0, [pc, #368]	; (8009ec0 <StringSort+0x484>)
 8009d4e:	f7fb faad 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009d52:	e02d      	b.n	8009db0 <StringSort+0x374>
				case '3': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,PWM);
 8009d54:	4b5a      	ldr	r3, [pc, #360]	; (8009ec0 <StringSort+0x484>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a5a      	ldr	r2, [pc, #360]	; (8009ec4 <StringSort+0x488>)
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	63da      	str	r2, [r3, #60]	; 0x3c
					switch (State) {
 8009d5e:	4b5a      	ldr	r3, [pc, #360]	; (8009ec8 <StringSort+0x48c>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b30      	cmp	r3, #48	; 0x30
 8009d64:	d002      	beq.n	8009d6c <StringSort+0x330>
 8009d66:	2b31      	cmp	r3, #49	; 0x31
 8009d68:	d006      	beq.n	8009d78 <StringSort+0x33c>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3); break;
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					} break;
 8009d6a:	e021      	b.n	8009db0 <StringSort+0x374>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3); break;
 8009d6c:	2108      	movs	r1, #8
 8009d6e:	4854      	ldr	r0, [pc, #336]	; (8009ec0 <StringSort+0x484>)
 8009d70:	f7fb fae8 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009d74:	bf00      	nop
					} break;
 8009d76:	e01b      	b.n	8009db0 <StringSort+0x374>
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8009d78:	2108      	movs	r1, #8
 8009d7a:	4851      	ldr	r0, [pc, #324]	; (8009ec0 <StringSort+0x484>)
 8009d7c:	f7fb fa96 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009d80:	e016      	b.n	8009db0 <StringSort+0x374>
				case '4': __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4,PWM);
 8009d82:	4b4f      	ldr	r3, [pc, #316]	; (8009ec0 <StringSort+0x484>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a4f      	ldr	r2, [pc, #316]	; (8009ec4 <StringSort+0x488>)
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	641a      	str	r2, [r3, #64]	; 0x40
					switch (State) {
 8009d8c:	4b4e      	ldr	r3, [pc, #312]	; (8009ec8 <StringSort+0x48c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b30      	cmp	r3, #48	; 0x30
 8009d92:	d002      	beq.n	8009d9a <StringSort+0x35e>
 8009d94:	2b31      	cmp	r3, #49	; 0x31
 8009d96:	d006      	beq.n	8009da6 <StringSort+0x36a>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); break;
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
					} break;
 8009d98:	e009      	b.n	8009dae <StringSort+0x372>
						case '0': HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); break;
 8009d9a:	210c      	movs	r1, #12
 8009d9c:	4848      	ldr	r0, [pc, #288]	; (8009ec0 <StringSort+0x484>)
 8009d9e:	f7fb fad1 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009da2:	bf00      	nop
					} break;
 8009da4:	e003      	b.n	8009dae <StringSort+0x372>
						case '1': HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8009da6:	210c      	movs	r1, #12
 8009da8:	4845      	ldr	r0, [pc, #276]	; (8009ec0 <StringSort+0x484>)
 8009daa:	f7fb fa7f 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009dae:	bf00      	nop
			} break;
 8009db0:	e071      	b.n	8009e96 <StringSort+0x45a>

		case '5':
			switch (Channel) {
 8009db2:	4b46      	ldr	r3, [pc, #280]	; (8009ecc <StringSort+0x490>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	3b31      	subs	r3, #49	; 0x31
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d86e      	bhi.n	8009e9a <StringSort+0x45e>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <StringSort+0x388>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009e03 	.word	0x08009e03
 8009dcc:	08009e31 	.word	0x08009e31
 8009dd0:	08009e5f 	.word	0x08009e5f
				case '1': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_1,PWM);
 8009dd4:	4b3e      	ldr	r3, [pc, #248]	; (8009ed0 <StringSort+0x494>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a3a      	ldr	r2, [pc, #232]	; (8009ec4 <StringSort+0x488>)
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	635a      	str	r2, [r3, #52]	; 0x34
					switch (State) {
 8009dde:	4b3a      	ldr	r3, [pc, #232]	; (8009ec8 <StringSort+0x48c>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b30      	cmp	r3, #48	; 0x30
 8009de4:	d002      	beq.n	8009dec <StringSort+0x3b0>
 8009de6:	2b31      	cmp	r3, #49	; 0x31
 8009de8:	d006      	beq.n	8009df8 <StringSort+0x3bc>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1); break;
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
					}break;
 8009dea:	e04f      	b.n	8009e8c <StringSort+0x450>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1); break;
 8009dec:	2100      	movs	r1, #0
 8009dee:	4838      	ldr	r0, [pc, #224]	; (8009ed0 <StringSort+0x494>)
 8009df0:	f7fb faa8 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009df4:	bf00      	nop
					}break;
 8009df6:	e049      	b.n	8009e8c <StringSort+0x450>
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4835      	ldr	r0, [pc, #212]	; (8009ed0 <StringSort+0x494>)
 8009dfc:	f7fb fa56 	bl	80052ac <HAL_TIM_PWM_Start>
					}break;
 8009e00:	e044      	b.n	8009e8c <StringSort+0x450>
				case '2': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2,PWM);
 8009e02:	4b33      	ldr	r3, [pc, #204]	; (8009ed0 <StringSort+0x494>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a2f      	ldr	r2, [pc, #188]	; (8009ec4 <StringSort+0x488>)
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
					switch (State) {
 8009e0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <StringSort+0x48c>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b30      	cmp	r3, #48	; 0x30
 8009e12:	d002      	beq.n	8009e1a <StringSort+0x3de>
 8009e14:	2b31      	cmp	r3, #49	; 0x31
 8009e16:	d006      	beq.n	8009e26 <StringSort+0x3ea>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2); break;
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
					} break;
 8009e18:	e038      	b.n	8009e8c <StringSort+0x450>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2); break;
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	482c      	ldr	r0, [pc, #176]	; (8009ed0 <StringSort+0x494>)
 8009e1e:	f7fb fa91 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009e22:	bf00      	nop
					} break;
 8009e24:	e032      	b.n	8009e8c <StringSort+0x450>
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8009e26:	2104      	movs	r1, #4
 8009e28:	4829      	ldr	r0, [pc, #164]	; (8009ed0 <StringSort+0x494>)
 8009e2a:	f7fb fa3f 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009e2e:	e02d      	b.n	8009e8c <StringSort+0x450>
				case '3': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3,PWM);
 8009e30:	4b27      	ldr	r3, [pc, #156]	; (8009ed0 <StringSort+0x494>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a23      	ldr	r2, [pc, #140]	; (8009ec4 <StringSort+0x488>)
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	63da      	str	r2, [r3, #60]	; 0x3c
					switch (State) {
 8009e3a:	4b23      	ldr	r3, [pc, #140]	; (8009ec8 <StringSort+0x48c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b30      	cmp	r3, #48	; 0x30
 8009e40:	d002      	beq.n	8009e48 <StringSort+0x40c>
 8009e42:	2b31      	cmp	r3, #49	; 0x31
 8009e44:	d006      	beq.n	8009e54 <StringSort+0x418>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); break;
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
					} break;
 8009e46:	e021      	b.n	8009e8c <StringSort+0x450>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); break;
 8009e48:	2108      	movs	r1, #8
 8009e4a:	4821      	ldr	r0, [pc, #132]	; (8009ed0 <StringSort+0x494>)
 8009e4c:	f7fb fa7a 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009e50:	bf00      	nop
					} break;
 8009e52:	e01b      	b.n	8009e8c <StringSort+0x450>
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8009e54:	2108      	movs	r1, #8
 8009e56:	481e      	ldr	r0, [pc, #120]	; (8009ed0 <StringSort+0x494>)
 8009e58:	f7fb fa28 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009e5c:	e016      	b.n	8009e8c <StringSort+0x450>
				case '4': __HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4,PWM);
 8009e5e:	4b1c      	ldr	r3, [pc, #112]	; (8009ed0 <StringSort+0x494>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <StringSort+0x488>)
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	641a      	str	r2, [r3, #64]	; 0x40
					switch (State) {
 8009e68:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <StringSort+0x48c>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b30      	cmp	r3, #48	; 0x30
 8009e6e:	d002      	beq.n	8009e76 <StringSort+0x43a>
 8009e70:	2b31      	cmp	r3, #49	; 0x31
 8009e72:	d006      	beq.n	8009e82 <StringSort+0x446>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4); break;
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
					} break;
 8009e74:	e009      	b.n	8009e8a <StringSort+0x44e>
						case '0': HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4); break;
 8009e76:	210c      	movs	r1, #12
 8009e78:	4815      	ldr	r0, [pc, #84]	; (8009ed0 <StringSort+0x494>)
 8009e7a:	f7fb fa63 	bl	8005344 <HAL_TIM_PWM_Stop>
 8009e7e:	bf00      	nop
					} break;
 8009e80:	e003      	b.n	8009e8a <StringSort+0x44e>
						case '1': HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8009e82:	210c      	movs	r1, #12
 8009e84:	4812      	ldr	r0, [pc, #72]	; (8009ed0 <StringSort+0x494>)
 8009e86:	f7fb fa11 	bl	80052ac <HAL_TIM_PWM_Start>
					} break;
 8009e8a:	bf00      	nop
			} break;
 8009e8c:	e005      	b.n	8009e9a <StringSort+0x45e>
			} break;
 8009e8e:	bf00      	nop
 8009e90:	e004      	b.n	8009e9c <StringSort+0x460>
			} break;
 8009e92:	bf00      	nop
 8009e94:	e002      	b.n	8009e9c <StringSort+0x460>
			} break;
 8009e96:	bf00      	nop
 8009e98:	e000      	b.n	8009e9c <StringSort+0x460>
			} break;
 8009e9a:	bf00      	nop
//					case '4': __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_4,PWM);
//						switch (State) {
//							case '0': HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
//							case '1': HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);}
//				}
		} break;
 8009e9c:	bf00      	nop
	}
	for (uint8_t i=0;i<100;i++) {Rx_String[i]=0;}
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	71fb      	strb	r3, [r7, #7]
 8009ea2:	e006      	b.n	8009eb2 <StringSort+0x476>
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	4a0b      	ldr	r2, [pc, #44]	; (8009ed4 <StringSort+0x498>)
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	54d1      	strb	r1, [r2, r3]
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	71fb      	strb	r3, [r7, #7]
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	2b63      	cmp	r3, #99	; 0x63
 8009eb6:	d9f5      	bls.n	8009ea4 <StringSort+0x468>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	2000029c 	.word	0x2000029c
 8009ec4:	200009e8 	.word	0x200009e8
 8009ec8:	20000880 	.word	0x20000880
 8009ecc:	200007fc 	.word	0x200007fc
 8009ed0:	2000077c 	.word	0x2000077c
 8009ed4:	20000a34 	.word	0x20000a34

08009ed8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART3)  //current UART
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a28      	ldr	r2, [pc, #160]	; (8009f88 <HAL_UART_RxCpltCallback+0xb0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d149      	bne.n	8009f7e <HAL_UART_RxCpltCallback+0xa6>
	{
    	if (Rx_index==0) {for (i=0;i<100;i++) {
 8009eea:	4b28      	ldr	r3, [pc, #160]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d110      	bne.n	8009f14 <HAL_UART_RxCpltCallback+0x3c>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
 8009ef6:	e00a      	b.n	8009f0e <HAL_UART_RxCpltCallback+0x36>
			Rx_Buffer[i]=0;   //clear Rx_Buffer before receiving new data
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	4a25      	ldr	r2, [pc, #148]	; (8009f90 <HAL_UART_RxCpltCallback+0xb8>)
 8009efc:	2100      	movs	r1, #0
 8009efe:	54d1      	strb	r1, [r2, r3]
			Rx_String[i]=0;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	4a24      	ldr	r2, [pc, #144]	; (8009f94 <HAL_UART_RxCpltCallback+0xbc>)
 8009f04:	2100      	movs	r1, #0
 8009f06:	54d1      	strb	r1, [r2, r3]
    	if (Rx_index==0) {for (i=0;i<100;i++) {
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b63      	cmp	r3, #99	; 0x63
 8009f12:	d9f1      	bls.n	8009ef8 <HAL_UART_RxCpltCallback+0x20>
		}}


	if (Rx_data[0]!=13) //if received data different from ascii 13 (enter)
 8009f14:	4b20      	ldr	r3, [pc, #128]	; (8009f98 <HAL_UART_RxCpltCallback+0xc0>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b0d      	cmp	r3, #13
 8009f1a:	d00b      	beq.n	8009f34 <HAL_UART_RxCpltCallback+0x5c>
	{
		Rx_Buffer[Rx_index++]=Rx_data[0];    //add data to Rx_Buffer
 8009f1c:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	b2d1      	uxtb	r1, r2
 8009f24:	4a19      	ldr	r2, [pc, #100]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f26:	7011      	strb	r1, [r2, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4b1b      	ldr	r3, [pc, #108]	; (8009f98 <HAL_UART_RxCpltCallback+0xc0>)
 8009f2c:	7819      	ldrb	r1, [r3, #0]
 8009f2e:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <HAL_UART_RxCpltCallback+0xb8>)
 8009f30:	5499      	strb	r1, [r3, r2]
 8009f32:	e01b      	b.n	8009f6c <HAL_UART_RxCpltCallback+0x94>
	}
	else            //if received data = 13
	{
		Rx_Buffer[Rx_index++]=Rx_data[0];    //add data to Rx_Buffer
 8009f34:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	b2d1      	uxtb	r1, r2
 8009f3c:	4a13      	ldr	r2, [pc, #76]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f3e:	7011      	strb	r1, [r2, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	4b15      	ldr	r3, [pc, #84]	; (8009f98 <HAL_UART_RxCpltCallback+0xc0>)
 8009f44:	7819      	ldrb	r1, [r3, #0]
 8009f46:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <HAL_UART_RxCpltCallback+0xb8>)
 8009f48:	5499      	strb	r1, [r3, r2]
		Rx_Buffer[Rx_index++]="!";    //add data to Rx_Buffer
 8009f4a:	4b10      	ldr	r3, [pc, #64]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	b2d1      	uxtb	r1, r2
 8009f52:	4a0e      	ldr	r2, [pc, #56]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f54:	7011      	strb	r1, [r2, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <HAL_UART_RxCpltCallback+0xc4>)
 8009f5a:	b2d9      	uxtb	r1, r3
 8009f5c:	4b0c      	ldr	r3, [pc, #48]	; (8009f90 <HAL_UART_RxCpltCallback+0xb8>)
 8009f5e:	5499      	strb	r1, [r3, r2]
		Rx_index=0;
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <HAL_UART_RxCpltCallback+0xb4>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
		Transfer_cplt=1;//transfer complete, data is ready to read
 8009f66:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <HAL_UART_RxCpltCallback+0xc8>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, Rx_data, 1);   //activate UART receive interrupt every time
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	490a      	ldr	r1, [pc, #40]	; (8009f98 <HAL_UART_RxCpltCallback+0xc0>)
 8009f70:	480c      	ldr	r0, [pc, #48]	; (8009fa4 <HAL_UART_RxCpltCallback+0xcc>)
 8009f72:	f7fc fc3b 	bl	80067ec <HAL_UART_Receive_IT>
	strcpy (Rx_String, Rx_Buffer);
 8009f76:	4906      	ldr	r1, [pc, #24]	; (8009f90 <HAL_UART_RxCpltCallback+0xb8>)
 8009f78:	4806      	ldr	r0, [pc, #24]	; (8009f94 <HAL_UART_RxCpltCallback+0xbc>)
 8009f7a:	f001 f9af 	bl	800b2dc <strcpy>
//		HAL_UART_Transmit_IT(&huart3, bufferEcho, len);
//	}

	}

}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40004800 	.word	0x40004800
 8009f8c:	20000774 	.word	0x20000774
 8009f90:	20000980 	.word	0x20000980
 8009f94:	20000a34 	.word	0x20000a34
 8009f98:	20000778 	.word	0x20000778
 8009f9c:	0800e0f4 	.word	0x0800e0f4
 8009fa0:	20000258 	.word	0x20000258
 8009fa4:	200002f0 	.word	0x200002f0

08009fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009fac:	bf00      	nop
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <HAL_MspInit+0x30>)
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <HAL_MspInit+0x30>)
 8009fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fc6:	f043 0302 	orr.w	r3, r3, #2
 8009fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <HAL_MspInit+0x30>)
 8009fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	607b      	str	r3, [r7, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	58024400 	.word	0x58024400

08009fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08c      	sub	sp, #48	; 0x30
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff4:	f107 031c 	add.w	r3, r7, #28
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	605a      	str	r2, [r3, #4]
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a37      	ldr	r2, [pc, #220]	; (800a0e8 <HAL_ADC_MspInit+0xfc>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d168      	bne.n	800a0e0 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a00e:	4a37      	ldr	r2, [pc, #220]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a010:	4b36      	ldr	r3, [pc, #216]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a016:	f043 0320 	orr.w	r3, r3, #32
 800a01a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a01e:	4b33      	ldr	r3, [pc, #204]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a024:	f003 0320 	and.w	r3, r3, #32
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a02c:	4a2f      	ldr	r2, [pc, #188]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a02e:	4b2f      	ldr	r3, [pc, #188]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a034:	f043 0304 	orr.w	r3, r3, #4
 800a038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a03c:	4b2b      	ldr	r3, [pc, #172]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a03e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a04a:	4a28      	ldr	r2, [pc, #160]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a04c:	4b27      	ldr	r3, [pc, #156]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a052:	f043 0302 	orr.w	r3, r3, #2
 800a056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a05c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a068:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a06a:	4b20      	ldr	r3, [pc, #128]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a06c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a070:	f043 0320 	orr.w	r3, r3, #32
 800a074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a078:	4b1c      	ldr	r3, [pc, #112]	; (800a0ec <HAL_ADC_MspInit+0x100>)
 800a07a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a086:	2310      	movs	r3, #16
 800a088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a08a:	2303      	movs	r3, #3
 800a08c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a092:	f107 031c 	add.w	r3, r7, #28
 800a096:	4619      	mov	r1, r3
 800a098:	4815      	ldr	r0, [pc, #84]	; (800a0f0 <HAL_ADC_MspInit+0x104>)
 800a09a:	f7f8 fb65 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0aa:	f107 031c 	add.w	r3, r7, #28
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4810      	ldr	r0, [pc, #64]	; (800a0f4 <HAL_ADC_MspInit+0x108>)
 800a0b2:	f7f8 fb59 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a0b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a0c4:	f107 031c 	add.w	r3, r7, #28
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	480b      	ldr	r0, [pc, #44]	; (800a0f8 <HAL_ADC_MspInit+0x10c>)
 800a0cc:	f7f8 fb4c 	bl	8002768 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	2012      	movs	r0, #18
 800a0d6:	f7f8 f872 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a0da:	2012      	movs	r0, #18
 800a0dc:	f7f8 f889 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a0e0:	bf00      	nop
 800a0e2:	3730      	adds	r7, #48	; 0x30
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40022000 	.word	0x40022000
 800a0ec:	58024400 	.word	0x58024400
 800a0f0:	58020800 	.word	0x58020800
 800a0f4:	58020400 	.word	0x58020400
 800a0f8:	58021400 	.word	0x58021400

0800a0fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	605a      	str	r2, [r3, #4]
 800a10e:	609a      	str	r2, [r3, #8]
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1c      	ldr	r2, [pc, #112]	; (800a18c <HAL_DAC_MspInit+0x90>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d131      	bne.n	800a182 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a11e:	4a1c      	ldr	r2, [pc, #112]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a120:	4b1b      	ldr	r3, [pc, #108]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a12a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a12e:	4b18      	ldr	r3, [pc, #96]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <HAL_DAC_MspInit+0x94>)
 800a14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a15a:	2310      	movs	r3, #16
 800a15c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a15e:	2303      	movs	r3, #3
 800a160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a162:	2300      	movs	r3, #0
 800a164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a166:	f107 0314 	add.w	r3, r7, #20
 800a16a:	4619      	mov	r1, r3
 800a16c:	4809      	ldr	r0, [pc, #36]	; (800a194 <HAL_DAC_MspInit+0x98>)
 800a16e:	f7f8 fafb 	bl	8002768 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	2036      	movs	r0, #54	; 0x36
 800a178:	f7f8 f821 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a17c:	2036      	movs	r0, #54	; 0x36
 800a17e:	f7f8 f838 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800a182:	bf00      	nop
 800a184:	3728      	adds	r7, #40	; 0x28
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40007400 	.word	0x40007400
 800a190:	58024400 	.word	0x58024400
 800a194:	58020000 	.word	0x58020000

0800a198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08a      	sub	sp, #40	; 0x28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a71      	ldr	r2, [pc, #452]	; (800a36c <HAL_TIM_Base_MspInit+0x1d4>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d12f      	bne.n	800a20a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a1aa:	4a71      	ldr	r2, [pc, #452]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a1ac:	4b70      	ldr	r3, [pc, #448]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a1ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a1ba:	4b6d      	ldr	r3, [pc, #436]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a1bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	2018      	movs	r0, #24
 800a1ce:	f7f7 fff6 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800a1d2:	2018      	movs	r0, #24
 800a1d4:	f7f8 f80d 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2100      	movs	r1, #0
 800a1dc:	2019      	movs	r0, #25
 800a1de:	f7f7 ffee 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a1e2:	2019      	movs	r0, #25
 800a1e4:	f7f8 f805 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	201a      	movs	r0, #26
 800a1ee:	f7f7 ffe6 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800a1f2:	201a      	movs	r0, #26
 800a1f4:	f7f7 fffd 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	201b      	movs	r0, #27
 800a1fe:	f7f7 ffde 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800a202:	201b      	movs	r0, #27
 800a204:	f7f7 fff5 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800a208:	e0ac      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM2)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a212:	d10f      	bne.n	800a234 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a214:	4a56      	ldr	r2, [pc, #344]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a216:	4b56      	ldr	r3, [pc, #344]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a224:	4b52      	ldr	r3, [pc, #328]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	623b      	str	r3, [r7, #32]
 800a230:	6a3b      	ldr	r3, [r7, #32]
}
 800a232:	e097      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM3)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a4e      	ldr	r2, [pc, #312]	; (800a374 <HAL_TIM_Base_MspInit+0x1dc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d117      	bne.n	800a26e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a23e:	4a4c      	ldr	r2, [pc, #304]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a240:	4b4b      	ldr	r3, [pc, #300]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a246:	f043 0302 	orr.w	r3, r3, #2
 800a24a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a24e:	4b48      	ldr	r3, [pc, #288]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a25c:	2200      	movs	r2, #0
 800a25e:	2100      	movs	r1, #0
 800a260:	201d      	movs	r0, #29
 800a262:	f7f7 ffac 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a266:	201d      	movs	r0, #29
 800a268:	f7f7 ffc3 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 800a26c:	e07a      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM4)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a41      	ldr	r2, [pc, #260]	; (800a378 <HAL_TIM_Base_MspInit+0x1e0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d10f      	bne.n	800a298 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a278:	4a3d      	ldr	r2, [pc, #244]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a27a:	4b3d      	ldr	r3, [pc, #244]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a27c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a280:	f043 0304 	orr.w	r3, r3, #4
 800a284:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a288:	4b39      	ldr	r3, [pc, #228]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a28a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a28e:	f003 0304 	and.w	r3, r3, #4
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	69bb      	ldr	r3, [r7, #24]
}
 800a296:	e065      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM5)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a37      	ldr	r2, [pc, #220]	; (800a37c <HAL_TIM_Base_MspInit+0x1e4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d10f      	bne.n	800a2c2 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a2a2:	4a33      	ldr	r2, [pc, #204]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2a4:	4b32      	ldr	r3, [pc, #200]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2aa:	f043 0308 	orr.w	r3, r3, #8
 800a2ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a2b2:	4b2f      	ldr	r3, [pc, #188]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2b8:	f003 0308 	and.w	r3, r3, #8
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	697b      	ldr	r3, [r7, #20]
}
 800a2c0:	e050      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM8)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a2e      	ldr	r2, [pc, #184]	; (800a380 <HAL_TIM_Base_MspInit+0x1e8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d12f      	bne.n	800a32c <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a2cc:	4a28      	ldr	r2, [pc, #160]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2ce:	4b28      	ldr	r3, [pc, #160]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2d4:	f043 0302 	orr.w	r3, r3, #2
 800a2d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a2dc:	4b24      	ldr	r3, [pc, #144]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	202b      	movs	r0, #43	; 0x2b
 800a2f0:	f7f7 ff65 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800a2f4:	202b      	movs	r0, #43	; 0x2b
 800a2f6:	f7f7 ff7c 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	202c      	movs	r0, #44	; 0x2c
 800a300:	f7f7 ff5d 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800a304:	202c      	movs	r0, #44	; 0x2c
 800a306:	f7f7 ff74 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800a30a:	2200      	movs	r2, #0
 800a30c:	2100      	movs	r1, #0
 800a30e:	202d      	movs	r0, #45	; 0x2d
 800a310:	f7f7 ff55 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800a314:	202d      	movs	r0, #45	; 0x2d
 800a316:	f7f7 ff6c 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	202e      	movs	r0, #46	; 0x2e
 800a320:	f7f7 ff4d 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800a324:	202e      	movs	r0, #46	; 0x2e
 800a326:	f7f7 ff64 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 800a32a:	e01b      	b.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM13)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a14      	ldr	r2, [pc, #80]	; (800a384 <HAL_TIM_Base_MspInit+0x1ec>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d116      	bne.n	800a364 <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800a336:	4a0e      	ldr	r2, [pc, #56]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a33a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a346:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <HAL_TIM_Base_MspInit+0x1d8>)
 800a348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800a354:	2200      	movs	r2, #0
 800a356:	2100      	movs	r1, #0
 800a358:	202c      	movs	r0, #44	; 0x2c
 800a35a:	f7f7 ff30 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800a35e:	202c      	movs	r0, #44	; 0x2c
 800a360:	f7f7 ff47 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 800a364:	bf00      	nop
 800a366:	3728      	adds	r7, #40	; 0x28
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	40010000 	.word	0x40010000
 800a370:	58024400 	.word	0x58024400
 800a374:	40000400 	.word	0x40000400
 800a378:	40000800 	.word	0x40000800
 800a37c:	40000c00 	.word	0x40000c00
 800a380:	40010400 	.word	0x40010400
 800a384:	40001c00 	.word	0x40001c00

0800a388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08c      	sub	sp, #48	; 0x30
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a390:	f107 031c 	add.w	r3, r7, #28
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	605a      	str	r2, [r3, #4]
 800a39a:	609a      	str	r2, [r3, #8]
 800a39c:	60da      	str	r2, [r3, #12]
 800a39e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3a8:	d120      	bne.n	800a3ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3aa:	4a59      	ldr	r2, [pc, #356]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a3ac:	4b58      	ldr	r3, [pc, #352]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a3ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3b2:	f043 0302 	orr.w	r3, r3, #2
 800a3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3ba:	4b55      	ldr	r3, [pc, #340]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c0:	f003 0302 	and.w	r3, r3, #2
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Cabin1_Pin|Deck_Pin;
 800a3c8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800a3cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3de:	f107 031c 	add.w	r3, r7, #28
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	484b      	ldr	r0, [pc, #300]	; (800a514 <HAL_TIM_MspPostInit+0x18c>)
 800a3e6:	f7f8 f9bf 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800a3ea:	e08c      	b.n	800a506 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a49      	ldr	r2, [pc, #292]	; (800a518 <HAL_TIM_MspPostInit+0x190>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d13e      	bne.n	800a474 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3f6:	4a46      	ldr	r2, [pc, #280]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a3f8:	4b45      	ldr	r3, [pc, #276]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a3fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3fe:	f043 0304 	orr.w	r3, r3, #4
 800a402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a406:	4b42      	ldr	r3, [pc, #264]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a414:	4a3e      	ldr	r2, [pc, #248]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a416:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a41c:	f043 0302 	orr.w	r3, r3, #2
 800a420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a424:	4b3a      	ldr	r3, [pc, #232]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	613b      	str	r3, [r7, #16]
 800a430:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Nav_Pin;
 800a432:	2380      	movs	r3, #128	; 0x80
 800a434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a436:	2302      	movs	r3, #2
 800a438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a43e:	2300      	movs	r3, #0
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a442:	2302      	movs	r3, #2
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Nav_GPIO_Port, &GPIO_InitStruct);
 800a446:	f107 031c 	add.w	r3, r7, #28
 800a44a:	4619      	mov	r1, r3
 800a44c:	4833      	ldr	r0, [pc, #204]	; (800a51c <HAL_TIM_MspPostInit+0x194>)
 800a44e:	f7f8 f98b 	bl	8002768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Cabin2_Pin;
 800a452:	2310      	movs	r3, #16
 800a454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a456:	2302      	movs	r3, #2
 800a458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a45e:	2300      	movs	r3, #0
 800a460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a462:	2302      	movs	r3, #2
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Cabin2_GPIO_Port, &GPIO_InitStruct);
 800a466:	f107 031c 	add.w	r3, r7, #28
 800a46a:	4619      	mov	r1, r3
 800a46c:	4829      	ldr	r0, [pc, #164]	; (800a514 <HAL_TIM_MspPostInit+0x18c>)
 800a46e:	f7f8 f97b 	bl	8002768 <HAL_GPIO_Init>
}
 800a472:	e048      	b.n	800a506 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM4)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a29      	ldr	r2, [pc, #164]	; (800a520 <HAL_TIM_MspPostInit+0x198>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d11f      	bne.n	800a4be <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a47e:	4a24      	ldr	r2, [pc, #144]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a480:	4b23      	ldr	r3, [pc, #140]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a486:	f043 0302 	orr.w	r3, r3, #2
 800a48a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a48e:	4b20      	ldr	r3, [pc, #128]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Anchor_Pin;
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Anchor_GPIO_Port, &GPIO_InitStruct);
 800a4b0:	f107 031c 	add.w	r3, r7, #28
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4817      	ldr	r0, [pc, #92]	; (800a514 <HAL_TIM_MspPostInit+0x18c>)
 800a4b8:	f7f8 f956 	bl	8002768 <HAL_GPIO_Init>
}
 800a4bc:	e023      	b.n	800a506 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a18      	ldr	r2, [pc, #96]	; (800a524 <HAL_TIM_MspPostInit+0x19c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d11e      	bne.n	800a506 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4c8:	4a11      	ldr	r2, [pc, #68]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a4cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4d0:	f043 0301 	orr.w	r3, r3, #1
 800a4d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <HAL_TIM_MspPostInit+0x188>)
 800a4da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	60bb      	str	r3, [r7, #8]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Ride_Pin|GPIO_PIN_3;
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4fa:	f107 031c 	add.w	r3, r7, #28
 800a4fe:	4619      	mov	r1, r3
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <HAL_TIM_MspPostInit+0x1a0>)
 800a502:	f7f8 f931 	bl	8002768 <HAL_GPIO_Init>
}
 800a506:	bf00      	nop
 800a508:	3730      	adds	r7, #48	; 0x30
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	58024400 	.word	0x58024400
 800a514:	58020400 	.word	0x58020400
 800a518:	40000400 	.word	0x40000400
 800a51c:	58020800 	.word	0x58020800
 800a520:	40000800 	.word	0x40000800
 800a524:	40000c00 	.word	0x40000c00
 800a528:	58020000 	.word	0x58020000

0800a52c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08a      	sub	sp, #40	; 0x28
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <HAL_UART_MspInit+0x98>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d136      	bne.n	800a5bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a550:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a55a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a55e:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a568:	613b      	str	r3, [r7, #16]
 800a56a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a56c:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a56e:	4b16      	ldr	r3, [pc, #88]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a574:	f043 0308 	orr.w	r3, r3, #8
 800a578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a57c:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <HAL_UART_MspInit+0x9c>)
 800a57e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a58a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a58e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a590:	2302      	movs	r3, #2
 800a592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a598:	2300      	movs	r3, #0
 800a59a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a59c:	2307      	movs	r3, #7
 800a59e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a5a0:	f107 0314 	add.w	r3, r7, #20
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4809      	ldr	r0, [pc, #36]	; (800a5cc <HAL_UART_MspInit+0xa0>)
 800a5a8:	f7f8 f8de 	bl	8002768 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	2027      	movs	r0, #39	; 0x27
 800a5b2:	f7f7 fe04 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a5b6:	2027      	movs	r0, #39	; 0x27
 800a5b8:	f7f7 fe1b 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a5bc:	bf00      	nop
 800a5be:	3728      	adds	r7, #40	; 0x28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40004800 	.word	0x40004800
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	58020c00 	.word	0x58020c00

0800a5d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08a      	sub	sp, #40	; 0x28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
 800a5e4:	60da      	str	r2, [r3, #12]
 800a5e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a21      	ldr	r2, [pc, #132]	; (800a674 <HAL_PCD_MspInit+0xa4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d13b      	bne.n	800a66a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5f2:	4a21      	ldr	r2, [pc, #132]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a5f4:	4b20      	ldr	r3, [pc, #128]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a5f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a602:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 800a610:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a616:	2302      	movs	r3, #2
 800a618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a622:	230a      	movs	r3, #10
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a626:	f107 0314 	add.w	r3, r7, #20
 800a62a:	4619      	mov	r1, r3
 800a62c:	4813      	ldr	r0, [pc, #76]	; (800a67c <HAL_PCD_MspInit+0xac>)
 800a62e:	f7f8 f89b 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a632:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a638:	2300      	movs	r3, #0
 800a63a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a640:	f107 0314 	add.w	r3, r7, #20
 800a644:	4619      	mov	r1, r3
 800a646:	480d      	ldr	r0, [pc, #52]	; (800a67c <HAL_PCD_MspInit+0xac>)
 800a648:	f7f8 f88e 	bl	8002768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a64c:	4a0a      	ldr	r2, [pc, #40]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a658:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_PCD_MspInit+0xa8>)
 800a65e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800a66a:	bf00      	nop
 800a66c:	3728      	adds	r7, #40	; 0x28
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40080000 	.word	0x40080000
 800a678:	58024400 	.word	0x58024400
 800a67c:	58020000 	.word	0x58020000

0800a680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a68e:	b480      	push	{r7}
 800a690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a692:	e7fe      	b.n	800a692 <HardFault_Handler+0x4>

0800a694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a698:	e7fe      	b.n	800a698 <MemManage_Handler+0x4>

0800a69a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a69a:	b480      	push	{r7}
 800a69c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a69e:	e7fe      	b.n	800a69e <BusFault_Handler+0x4>

0800a6a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a6a4:	e7fe      	b.n	800a6a4 <UsageFault_Handler+0x4>

0800a6a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a6aa:	bf00      	nop
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a6b8:	bf00      	nop
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a6c6:	bf00      	nop
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6d4:	f7f6 f826 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a6e0:	4802      	ldr	r0, [pc, #8]	; (800a6ec <ADC_IRQHandler+0x10>)
 800a6e2:	f7f6 fbd9 	bl	8000e98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20000804 	.word	0x20000804

0800a6f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a6f4:	4802      	ldr	r0, [pc, #8]	; (800a700 <TIM1_BRK_IRQHandler+0x10>)
 800a6f6:	f7fa fe95 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800a6fa:	bf00      	nop
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000940 	.word	0x20000940

0800a704 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a708:	4802      	ldr	r0, [pc, #8]	; (800a714 <TIM1_UP_IRQHandler+0x10>)
 800a70a:	f7fa fe8b 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a70e:	bf00      	nop
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20000940 	.word	0x20000940

0800a718 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a71c:	4802      	ldr	r0, [pc, #8]	; (800a728 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a71e:	f7fa fe81 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a722:	bf00      	nop
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000940 	.word	0x20000940

0800a72c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a730:	4802      	ldr	r0, [pc, #8]	; (800a73c <TIM1_CC_IRQHandler+0x10>)
 800a732:	f7fa fe77 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000940 	.word	0x20000940

0800a740 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a744:	4802      	ldr	r0, [pc, #8]	; (800a750 <TIM3_IRQHandler+0x10>)
 800a746:	f7fa fe6d 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a74a:	bf00      	nop
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	200007bc 	.word	0x200007bc

0800a754 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a758:	4802      	ldr	r0, [pc, #8]	; (800a764 <USART3_IRQHandler+0x10>)
 800a75a:	f7fc f8e7 	bl	800692c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a75e:	bf00      	nop
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200002f0 	.word	0x200002f0

0800a768 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a76c:	4802      	ldr	r0, [pc, #8]	; (800a778 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800a76e:	f7fa fe59 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800a772:	bf00      	nop
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	2000025c 	.word	0x2000025c

0800a77c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a780:	4803      	ldr	r0, [pc, #12]	; (800a790 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800a782:	f7fa fe4f 	bl	8005424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800a786:	4803      	ldr	r0, [pc, #12]	; (800a794 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800a788:	f7fa fe4c 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800a78c:	bf00      	nop
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	2000025c 	.word	0x2000025c
 800a794:	20000888 	.word	0x20000888

0800a798 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a79c:	4802      	ldr	r0, [pc, #8]	; (800a7a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a79e:	f7fa fe41 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000025c 	.word	0x2000025c

0800a7ac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a7b0:	4802      	ldr	r0, [pc, #8]	; (800a7bc <TIM8_CC_IRQHandler+0x10>)
 800a7b2:	f7fa fe37 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	2000025c 	.word	0x2000025c

0800a7c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800a7c4:	4802      	ldr	r0, [pc, #8]	; (800a7d0 <TIM6_DAC_IRQHandler+0x10>)
 800a7c6:	f7f7 fd9c 	bl	8002302 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a7ca:	bf00      	nop
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200002dc 	.word	0x200002dc

0800a7d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a7d8:	4a26      	ldr	r2, [pc, #152]	; (800a874 <SystemInit+0xa0>)
 800a7da:	4b26      	ldr	r3, [pc, #152]	; (800a874 <SystemInit+0xa0>)
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a7e8:	4a23      	ldr	r2, [pc, #140]	; (800a878 <SystemInit+0xa4>)
 800a7ea:	4b23      	ldr	r3, [pc, #140]	; (800a878 <SystemInit+0xa4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f043 0301 	orr.w	r3, r3, #1
 800a7f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a7f4:	4b20      	ldr	r3, [pc, #128]	; (800a878 <SystemInit+0xa4>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800a7fa:	491f      	ldr	r1, [pc, #124]	; (800a878 <SystemInit+0xa4>)
 800a7fc:	4b1e      	ldr	r3, [pc, #120]	; (800a878 <SystemInit+0xa4>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <SystemInit+0xa8>)
 800a802:	4013      	ands	r3, r2
 800a804:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a806:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <SystemInit+0xa4>)
 800a808:	2200      	movs	r2, #0
 800a80a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a80c:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <SystemInit+0xa4>)
 800a80e:	2200      	movs	r2, #0
 800a810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a812:	4b19      	ldr	r3, [pc, #100]	; (800a878 <SystemInit+0xa4>)
 800a814:	2200      	movs	r2, #0
 800a816:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800a818:	4b17      	ldr	r3, [pc, #92]	; (800a878 <SystemInit+0xa4>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800a81e:	4b16      	ldr	r3, [pc, #88]	; (800a878 <SystemInit+0xa4>)
 800a820:	2200      	movs	r2, #0
 800a822:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800a824:	4b14      	ldr	r3, [pc, #80]	; (800a878 <SystemInit+0xa4>)
 800a826:	2200      	movs	r2, #0
 800a828:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a82a:	4b13      	ldr	r3, [pc, #76]	; (800a878 <SystemInit+0xa4>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <SystemInit+0xa4>)
 800a832:	2200      	movs	r2, #0
 800a834:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a836:	4b10      	ldr	r3, [pc, #64]	; (800a878 <SystemInit+0xa4>)
 800a838:	2200      	movs	r2, #0
 800a83a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <SystemInit+0xa4>)
 800a83e:	2200      	movs	r2, #0
 800a840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a842:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <SystemInit+0xa4>)
 800a844:	2200      	movs	r2, #0
 800a846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a848:	4a0b      	ldr	r2, [pc, #44]	; (800a878 <SystemInit+0xa4>)
 800a84a:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <SystemInit+0xa4>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a854:	4b08      	ldr	r3, [pc, #32]	; (800a878 <SystemInit+0xa4>)
 800a856:	2200      	movs	r2, #0
 800a858:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 800a85a:	4b09      	ldr	r3, [pc, #36]	; (800a880 <SystemInit+0xac>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a860:	4b04      	ldr	r3, [pc, #16]	; (800a874 <SystemInit+0xa0>)
 800a862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a866:	609a      	str	r2, [r3, #8]
#endif

}
 800a868:	bf00      	nop
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	e000ed00 	.word	0xe000ed00
 800a878:	58024400 	.word	0x58024400
 800a87c:	eaf6ed7f 	.word	0xeaf6ed7f
 800a880:	51008108 	.word	0x51008108

0800a884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a884:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a8bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a88a:	e003      	b.n	800a894 <LoopCopyDataInit>

0800a88c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a88c:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a88e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a892:	3104      	adds	r1, #4

0800a894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a894:	480b      	ldr	r0, [pc, #44]	; (800a8c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a89a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a89c:	d3f6      	bcc.n	800a88c <CopyDataInit>
  ldr  r2, =_sbss
 800a89e:	4a0b      	ldr	r2, [pc, #44]	; (800a8cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a8a0:	e002      	b.n	800a8a8 <LoopFillZerobss>

0800a8a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a8a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a8a4:	f842 3b04 	str.w	r3, [r2], #4

0800a8a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a8a8:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a8aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a8ac:	d3f9      	bcc.n	800a8a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a8ae:	f7ff ff91 	bl	800a7d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a8b2:	f000 f815 	bl	800a8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8b6:	f7fe f97b 	bl	8008bb0 <main>
  bx  lr    
 800a8ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a8bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a8c0:	0800e440 	.word	0x0800e440
  ldr  r0, =_sdata
 800a8c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a8c8:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 800a8cc:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800a8d0:	20000b34 	.word	0x20000b34

0800a8d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a8d4:	e7fe      	b.n	800a8d4 <ADC3_IRQHandler>

0800a8d6 <atoi>:
 800a8d6:	220a      	movs	r2, #10
 800a8d8:	2100      	movs	r1, #0
 800a8da:	f000 bddb 	b.w	800b494 <strtol>
	...

0800a8e0 <__libc_init_array>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4e0d      	ldr	r6, [pc, #52]	; (800a918 <__libc_init_array+0x38>)
 800a8e4:	4c0d      	ldr	r4, [pc, #52]	; (800a91c <__libc_init_array+0x3c>)
 800a8e6:	1ba4      	subs	r4, r4, r6
 800a8e8:	10a4      	asrs	r4, r4, #2
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	42a5      	cmp	r5, r4
 800a8ee:	d109      	bne.n	800a904 <__libc_init_array+0x24>
 800a8f0:	4e0b      	ldr	r6, [pc, #44]	; (800a920 <__libc_init_array+0x40>)
 800a8f2:	4c0c      	ldr	r4, [pc, #48]	; (800a924 <__libc_init_array+0x44>)
 800a8f4:	f003 fbc0 	bl	800e078 <_init>
 800a8f8:	1ba4      	subs	r4, r4, r6
 800a8fa:	10a4      	asrs	r4, r4, #2
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	42a5      	cmp	r5, r4
 800a900:	d105      	bne.n	800a90e <__libc_init_array+0x2e>
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a908:	4798      	blx	r3
 800a90a:	3501      	adds	r5, #1
 800a90c:	e7ee      	b.n	800a8ec <__libc_init_array+0xc>
 800a90e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a912:	4798      	blx	r3
 800a914:	3501      	adds	r5, #1
 800a916:	e7f2      	b.n	800a8fe <__libc_init_array+0x1e>
 800a918:	0800e438 	.word	0x0800e438
 800a91c:	0800e438 	.word	0x0800e438
 800a920:	0800e438 	.word	0x0800e438
 800a924:	0800e43c 	.word	0x0800e43c

0800a928 <memset>:
 800a928:	4402      	add	r2, r0
 800a92a:	4603      	mov	r3, r0
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d100      	bne.n	800a932 <memset+0xa>
 800a930:	4770      	bx	lr
 800a932:	f803 1b01 	strb.w	r1, [r3], #1
 800a936:	e7f9      	b.n	800a92c <memset+0x4>

0800a938 <__cvt>:
 800a938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a93a:	ed2d 8b02 	vpush	{d8}
 800a93e:	eeb0 8b40 	vmov.f64	d8, d0
 800a942:	b085      	sub	sp, #20
 800a944:	4617      	mov	r7, r2
 800a946:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a948:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a94a:	ee18 2a90 	vmov	r2, s17
 800a94e:	f025 0520 	bic.w	r5, r5, #32
 800a952:	2a00      	cmp	r2, #0
 800a954:	bfb6      	itet	lt
 800a956:	222d      	movlt	r2, #45	; 0x2d
 800a958:	2200      	movge	r2, #0
 800a95a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a95e:	2d46      	cmp	r5, #70	; 0x46
 800a960:	460c      	mov	r4, r1
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	d004      	beq.n	800a970 <__cvt+0x38>
 800a966:	2d45      	cmp	r5, #69	; 0x45
 800a968:	d100      	bne.n	800a96c <__cvt+0x34>
 800a96a:	3401      	adds	r4, #1
 800a96c:	2102      	movs	r1, #2
 800a96e:	e000      	b.n	800a972 <__cvt+0x3a>
 800a970:	2103      	movs	r1, #3
 800a972:	ab03      	add	r3, sp, #12
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	ab02      	add	r3, sp, #8
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	4622      	mov	r2, r4
 800a97c:	4633      	mov	r3, r6
 800a97e:	eeb0 0b48 	vmov.f64	d0, d8
 800a982:	f000 fee9 	bl	800b758 <_dtoa_r>
 800a986:	2d47      	cmp	r5, #71	; 0x47
 800a988:	d101      	bne.n	800a98e <__cvt+0x56>
 800a98a:	07fb      	lsls	r3, r7, #31
 800a98c:	d516      	bpl.n	800a9bc <__cvt+0x84>
 800a98e:	2d46      	cmp	r5, #70	; 0x46
 800a990:	eb00 0304 	add.w	r3, r0, r4
 800a994:	d10c      	bne.n	800a9b0 <__cvt+0x78>
 800a996:	7802      	ldrb	r2, [r0, #0]
 800a998:	2a30      	cmp	r2, #48	; 0x30
 800a99a:	d107      	bne.n	800a9ac <__cvt+0x74>
 800a99c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a4:	bf1c      	itt	ne
 800a9a6:	f1c4 0401 	rsbne	r4, r4, #1
 800a9aa:	6034      	strne	r4, [r6, #0]
 800a9ac:	6832      	ldr	r2, [r6, #0]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b8:	d10f      	bne.n	800a9da <__cvt+0xa2>
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9c0:	1a1b      	subs	r3, r3, r0
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	b005      	add	sp, #20
 800a9c6:	ecbd 8b02 	vpop	{d8}
 800a9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9cc:	1c54      	adds	r4, r2, #1
 800a9ce:	9403      	str	r4, [sp, #12]
 800a9d0:	7011      	strb	r1, [r2, #0]
 800a9d2:	9a03      	ldr	r2, [sp, #12]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d8f9      	bhi.n	800a9cc <__cvt+0x94>
 800a9d8:	e7f0      	b.n	800a9bc <__cvt+0x84>
 800a9da:	2130      	movs	r1, #48	; 0x30
 800a9dc:	e7f9      	b.n	800a9d2 <__cvt+0x9a>

0800a9de <__exponent>:
 800a9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	bfb8      	it	lt
 800a9e6:	4249      	neglt	r1, r1
 800a9e8:	f803 2b02 	strb.w	r2, [r3], #2
 800a9ec:	bfb4      	ite	lt
 800a9ee:	222d      	movlt	r2, #45	; 0x2d
 800a9f0:	222b      	movge	r2, #43	; 0x2b
 800a9f2:	2909      	cmp	r1, #9
 800a9f4:	7042      	strb	r2, [r0, #1]
 800a9f6:	dd20      	ble.n	800aa3a <__exponent+0x5c>
 800a9f8:	f10d 0207 	add.w	r2, sp, #7
 800a9fc:	4617      	mov	r7, r2
 800a9fe:	260a      	movs	r6, #10
 800aa00:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa04:	fb06 1115 	mls	r1, r6, r5, r1
 800aa08:	3130      	adds	r1, #48	; 0x30
 800aa0a:	2d09      	cmp	r5, #9
 800aa0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa10:	f102 34ff 	add.w	r4, r2, #4294967295
 800aa14:	4629      	mov	r1, r5
 800aa16:	dc09      	bgt.n	800aa2c <__exponent+0x4e>
 800aa18:	3130      	adds	r1, #48	; 0x30
 800aa1a:	3a02      	subs	r2, #2
 800aa1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa20:	42ba      	cmp	r2, r7
 800aa22:	461c      	mov	r4, r3
 800aa24:	d304      	bcc.n	800aa30 <__exponent+0x52>
 800aa26:	1a20      	subs	r0, r4, r0
 800aa28:	b003      	add	sp, #12
 800aa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	e7e7      	b.n	800aa00 <__exponent+0x22>
 800aa30:	f812 1b01 	ldrb.w	r1, [r2], #1
 800aa34:	f803 1b01 	strb.w	r1, [r3], #1
 800aa38:	e7f2      	b.n	800aa20 <__exponent+0x42>
 800aa3a:	2230      	movs	r2, #48	; 0x30
 800aa3c:	461c      	mov	r4, r3
 800aa3e:	4411      	add	r1, r2
 800aa40:	f804 2b02 	strb.w	r2, [r4], #2
 800aa44:	7059      	strb	r1, [r3, #1]
 800aa46:	e7ee      	b.n	800aa26 <__exponent+0x48>

0800aa48 <_printf_float>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	b08d      	sub	sp, #52	; 0x34
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	461f      	mov	r7, r3
 800aa54:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aa58:	4605      	mov	r5, r0
 800aa5a:	f001 fd69 	bl	800c530 <_localeconv_r>
 800aa5e:	f8d0 b000 	ldr.w	fp, [r0]
 800aa62:	4658      	mov	r0, fp
 800aa64:	f7f5 fc3c 	bl	80002e0 <strlen>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa6c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa70:	9005      	str	r0, [sp, #20]
 800aa72:	3307      	adds	r3, #7
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	f103 0108 	add.w	r1, r3, #8
 800aa7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	f8c8 1000 	str.w	r1, [r8]
 800aa86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800aa8e:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 800ad10 <_printf_float+0x2c8>
 800aa92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800aa96:	eeb0 6bc0 	vabs.f64	d6, d0
 800aa9a:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa2:	f340 81ef 	ble.w	800ae84 <_printf_float+0x43c>
 800aaa6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800aaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaae:	d502      	bpl.n	800aab6 <_printf_float+0x6e>
 800aab0:	232d      	movs	r3, #45	; 0x2d
 800aab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab6:	4b98      	ldr	r3, [pc, #608]	; (800ad18 <_printf_float+0x2d0>)
 800aab8:	4998      	ldr	r1, [pc, #608]	; (800ad1c <_printf_float+0x2d4>)
 800aaba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aabe:	bf8c      	ite	hi
 800aac0:	4688      	movhi	r8, r1
 800aac2:	4698      	movls	r8, r3
 800aac4:	f022 0204 	bic.w	r2, r2, #4
 800aac8:	2303      	movs	r3, #3
 800aaca:	6123      	str	r3, [r4, #16]
 800aacc:	6022      	str	r2, [r4, #0]
 800aace:	f04f 0a00 	mov.w	sl, #0
 800aad2:	9700      	str	r7, [sp, #0]
 800aad4:	4633      	mov	r3, r6
 800aad6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aad8:	4621      	mov	r1, r4
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 f9e0 	bl	800aea0 <_printf_common>
 800aae0:	3001      	adds	r0, #1
 800aae2:	f040 8090 	bne.w	800ac06 <_printf_float+0x1be>
 800aae6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaea:	b00d      	add	sp, #52	; 0x34
 800aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf0:	6861      	ldr	r1, [r4, #4]
 800aaf2:	1c4b      	adds	r3, r1, #1
 800aaf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aaf8:	a80a      	add	r0, sp, #40	; 0x28
 800aafa:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 800aafe:	d13c      	bne.n	800ab7a <_printf_float+0x132>
 800ab00:	2306      	movs	r3, #6
 800ab02:	6063      	str	r3, [r4, #4]
 800ab04:	2300      	movs	r3, #0
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	9002      	str	r0, [sp, #8]
 800ab0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab0e:	6022      	str	r2, [r4, #0]
 800ab10:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab14:	f8cd e000 	str.w	lr, [sp]
 800ab18:	6861      	ldr	r1, [r4, #4]
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f7ff ff0c 	bl	800a938 <__cvt>
 800ab20:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ab24:	2b47      	cmp	r3, #71	; 0x47
 800ab26:	4680      	mov	r8, r0
 800ab28:	d109      	bne.n	800ab3e <_printf_float+0xf6>
 800ab2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2c:	1cd8      	adds	r0, r3, #3
 800ab2e:	db02      	blt.n	800ab36 <_printf_float+0xee>
 800ab30:	6862      	ldr	r2, [r4, #4]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	dd54      	ble.n	800abe0 <_printf_float+0x198>
 800ab36:	f1a9 0902 	sub.w	r9, r9, #2
 800ab3a:	fa5f f989 	uxtb.w	r9, r9
 800ab3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab44:	d831      	bhi.n	800abaa <_printf_float+0x162>
 800ab46:	3901      	subs	r1, #1
 800ab48:	464a      	mov	r2, r9
 800ab4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab4e:	9109      	str	r1, [sp, #36]	; 0x24
 800ab50:	f7ff ff45 	bl	800a9de <__exponent>
 800ab54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab56:	1883      	adds	r3, r0, r2
 800ab58:	2a01      	cmp	r2, #1
 800ab5a:	4682      	mov	sl, r0
 800ab5c:	6123      	str	r3, [r4, #16]
 800ab5e:	dc02      	bgt.n	800ab66 <_printf_float+0x11e>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	07d1      	lsls	r1, r2, #31
 800ab64:	d501      	bpl.n	800ab6a <_printf_float+0x122>
 800ab66:	3301      	adds	r3, #1
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0af      	beq.n	800aad2 <_printf_float+0x8a>
 800ab72:	232d      	movs	r3, #45	; 0x2d
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	e7ab      	b.n	800aad2 <_printf_float+0x8a>
 800ab7a:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ab7e:	d002      	beq.n	800ab86 <_printf_float+0x13e>
 800ab80:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ab84:	d1be      	bne.n	800ab04 <_printf_float+0xbc>
 800ab86:	b171      	cbz	r1, 800aba6 <_printf_float+0x15e>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	6022      	str	r2, [r4, #0]
 800ab90:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab94:	f8cd e000 	str.w	lr, [sp]
 800ab98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7ff fecb 	bl	800a938 <__cvt>
 800aba2:	4680      	mov	r8, r0
 800aba4:	e7c1      	b.n	800ab2a <_printf_float+0xe2>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7ab      	b.n	800ab02 <_printf_float+0xba>
 800abaa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800abae:	d119      	bne.n	800abe4 <_printf_float+0x19c>
 800abb0:	2900      	cmp	r1, #0
 800abb2:	6863      	ldr	r3, [r4, #4]
 800abb4:	dd0c      	ble.n	800abd0 <_printf_float+0x188>
 800abb6:	6121      	str	r1, [r4, #16]
 800abb8:	b913      	cbnz	r3, 800abc0 <_printf_float+0x178>
 800abba:	6822      	ldr	r2, [r4, #0]
 800abbc:	07d2      	lsls	r2, r2, #31
 800abbe:	d502      	bpl.n	800abc6 <_printf_float+0x17e>
 800abc0:	3301      	adds	r3, #1
 800abc2:	440b      	add	r3, r1
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc8:	65a3      	str	r3, [r4, #88]	; 0x58
 800abca:	f04f 0a00 	mov.w	sl, #0
 800abce:	e7cc      	b.n	800ab6a <_printf_float+0x122>
 800abd0:	b913      	cbnz	r3, 800abd8 <_printf_float+0x190>
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	07d0      	lsls	r0, r2, #31
 800abd6:	d501      	bpl.n	800abdc <_printf_float+0x194>
 800abd8:	3302      	adds	r3, #2
 800abda:	e7f3      	b.n	800abc4 <_printf_float+0x17c>
 800abdc:	2301      	movs	r3, #1
 800abde:	e7f1      	b.n	800abc4 <_printf_float+0x17c>
 800abe0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800abe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abe8:	4293      	cmp	r3, r2
 800abea:	db05      	blt.n	800abf8 <_printf_float+0x1b0>
 800abec:	6822      	ldr	r2, [r4, #0]
 800abee:	6123      	str	r3, [r4, #16]
 800abf0:	07d1      	lsls	r1, r2, #31
 800abf2:	d5e8      	bpl.n	800abc6 <_printf_float+0x17e>
 800abf4:	3301      	adds	r3, #1
 800abf6:	e7e5      	b.n	800abc4 <_printf_float+0x17c>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bfd4      	ite	le
 800abfc:	f1c3 0302 	rsble	r3, r3, #2
 800ac00:	2301      	movgt	r3, #1
 800ac02:	4413      	add	r3, r2
 800ac04:	e7de      	b.n	800abc4 <_printf_float+0x17c>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	055a      	lsls	r2, r3, #21
 800ac0a:	d407      	bmi.n	800ac1c <_printf_float+0x1d4>
 800ac0c:	6923      	ldr	r3, [r4, #16]
 800ac0e:	4642      	mov	r2, r8
 800ac10:	4631      	mov	r1, r6
 800ac12:	4628      	mov	r0, r5
 800ac14:	47b8      	blx	r7
 800ac16:	3001      	adds	r0, #1
 800ac18:	d12a      	bne.n	800ac70 <_printf_float+0x228>
 800ac1a:	e764      	b.n	800aae6 <_printf_float+0x9e>
 800ac1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac20:	f240 80e5 	bls.w	800adee <_printf_float+0x3a6>
 800ac24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ac28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac30:	d13c      	bne.n	800acac <_printf_float+0x264>
 800ac32:	2301      	movs	r3, #1
 800ac34:	4a3a      	ldr	r2, [pc, #232]	; (800ad20 <_printf_float+0x2d8>)
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b8      	blx	r7
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f43f af52 	beq.w	800aae6 <_printf_float+0x9e>
 800ac42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac46:	429a      	cmp	r2, r3
 800ac48:	db02      	blt.n	800ac50 <_printf_float+0x208>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	07d8      	lsls	r0, r3, #31
 800ac4e:	d50f      	bpl.n	800ac70 <_printf_float+0x228>
 800ac50:	9b05      	ldr	r3, [sp, #20]
 800ac52:	465a      	mov	r2, fp
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b8      	blx	r7
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f43f af43 	beq.w	800aae6 <_printf_float+0x9e>
 800ac60:	f04f 0800 	mov.w	r8, #0
 800ac64:	f104 091a 	add.w	r9, r4, #26
 800ac68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	4598      	cmp	r8, r3
 800ac6e:	db12      	blt.n	800ac96 <_printf_float+0x24e>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	079b      	lsls	r3, r3, #30
 800ac74:	d509      	bpl.n	800ac8a <_printf_float+0x242>
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	f104 0919 	add.w	r9, r4, #25
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	4598      	cmp	r8, r3
 800ac86:	f2c0 80f2 	blt.w	800ae6e <_printf_float+0x426>
 800ac8a:	68e0      	ldr	r0, [r4, #12]
 800ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8e:	4298      	cmp	r0, r3
 800ac90:	bfb8      	it	lt
 800ac92:	4618      	movlt	r0, r3
 800ac94:	e729      	b.n	800aaea <_printf_float+0xa2>
 800ac96:	2301      	movs	r3, #1
 800ac98:	464a      	mov	r2, r9
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	47b8      	blx	r7
 800aca0:	3001      	adds	r0, #1
 800aca2:	f43f af20 	beq.w	800aae6 <_printf_float+0x9e>
 800aca6:	f108 0801 	add.w	r8, r8, #1
 800acaa:	e7dd      	b.n	800ac68 <_printf_float+0x220>
 800acac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dc38      	bgt.n	800ad24 <_printf_float+0x2dc>
 800acb2:	2301      	movs	r3, #1
 800acb4:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <_printf_float+0x2d8>)
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	47b8      	blx	r7
 800acbc:	3001      	adds	r0, #1
 800acbe:	f43f af12 	beq.w	800aae6 <_printf_float+0x9e>
 800acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc4:	b923      	cbnz	r3, 800acd0 <_printf_float+0x288>
 800acc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc8:	b913      	cbnz	r3, 800acd0 <_printf_float+0x288>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	07d9      	lsls	r1, r3, #31
 800acce:	d5cf      	bpl.n	800ac70 <_printf_float+0x228>
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	465a      	mov	r2, fp
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b8      	blx	r7
 800acda:	3001      	adds	r0, #1
 800acdc:	f43f af03 	beq.w	800aae6 <_printf_float+0x9e>
 800ace0:	f04f 0900 	mov.w	r9, #0
 800ace4:	f104 0a1a 	add.w	sl, r4, #26
 800ace8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acea:	425b      	negs	r3, r3
 800acec:	4599      	cmp	r9, r3
 800acee:	db01      	blt.n	800acf4 <_printf_float+0x2ac>
 800acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf2:	e78c      	b.n	800ac0e <_printf_float+0x1c6>
 800acf4:	2301      	movs	r3, #1
 800acf6:	4652      	mov	r2, sl
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b8      	blx	r7
 800acfe:	3001      	adds	r0, #1
 800ad00:	f43f aef1 	beq.w	800aae6 <_printf_float+0x9e>
 800ad04:	f109 0901 	add.w	r9, r9, #1
 800ad08:	e7ee      	b.n	800ace8 <_printf_float+0x2a0>
 800ad0a:	bf00      	nop
 800ad0c:	f3af 8000 	nop.w
 800ad10:	ffffffff 	.word	0xffffffff
 800ad14:	7fefffff 	.word	0x7fefffff
 800ad18:	0800e124 	.word	0x0800e124
 800ad1c:	0800e128 	.word	0x0800e128
 800ad20:	0800e134 	.word	0x0800e134
 800ad24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	bfa8      	it	ge
 800ad2c:	461a      	movge	r2, r3
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	4691      	mov	r9, r2
 800ad32:	dc38      	bgt.n	800ada6 <_printf_float+0x35e>
 800ad34:	f104 031a 	add.w	r3, r4, #26
 800ad38:	f04f 0a00 	mov.w	sl, #0
 800ad3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad40:	9307      	str	r3, [sp, #28]
 800ad42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad44:	9306      	str	r3, [sp, #24]
 800ad46:	eba3 0309 	sub.w	r3, r3, r9
 800ad4a:	459a      	cmp	sl, r3
 800ad4c:	db33      	blt.n	800adb6 <_printf_float+0x36e>
 800ad4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad52:	429a      	cmp	r2, r3
 800ad54:	db3a      	blt.n	800adcc <_printf_float+0x384>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	07da      	lsls	r2, r3, #31
 800ad5a:	d437      	bmi.n	800adcc <_printf_float+0x384>
 800ad5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5e:	9a06      	ldr	r2, [sp, #24]
 800ad60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad62:	1a9a      	subs	r2, r3, r2
 800ad64:	eba3 0901 	sub.w	r9, r3, r1
 800ad68:	4591      	cmp	r9, r2
 800ad6a:	bfa8      	it	ge
 800ad6c:	4691      	movge	r9, r2
 800ad6e:	f1b9 0f00 	cmp.w	r9, #0
 800ad72:	dc33      	bgt.n	800addc <_printf_float+0x394>
 800ad74:	f04f 0800 	mov.w	r8, #0
 800ad78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad7c:	f104 0a1a 	add.w	sl, r4, #26
 800ad80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad84:	1a9b      	subs	r3, r3, r2
 800ad86:	eba3 0309 	sub.w	r3, r3, r9
 800ad8a:	4598      	cmp	r8, r3
 800ad8c:	f6bf af70 	bge.w	800ac70 <_printf_float+0x228>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4652      	mov	r2, sl
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f aea3 	beq.w	800aae6 <_printf_float+0x9e>
 800ada0:	f108 0801 	add.w	r8, r8, #1
 800ada4:	e7ec      	b.n	800ad80 <_printf_float+0x338>
 800ada6:	4613      	mov	r3, r2
 800ada8:	4631      	mov	r1, r6
 800adaa:	4642      	mov	r2, r8
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	d1bf      	bne.n	800ad34 <_printf_float+0x2ec>
 800adb4:	e697      	b.n	800aae6 <_printf_float+0x9e>
 800adb6:	2301      	movs	r3, #1
 800adb8:	9a07      	ldr	r2, [sp, #28]
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	f43f ae90 	beq.w	800aae6 <_printf_float+0x9e>
 800adc6:	f10a 0a01 	add.w	sl, sl, #1
 800adca:	e7ba      	b.n	800ad42 <_printf_float+0x2fa>
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	465a      	mov	r2, fp
 800add0:	4631      	mov	r1, r6
 800add2:	4628      	mov	r0, r5
 800add4:	47b8      	blx	r7
 800add6:	3001      	adds	r0, #1
 800add8:	d1c0      	bne.n	800ad5c <_printf_float+0x314>
 800adda:	e684      	b.n	800aae6 <_printf_float+0x9e>
 800addc:	9a06      	ldr	r2, [sp, #24]
 800adde:	464b      	mov	r3, r9
 800ade0:	4442      	add	r2, r8
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	d1c3      	bne.n	800ad74 <_printf_float+0x32c>
 800adec:	e67b      	b.n	800aae6 <_printf_float+0x9e>
 800adee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adf0:	2a01      	cmp	r2, #1
 800adf2:	dc01      	bgt.n	800adf8 <_printf_float+0x3b0>
 800adf4:	07db      	lsls	r3, r3, #31
 800adf6:	d537      	bpl.n	800ae68 <_printf_float+0x420>
 800adf8:	2301      	movs	r3, #1
 800adfa:	4642      	mov	r2, r8
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	f43f ae6f 	beq.w	800aae6 <_printf_float+0x9e>
 800ae08:	9b05      	ldr	r3, [sp, #20]
 800ae0a:	465a      	mov	r2, fp
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4628      	mov	r0, r5
 800ae10:	47b8      	blx	r7
 800ae12:	3001      	adds	r0, #1
 800ae14:	f43f ae67 	beq.w	800aae6 <_printf_float+0x9e>
 800ae18:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ae1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae24:	d10b      	bne.n	800ae3e <_printf_float+0x3f6>
 800ae26:	f04f 0800 	mov.w	r8, #0
 800ae2a:	f104 091a 	add.w	r9, r4, #26
 800ae2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae30:	3b01      	subs	r3, #1
 800ae32:	4598      	cmp	r8, r3
 800ae34:	db0d      	blt.n	800ae52 <_printf_float+0x40a>
 800ae36:	4653      	mov	r3, sl
 800ae38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae3c:	e6e8      	b.n	800ac10 <_printf_float+0x1c8>
 800ae3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae40:	f108 0201 	add.w	r2, r8, #1
 800ae44:	3b01      	subs	r3, #1
 800ae46:	4631      	mov	r1, r6
 800ae48:	4628      	mov	r0, r5
 800ae4a:	47b8      	blx	r7
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d1f2      	bne.n	800ae36 <_printf_float+0x3ee>
 800ae50:	e649      	b.n	800aae6 <_printf_float+0x9e>
 800ae52:	2301      	movs	r3, #1
 800ae54:	464a      	mov	r2, r9
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b8      	blx	r7
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f43f ae42 	beq.w	800aae6 <_printf_float+0x9e>
 800ae62:	f108 0801 	add.w	r8, r8, #1
 800ae66:	e7e2      	b.n	800ae2e <_printf_float+0x3e6>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4642      	mov	r2, r8
 800ae6c:	e7eb      	b.n	800ae46 <_printf_float+0x3fe>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	464a      	mov	r2, r9
 800ae72:	4631      	mov	r1, r6
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b8      	blx	r7
 800ae78:	3001      	adds	r0, #1
 800ae7a:	f43f ae34 	beq.w	800aae6 <_printf_float+0x9e>
 800ae7e:	f108 0801 	add.w	r8, r8, #1
 800ae82:	e6fc      	b.n	800ac7e <_printf_float+0x236>
 800ae84:	eeb4 0b40 	vcmp.f64	d0, d0
 800ae88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8c:	f5ff ae30 	bvc.w	800aaf0 <_printf_float+0xa8>
 800ae90:	4b01      	ldr	r3, [pc, #4]	; (800ae98 <_printf_float+0x450>)
 800ae92:	4902      	ldr	r1, [pc, #8]	; (800ae9c <_printf_float+0x454>)
 800ae94:	e611      	b.n	800aaba <_printf_float+0x72>
 800ae96:	bf00      	nop
 800ae98:	0800e12c 	.word	0x0800e12c
 800ae9c:	0800e130 	.word	0x0800e130

0800aea0 <_printf_common>:
 800aea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea4:	4691      	mov	r9, r2
 800aea6:	461f      	mov	r7, r3
 800aea8:	688a      	ldr	r2, [r1, #8]
 800aeaa:	690b      	ldr	r3, [r1, #16]
 800aeac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	bfb8      	it	lt
 800aeb4:	4613      	movlt	r3, r2
 800aeb6:	f8c9 3000 	str.w	r3, [r9]
 800aeba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aebe:	4606      	mov	r6, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	b112      	cbz	r2, 800aeca <_printf_common+0x2a>
 800aec4:	3301      	adds	r3, #1
 800aec6:	f8c9 3000 	str.w	r3, [r9]
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	0699      	lsls	r1, r3, #26
 800aece:	bf42      	ittt	mi
 800aed0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aed4:	3302      	addmi	r3, #2
 800aed6:	f8c9 3000 	strmi.w	r3, [r9]
 800aeda:	6825      	ldr	r5, [r4, #0]
 800aedc:	f015 0506 	ands.w	r5, r5, #6
 800aee0:	d107      	bne.n	800aef2 <_printf_common+0x52>
 800aee2:	f104 0a19 	add.w	sl, r4, #25
 800aee6:	68e3      	ldr	r3, [r4, #12]
 800aee8:	f8d9 2000 	ldr.w	r2, [r9]
 800aeec:	1a9b      	subs	r3, r3, r2
 800aeee:	429d      	cmp	r5, r3
 800aef0:	db29      	blt.n	800af46 <_printf_common+0xa6>
 800aef2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aef6:	6822      	ldr	r2, [r4, #0]
 800aef8:	3300      	adds	r3, #0
 800aefa:	bf18      	it	ne
 800aefc:	2301      	movne	r3, #1
 800aefe:	0692      	lsls	r2, r2, #26
 800af00:	d42e      	bmi.n	800af60 <_printf_common+0xc0>
 800af02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af06:	4639      	mov	r1, r7
 800af08:	4630      	mov	r0, r6
 800af0a:	47c0      	blx	r8
 800af0c:	3001      	adds	r0, #1
 800af0e:	d021      	beq.n	800af54 <_printf_common+0xb4>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	68e5      	ldr	r5, [r4, #12]
 800af14:	f8d9 2000 	ldr.w	r2, [r9]
 800af18:	f003 0306 	and.w	r3, r3, #6
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	bf08      	it	eq
 800af20:	1aad      	subeq	r5, r5, r2
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	bf0c      	ite	eq
 800af28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af2c:	2500      	movne	r5, #0
 800af2e:	4293      	cmp	r3, r2
 800af30:	bfc4      	itt	gt
 800af32:	1a9b      	subgt	r3, r3, r2
 800af34:	18ed      	addgt	r5, r5, r3
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	341a      	adds	r4, #26
 800af3c:	454d      	cmp	r5, r9
 800af3e:	d11b      	bne.n	800af78 <_printf_common+0xd8>
 800af40:	2000      	movs	r0, #0
 800af42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af46:	2301      	movs	r3, #1
 800af48:	4652      	mov	r2, sl
 800af4a:	4639      	mov	r1, r7
 800af4c:	4630      	mov	r0, r6
 800af4e:	47c0      	blx	r8
 800af50:	3001      	adds	r0, #1
 800af52:	d103      	bne.n	800af5c <_printf_common+0xbc>
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5c:	3501      	adds	r5, #1
 800af5e:	e7c2      	b.n	800aee6 <_printf_common+0x46>
 800af60:	18e1      	adds	r1, r4, r3
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	2030      	movs	r0, #48	; 0x30
 800af66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af6a:	4422      	add	r2, r4
 800af6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af74:	3302      	adds	r3, #2
 800af76:	e7c4      	b.n	800af02 <_printf_common+0x62>
 800af78:	2301      	movs	r3, #1
 800af7a:	4622      	mov	r2, r4
 800af7c:	4639      	mov	r1, r7
 800af7e:	4630      	mov	r0, r6
 800af80:	47c0      	blx	r8
 800af82:	3001      	adds	r0, #1
 800af84:	d0e6      	beq.n	800af54 <_printf_common+0xb4>
 800af86:	f109 0901 	add.w	r9, r9, #1
 800af8a:	e7d7      	b.n	800af3c <_printf_common+0x9c>

0800af8c <_printf_i>:
 800af8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af90:	4617      	mov	r7, r2
 800af92:	7e0a      	ldrb	r2, [r1, #24]
 800af94:	b085      	sub	sp, #20
 800af96:	2a6e      	cmp	r2, #110	; 0x6e
 800af98:	4698      	mov	r8, r3
 800af9a:	4606      	mov	r6, r0
 800af9c:	460c      	mov	r4, r1
 800af9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afa0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800afa4:	f000 80bc 	beq.w	800b120 <_printf_i+0x194>
 800afa8:	d81a      	bhi.n	800afe0 <_printf_i+0x54>
 800afaa:	2a63      	cmp	r2, #99	; 0x63
 800afac:	d02e      	beq.n	800b00c <_printf_i+0x80>
 800afae:	d80a      	bhi.n	800afc6 <_printf_i+0x3a>
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	f000 80c8 	beq.w	800b146 <_printf_i+0x1ba>
 800afb6:	2a58      	cmp	r2, #88	; 0x58
 800afb8:	f000 808a 	beq.w	800b0d0 <_printf_i+0x144>
 800afbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800afc4:	e02a      	b.n	800b01c <_printf_i+0x90>
 800afc6:	2a64      	cmp	r2, #100	; 0x64
 800afc8:	d001      	beq.n	800afce <_printf_i+0x42>
 800afca:	2a69      	cmp	r2, #105	; 0x69
 800afcc:	d1f6      	bne.n	800afbc <_printf_i+0x30>
 800afce:	6821      	ldr	r1, [r4, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800afd6:	d023      	beq.n	800b020 <_printf_i+0x94>
 800afd8:	1d11      	adds	r1, r2, #4
 800afda:	6019      	str	r1, [r3, #0]
 800afdc:	6813      	ldr	r3, [r2, #0]
 800afde:	e027      	b.n	800b030 <_printf_i+0xa4>
 800afe0:	2a73      	cmp	r2, #115	; 0x73
 800afe2:	f000 80b4 	beq.w	800b14e <_printf_i+0x1c2>
 800afe6:	d808      	bhi.n	800affa <_printf_i+0x6e>
 800afe8:	2a6f      	cmp	r2, #111	; 0x6f
 800afea:	d02a      	beq.n	800b042 <_printf_i+0xb6>
 800afec:	2a70      	cmp	r2, #112	; 0x70
 800afee:	d1e5      	bne.n	800afbc <_printf_i+0x30>
 800aff0:	680a      	ldr	r2, [r1, #0]
 800aff2:	f042 0220 	orr.w	r2, r2, #32
 800aff6:	600a      	str	r2, [r1, #0]
 800aff8:	e003      	b.n	800b002 <_printf_i+0x76>
 800affa:	2a75      	cmp	r2, #117	; 0x75
 800affc:	d021      	beq.n	800b042 <_printf_i+0xb6>
 800affe:	2a78      	cmp	r2, #120	; 0x78
 800b000:	d1dc      	bne.n	800afbc <_printf_i+0x30>
 800b002:	2278      	movs	r2, #120	; 0x78
 800b004:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b008:	496e      	ldr	r1, [pc, #440]	; (800b1c4 <_printf_i+0x238>)
 800b00a:	e064      	b.n	800b0d6 <_printf_i+0x14a>
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b012:	1d11      	adds	r1, r2, #4
 800b014:	6019      	str	r1, [r3, #0]
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b01c:	2301      	movs	r3, #1
 800b01e:	e0a3      	b.n	800b168 <_printf_i+0x1dc>
 800b020:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b024:	f102 0104 	add.w	r1, r2, #4
 800b028:	6019      	str	r1, [r3, #0]
 800b02a:	d0d7      	beq.n	800afdc <_printf_i+0x50>
 800b02c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b030:	2b00      	cmp	r3, #0
 800b032:	da03      	bge.n	800b03c <_printf_i+0xb0>
 800b034:	222d      	movs	r2, #45	; 0x2d
 800b036:	425b      	negs	r3, r3
 800b038:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b03c:	4962      	ldr	r1, [pc, #392]	; (800b1c8 <_printf_i+0x23c>)
 800b03e:	220a      	movs	r2, #10
 800b040:	e017      	b.n	800b072 <_printf_i+0xe6>
 800b042:	6820      	ldr	r0, [r4, #0]
 800b044:	6819      	ldr	r1, [r3, #0]
 800b046:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b04a:	d003      	beq.n	800b054 <_printf_i+0xc8>
 800b04c:	1d08      	adds	r0, r1, #4
 800b04e:	6018      	str	r0, [r3, #0]
 800b050:	680b      	ldr	r3, [r1, #0]
 800b052:	e006      	b.n	800b062 <_printf_i+0xd6>
 800b054:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b058:	f101 0004 	add.w	r0, r1, #4
 800b05c:	6018      	str	r0, [r3, #0]
 800b05e:	d0f7      	beq.n	800b050 <_printf_i+0xc4>
 800b060:	880b      	ldrh	r3, [r1, #0]
 800b062:	4959      	ldr	r1, [pc, #356]	; (800b1c8 <_printf_i+0x23c>)
 800b064:	2a6f      	cmp	r2, #111	; 0x6f
 800b066:	bf14      	ite	ne
 800b068:	220a      	movne	r2, #10
 800b06a:	2208      	moveq	r2, #8
 800b06c:	2000      	movs	r0, #0
 800b06e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b072:	6865      	ldr	r5, [r4, #4]
 800b074:	60a5      	str	r5, [r4, #8]
 800b076:	2d00      	cmp	r5, #0
 800b078:	f2c0 809c 	blt.w	800b1b4 <_printf_i+0x228>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	f020 0004 	bic.w	r0, r0, #4
 800b082:	6020      	str	r0, [r4, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d13f      	bne.n	800b108 <_printf_i+0x17c>
 800b088:	2d00      	cmp	r5, #0
 800b08a:	f040 8095 	bne.w	800b1b8 <_printf_i+0x22c>
 800b08e:	4675      	mov	r5, lr
 800b090:	2a08      	cmp	r2, #8
 800b092:	d10b      	bne.n	800b0ac <_printf_i+0x120>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	07da      	lsls	r2, r3, #31
 800b098:	d508      	bpl.n	800b0ac <_printf_i+0x120>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	6862      	ldr	r2, [r4, #4]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	bfde      	ittt	le
 800b0a2:	2330      	movle	r3, #48	; 0x30
 800b0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0ac:	ebae 0305 	sub.w	r3, lr, r5
 800b0b0:	6123      	str	r3, [r4, #16]
 800b0b2:	f8cd 8000 	str.w	r8, [sp]
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	aa03      	add	r2, sp, #12
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff feef 	bl	800aea0 <_printf_common>
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d155      	bne.n	800b172 <_printf_i+0x1e6>
 800b0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ca:	b005      	add	sp, #20
 800b0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b0d4:	493c      	ldr	r1, [pc, #240]	; (800b1c8 <_printf_i+0x23c>)
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b0de:	f100 0504 	add.w	r5, r0, #4
 800b0e2:	601d      	str	r5, [r3, #0]
 800b0e4:	d001      	beq.n	800b0ea <_printf_i+0x15e>
 800b0e6:	6803      	ldr	r3, [r0, #0]
 800b0e8:	e002      	b.n	800b0f0 <_printf_i+0x164>
 800b0ea:	0655      	lsls	r5, r2, #25
 800b0ec:	d5fb      	bpl.n	800b0e6 <_printf_i+0x15a>
 800b0ee:	8803      	ldrh	r3, [r0, #0]
 800b0f0:	07d0      	lsls	r0, r2, #31
 800b0f2:	bf44      	itt	mi
 800b0f4:	f042 0220 	orrmi.w	r2, r2, #32
 800b0f8:	6022      	strmi	r2, [r4, #0]
 800b0fa:	b91b      	cbnz	r3, 800b104 <_printf_i+0x178>
 800b0fc:	6822      	ldr	r2, [r4, #0]
 800b0fe:	f022 0220 	bic.w	r2, r2, #32
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	2210      	movs	r2, #16
 800b106:	e7b1      	b.n	800b06c <_printf_i+0xe0>
 800b108:	4675      	mov	r5, lr
 800b10a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b10e:	fb02 3310 	mls	r3, r2, r0, r3
 800b112:	5ccb      	ldrb	r3, [r1, r3]
 800b114:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b118:	4603      	mov	r3, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d1f5      	bne.n	800b10a <_printf_i+0x17e>
 800b11e:	e7b7      	b.n	800b090 <_printf_i+0x104>
 800b120:	6808      	ldr	r0, [r1, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6949      	ldr	r1, [r1, #20]
 800b126:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b12a:	d004      	beq.n	800b136 <_printf_i+0x1aa>
 800b12c:	1d10      	adds	r0, r2, #4
 800b12e:	6018      	str	r0, [r3, #0]
 800b130:	6813      	ldr	r3, [r2, #0]
 800b132:	6019      	str	r1, [r3, #0]
 800b134:	e007      	b.n	800b146 <_printf_i+0x1ba>
 800b136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b13a:	f102 0004 	add.w	r0, r2, #4
 800b13e:	6018      	str	r0, [r3, #0]
 800b140:	6813      	ldr	r3, [r2, #0]
 800b142:	d0f6      	beq.n	800b132 <_printf_i+0x1a6>
 800b144:	8019      	strh	r1, [r3, #0]
 800b146:	2300      	movs	r3, #0
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	4675      	mov	r5, lr
 800b14c:	e7b1      	b.n	800b0b2 <_printf_i+0x126>
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	1d11      	adds	r1, r2, #4
 800b152:	6019      	str	r1, [r3, #0]
 800b154:	6815      	ldr	r5, [r2, #0]
 800b156:	6862      	ldr	r2, [r4, #4]
 800b158:	2100      	movs	r1, #0
 800b15a:	4628      	mov	r0, r5
 800b15c:	f7f5 f8c8 	bl	80002f0 <memchr>
 800b160:	b108      	cbz	r0, 800b166 <_printf_i+0x1da>
 800b162:	1b40      	subs	r0, r0, r5
 800b164:	6060      	str	r0, [r4, #4]
 800b166:	6863      	ldr	r3, [r4, #4]
 800b168:	6123      	str	r3, [r4, #16]
 800b16a:	2300      	movs	r3, #0
 800b16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b170:	e79f      	b.n	800b0b2 <_printf_i+0x126>
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	462a      	mov	r2, r5
 800b176:	4639      	mov	r1, r7
 800b178:	4630      	mov	r0, r6
 800b17a:	47c0      	blx	r8
 800b17c:	3001      	adds	r0, #1
 800b17e:	d0a2      	beq.n	800b0c6 <_printf_i+0x13a>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	079b      	lsls	r3, r3, #30
 800b184:	d507      	bpl.n	800b196 <_printf_i+0x20a>
 800b186:	2500      	movs	r5, #0
 800b188:	f104 0919 	add.w	r9, r4, #25
 800b18c:	68e3      	ldr	r3, [r4, #12]
 800b18e:	9a03      	ldr	r2, [sp, #12]
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	429d      	cmp	r5, r3
 800b194:	db05      	blt.n	800b1a2 <_printf_i+0x216>
 800b196:	68e0      	ldr	r0, [r4, #12]
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	4298      	cmp	r0, r3
 800b19c:	bfb8      	it	lt
 800b19e:	4618      	movlt	r0, r3
 800b1a0:	e793      	b.n	800b0ca <_printf_i+0x13e>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	464a      	mov	r2, r9
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	47c0      	blx	r8
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d08a      	beq.n	800b0c6 <_printf_i+0x13a>
 800b1b0:	3501      	adds	r5, #1
 800b1b2:	e7eb      	b.n	800b18c <_printf_i+0x200>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1a7      	bne.n	800b108 <_printf_i+0x17c>
 800b1b8:	780b      	ldrb	r3, [r1, #0]
 800b1ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c2:	e765      	b.n	800b090 <_printf_i+0x104>
 800b1c4:	0800e147 	.word	0x0800e147
 800b1c8:	0800e136 	.word	0x0800e136

0800b1cc <_puts_r>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	460e      	mov	r6, r1
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	b118      	cbz	r0, 800b1dc <_puts_r+0x10>
 800b1d4:	6983      	ldr	r3, [r0, #24]
 800b1d6:	b90b      	cbnz	r3, 800b1dc <_puts_r+0x10>
 800b1d8:	f001 f91c 	bl	800c414 <__sinit>
 800b1dc:	69ab      	ldr	r3, [r5, #24]
 800b1de:	68ac      	ldr	r4, [r5, #8]
 800b1e0:	b913      	cbnz	r3, 800b1e8 <_puts_r+0x1c>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f001 f916 	bl	800c414 <__sinit>
 800b1e8:	4b23      	ldr	r3, [pc, #140]	; (800b278 <_puts_r+0xac>)
 800b1ea:	429c      	cmp	r4, r3
 800b1ec:	d117      	bne.n	800b21e <_puts_r+0x52>
 800b1ee:	686c      	ldr	r4, [r5, #4]
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	071b      	lsls	r3, r3, #28
 800b1f4:	d51d      	bpl.n	800b232 <_puts_r+0x66>
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	b1db      	cbz	r3, 800b232 <_puts_r+0x66>
 800b1fa:	3e01      	subs	r6, #1
 800b1fc:	68a3      	ldr	r3, [r4, #8]
 800b1fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b202:	3b01      	subs	r3, #1
 800b204:	60a3      	str	r3, [r4, #8]
 800b206:	b9e9      	cbnz	r1, 800b244 <_puts_r+0x78>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da2e      	bge.n	800b26a <_puts_r+0x9e>
 800b20c:	4622      	mov	r2, r4
 800b20e:	210a      	movs	r1, #10
 800b210:	4628      	mov	r0, r5
 800b212:	f000 f955 	bl	800b4c0 <__swbuf_r>
 800b216:	3001      	adds	r0, #1
 800b218:	d011      	beq.n	800b23e <_puts_r+0x72>
 800b21a:	200a      	movs	r0, #10
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	4b17      	ldr	r3, [pc, #92]	; (800b27c <_puts_r+0xb0>)
 800b220:	429c      	cmp	r4, r3
 800b222:	d101      	bne.n	800b228 <_puts_r+0x5c>
 800b224:	68ac      	ldr	r4, [r5, #8]
 800b226:	e7e3      	b.n	800b1f0 <_puts_r+0x24>
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <_puts_r+0xb4>)
 800b22a:	429c      	cmp	r4, r3
 800b22c:	bf08      	it	eq
 800b22e:	68ec      	ldreq	r4, [r5, #12]
 800b230:	e7de      	b.n	800b1f0 <_puts_r+0x24>
 800b232:	4621      	mov	r1, r4
 800b234:	4628      	mov	r0, r5
 800b236:	f000 f995 	bl	800b564 <__swsetup_r>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0dd      	beq.n	800b1fa <_puts_r+0x2e>
 800b23e:	f04f 30ff 	mov.w	r0, #4294967295
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	2b00      	cmp	r3, #0
 800b246:	da04      	bge.n	800b252 <_puts_r+0x86>
 800b248:	69a2      	ldr	r2, [r4, #24]
 800b24a:	4293      	cmp	r3, r2
 800b24c:	db06      	blt.n	800b25c <_puts_r+0x90>
 800b24e:	290a      	cmp	r1, #10
 800b250:	d004      	beq.n	800b25c <_puts_r+0x90>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	7019      	strb	r1, [r3, #0]
 800b25a:	e7cf      	b.n	800b1fc <_puts_r+0x30>
 800b25c:	4622      	mov	r2, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 f92e 	bl	800b4c0 <__swbuf_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d1c9      	bne.n	800b1fc <_puts_r+0x30>
 800b268:	e7e9      	b.n	800b23e <_puts_r+0x72>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	200a      	movs	r0, #10
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	6022      	str	r2, [r4, #0]
 800b272:	7018      	strb	r0, [r3, #0]
 800b274:	bd70      	pop	{r4, r5, r6, pc}
 800b276:	bf00      	nop
 800b278:	0800e188 	.word	0x0800e188
 800b27c:	0800e1a8 	.word	0x0800e1a8
 800b280:	0800e168 	.word	0x0800e168

0800b284 <puts>:
 800b284:	4b02      	ldr	r3, [pc, #8]	; (800b290 <puts+0xc>)
 800b286:	4601      	mov	r1, r0
 800b288:	6818      	ldr	r0, [r3, #0]
 800b28a:	f7ff bf9f 	b.w	800b1cc <_puts_r>
 800b28e:	bf00      	nop
 800b290:	2000003c 	.word	0x2000003c

0800b294 <siprintf>:
 800b294:	b40e      	push	{r1, r2, r3}
 800b296:	b500      	push	{lr}
 800b298:	b09c      	sub	sp, #112	; 0x70
 800b29a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b29e:	ab1d      	add	r3, sp, #116	; 0x74
 800b2a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b2a4:	9002      	str	r0, [sp, #8]
 800b2a6:	9006      	str	r0, [sp, #24]
 800b2a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2ac:	480a      	ldr	r0, [pc, #40]	; (800b2d8 <siprintf+0x44>)
 800b2ae:	9104      	str	r1, [sp, #16]
 800b2b0:	9107      	str	r1, [sp, #28]
 800b2b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b2be:	6800      	ldr	r0, [r0, #0]
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	a902      	add	r1, sp, #8
 800b2c4:	f001 fdb2 	bl	800ce2c <_svfiprintf_r>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	b01c      	add	sp, #112	; 0x70
 800b2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2d4:	b003      	add	sp, #12
 800b2d6:	4770      	bx	lr
 800b2d8:	2000003c 	.word	0x2000003c

0800b2dc <strcpy>:
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2e2:	f803 2b01 	strb.w	r2, [r3], #1
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	d1f9      	bne.n	800b2de <strcpy+0x2>
 800b2ea:	4770      	bx	lr

0800b2ec <strtok>:
 800b2ec:	4b13      	ldr	r3, [pc, #76]	; (800b33c <strtok+0x50>)
 800b2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f2:	681d      	ldr	r5, [r3, #0]
 800b2f4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	b9b4      	cbnz	r4, 800b32a <strtok+0x3e>
 800b2fc:	2050      	movs	r0, #80	; 0x50
 800b2fe:	f001 f989 	bl	800c614 <malloc>
 800b302:	65a8      	str	r0, [r5, #88]	; 0x58
 800b304:	6004      	str	r4, [r0, #0]
 800b306:	6044      	str	r4, [r0, #4]
 800b308:	6084      	str	r4, [r0, #8]
 800b30a:	60c4      	str	r4, [r0, #12]
 800b30c:	6104      	str	r4, [r0, #16]
 800b30e:	6144      	str	r4, [r0, #20]
 800b310:	6184      	str	r4, [r0, #24]
 800b312:	6284      	str	r4, [r0, #40]	; 0x28
 800b314:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b316:	6304      	str	r4, [r0, #48]	; 0x30
 800b318:	6344      	str	r4, [r0, #52]	; 0x34
 800b31a:	6384      	str	r4, [r0, #56]	; 0x38
 800b31c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b31e:	6404      	str	r4, [r0, #64]	; 0x40
 800b320:	6444      	str	r4, [r0, #68]	; 0x44
 800b322:	6484      	str	r4, [r0, #72]	; 0x48
 800b324:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b326:	7704      	strb	r4, [r0, #28]
 800b328:	6244      	str	r4, [r0, #36]	; 0x24
 800b32a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800b32c:	4639      	mov	r1, r7
 800b32e:	4630      	mov	r0, r6
 800b330:	2301      	movs	r3, #1
 800b332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b336:	f000 b803 	b.w	800b340 <__strtok_r>
 800b33a:	bf00      	nop
 800b33c:	2000003c 	.word	0x2000003c

0800b340 <__strtok_r>:
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	b918      	cbnz	r0, 800b34c <__strtok_r+0xc>
 800b344:	6810      	ldr	r0, [r2, #0]
 800b346:	b908      	cbnz	r0, 800b34c <__strtok_r+0xc>
 800b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34a:	4620      	mov	r0, r4
 800b34c:	4604      	mov	r4, r0
 800b34e:	460f      	mov	r7, r1
 800b350:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b354:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b358:	b91e      	cbnz	r6, 800b362 <__strtok_r+0x22>
 800b35a:	b965      	cbnz	r5, 800b376 <__strtok_r+0x36>
 800b35c:	6015      	str	r5, [r2, #0]
 800b35e:	4628      	mov	r0, r5
 800b360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b362:	42b5      	cmp	r5, r6
 800b364:	d1f6      	bne.n	800b354 <__strtok_r+0x14>
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1ef      	bne.n	800b34a <__strtok_r+0xa>
 800b36a:	6014      	str	r4, [r2, #0]
 800b36c:	7003      	strb	r3, [r0, #0]
 800b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b370:	461c      	mov	r4, r3
 800b372:	e00c      	b.n	800b38e <__strtok_r+0x4e>
 800b374:	b915      	cbnz	r5, 800b37c <__strtok_r+0x3c>
 800b376:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b37a:	460e      	mov	r6, r1
 800b37c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b380:	42ab      	cmp	r3, r5
 800b382:	d1f7      	bne.n	800b374 <__strtok_r+0x34>
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0f3      	beq.n	800b370 <__strtok_r+0x30>
 800b388:	2300      	movs	r3, #0
 800b38a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b38e:	6014      	str	r4, [r2, #0]
 800b390:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b392 <_strtol_l.isra.0>:
 800b392:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b396:	4680      	mov	r8, r0
 800b398:	4689      	mov	r9, r1
 800b39a:	4692      	mov	sl, r2
 800b39c:	461f      	mov	r7, r3
 800b39e:	468b      	mov	fp, r1
 800b3a0:	465d      	mov	r5, fp
 800b3a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3a8:	f001 f8be 	bl	800c528 <__locale_ctype_ptr_l>
 800b3ac:	4420      	add	r0, r4
 800b3ae:	7846      	ldrb	r6, [r0, #1]
 800b3b0:	f016 0608 	ands.w	r6, r6, #8
 800b3b4:	d10b      	bne.n	800b3ce <_strtol_l.isra.0+0x3c>
 800b3b6:	2c2d      	cmp	r4, #45	; 0x2d
 800b3b8:	d10b      	bne.n	800b3d2 <_strtol_l.isra.0+0x40>
 800b3ba:	782c      	ldrb	r4, [r5, #0]
 800b3bc:	2601      	movs	r6, #1
 800b3be:	f10b 0502 	add.w	r5, fp, #2
 800b3c2:	b167      	cbz	r7, 800b3de <_strtol_l.isra.0+0x4c>
 800b3c4:	2f10      	cmp	r7, #16
 800b3c6:	d114      	bne.n	800b3f2 <_strtol_l.isra.0+0x60>
 800b3c8:	2c30      	cmp	r4, #48	; 0x30
 800b3ca:	d00a      	beq.n	800b3e2 <_strtol_l.isra.0+0x50>
 800b3cc:	e011      	b.n	800b3f2 <_strtol_l.isra.0+0x60>
 800b3ce:	46ab      	mov	fp, r5
 800b3d0:	e7e6      	b.n	800b3a0 <_strtol_l.isra.0+0xe>
 800b3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b3d4:	bf04      	itt	eq
 800b3d6:	782c      	ldrbeq	r4, [r5, #0]
 800b3d8:	f10b 0502 	addeq.w	r5, fp, #2
 800b3dc:	e7f1      	b.n	800b3c2 <_strtol_l.isra.0+0x30>
 800b3de:	2c30      	cmp	r4, #48	; 0x30
 800b3e0:	d127      	bne.n	800b432 <_strtol_l.isra.0+0xa0>
 800b3e2:	782b      	ldrb	r3, [r5, #0]
 800b3e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3e8:	2b58      	cmp	r3, #88	; 0x58
 800b3ea:	d14b      	bne.n	800b484 <_strtol_l.isra.0+0xf2>
 800b3ec:	786c      	ldrb	r4, [r5, #1]
 800b3ee:	2710      	movs	r7, #16
 800b3f0:	3502      	adds	r5, #2
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	bf0c      	ite	eq
 800b3f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b3fa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b3fe:	2200      	movs	r2, #0
 800b400:	fbb1 fef7 	udiv	lr, r1, r7
 800b404:	4610      	mov	r0, r2
 800b406:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b40a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d811      	bhi.n	800b436 <_strtol_l.isra.0+0xa4>
 800b412:	461c      	mov	r4, r3
 800b414:	42a7      	cmp	r7, r4
 800b416:	dd1d      	ble.n	800b454 <_strtol_l.isra.0+0xc2>
 800b418:	1c53      	adds	r3, r2, #1
 800b41a:	d007      	beq.n	800b42c <_strtol_l.isra.0+0x9a>
 800b41c:	4586      	cmp	lr, r0
 800b41e:	d316      	bcc.n	800b44e <_strtol_l.isra.0+0xbc>
 800b420:	d101      	bne.n	800b426 <_strtol_l.isra.0+0x94>
 800b422:	45a4      	cmp	ip, r4
 800b424:	db13      	blt.n	800b44e <_strtol_l.isra.0+0xbc>
 800b426:	fb00 4007 	mla	r0, r0, r7, r4
 800b42a:	2201      	movs	r2, #1
 800b42c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b430:	e7eb      	b.n	800b40a <_strtol_l.isra.0+0x78>
 800b432:	270a      	movs	r7, #10
 800b434:	e7dd      	b.n	800b3f2 <_strtol_l.isra.0+0x60>
 800b436:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b43a:	2b19      	cmp	r3, #25
 800b43c:	d801      	bhi.n	800b442 <_strtol_l.isra.0+0xb0>
 800b43e:	3c37      	subs	r4, #55	; 0x37
 800b440:	e7e8      	b.n	800b414 <_strtol_l.isra.0+0x82>
 800b442:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b446:	2b19      	cmp	r3, #25
 800b448:	d804      	bhi.n	800b454 <_strtol_l.isra.0+0xc2>
 800b44a:	3c57      	subs	r4, #87	; 0x57
 800b44c:	e7e2      	b.n	800b414 <_strtol_l.isra.0+0x82>
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	e7eb      	b.n	800b42c <_strtol_l.isra.0+0x9a>
 800b454:	1c53      	adds	r3, r2, #1
 800b456:	d108      	bne.n	800b46a <_strtol_l.isra.0+0xd8>
 800b458:	2322      	movs	r3, #34	; 0x22
 800b45a:	f8c8 3000 	str.w	r3, [r8]
 800b45e:	4608      	mov	r0, r1
 800b460:	f1ba 0f00 	cmp.w	sl, #0
 800b464:	d107      	bne.n	800b476 <_strtol_l.isra.0+0xe4>
 800b466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	b106      	cbz	r6, 800b46e <_strtol_l.isra.0+0xdc>
 800b46c:	4240      	negs	r0, r0
 800b46e:	f1ba 0f00 	cmp.w	sl, #0
 800b472:	d00c      	beq.n	800b48e <_strtol_l.isra.0+0xfc>
 800b474:	b122      	cbz	r2, 800b480 <_strtol_l.isra.0+0xee>
 800b476:	3d01      	subs	r5, #1
 800b478:	f8ca 5000 	str.w	r5, [sl]
 800b47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b480:	464d      	mov	r5, r9
 800b482:	e7f9      	b.n	800b478 <_strtol_l.isra.0+0xe6>
 800b484:	2430      	movs	r4, #48	; 0x30
 800b486:	2f00      	cmp	r7, #0
 800b488:	d1b3      	bne.n	800b3f2 <_strtol_l.isra.0+0x60>
 800b48a:	2708      	movs	r7, #8
 800b48c:	e7b1      	b.n	800b3f2 <_strtol_l.isra.0+0x60>
 800b48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b494 <strtol>:
 800b494:	4b08      	ldr	r3, [pc, #32]	; (800b4b8 <strtol+0x24>)
 800b496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b498:	681c      	ldr	r4, [r3, #0]
 800b49a:	4d08      	ldr	r5, [pc, #32]	; (800b4bc <strtol+0x28>)
 800b49c:	6a23      	ldr	r3, [r4, #32]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf08      	it	eq
 800b4a2:	462b      	moveq	r3, r5
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	460a      	mov	r2, r1
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7ff ff70 	bl	800b392 <_strtol_l.isra.0>
 800b4b2:	b003      	add	sp, #12
 800b4b4:	bd30      	pop	{r4, r5, pc}
 800b4b6:	bf00      	nop
 800b4b8:	2000003c 	.word	0x2000003c
 800b4bc:	200000a0 	.word	0x200000a0

0800b4c0 <__swbuf_r>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	b118      	cbz	r0, 800b4d2 <__swbuf_r+0x12>
 800b4ca:	6983      	ldr	r3, [r0, #24]
 800b4cc:	b90b      	cbnz	r3, 800b4d2 <__swbuf_r+0x12>
 800b4ce:	f000 ffa1 	bl	800c414 <__sinit>
 800b4d2:	4b21      	ldr	r3, [pc, #132]	; (800b558 <__swbuf_r+0x98>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d12a      	bne.n	800b52e <__swbuf_r+0x6e>
 800b4d8:	686c      	ldr	r4, [r5, #4]
 800b4da:	69a3      	ldr	r3, [r4, #24]
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	071a      	lsls	r2, r3, #28
 800b4e2:	d52e      	bpl.n	800b542 <__swbuf_r+0x82>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	b363      	cbz	r3, 800b542 <__swbuf_r+0x82>
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	6820      	ldr	r0, [r4, #0]
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	6963      	ldr	r3, [r4, #20]
 800b4f0:	b2f6      	uxtb	r6, r6
 800b4f2:	4298      	cmp	r0, r3
 800b4f4:	4637      	mov	r7, r6
 800b4f6:	db04      	blt.n	800b502 <__swbuf_r+0x42>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 ff20 	bl	800c340 <_fflush_r>
 800b500:	bb28      	cbnz	r0, 800b54e <__swbuf_r+0x8e>
 800b502:	68a3      	ldr	r3, [r4, #8]
 800b504:	3b01      	subs	r3, #1
 800b506:	60a3      	str	r3, [r4, #8]
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	6022      	str	r2, [r4, #0]
 800b50e:	701e      	strb	r6, [r3, #0]
 800b510:	6963      	ldr	r3, [r4, #20]
 800b512:	3001      	adds	r0, #1
 800b514:	4298      	cmp	r0, r3
 800b516:	d004      	beq.n	800b522 <__swbuf_r+0x62>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	07db      	lsls	r3, r3, #31
 800b51c:	d519      	bpl.n	800b552 <__swbuf_r+0x92>
 800b51e:	2e0a      	cmp	r6, #10
 800b520:	d117      	bne.n	800b552 <__swbuf_r+0x92>
 800b522:	4621      	mov	r1, r4
 800b524:	4628      	mov	r0, r5
 800b526:	f000 ff0b 	bl	800c340 <_fflush_r>
 800b52a:	b190      	cbz	r0, 800b552 <__swbuf_r+0x92>
 800b52c:	e00f      	b.n	800b54e <__swbuf_r+0x8e>
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <__swbuf_r+0x9c>)
 800b530:	429c      	cmp	r4, r3
 800b532:	d101      	bne.n	800b538 <__swbuf_r+0x78>
 800b534:	68ac      	ldr	r4, [r5, #8]
 800b536:	e7d0      	b.n	800b4da <__swbuf_r+0x1a>
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <__swbuf_r+0xa0>)
 800b53a:	429c      	cmp	r4, r3
 800b53c:	bf08      	it	eq
 800b53e:	68ec      	ldreq	r4, [r5, #12]
 800b540:	e7cb      	b.n	800b4da <__swbuf_r+0x1a>
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f000 f80d 	bl	800b564 <__swsetup_r>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d0cc      	beq.n	800b4e8 <__swbuf_r+0x28>
 800b54e:	f04f 37ff 	mov.w	r7, #4294967295
 800b552:	4638      	mov	r0, r7
 800b554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b556:	bf00      	nop
 800b558:	0800e188 	.word	0x0800e188
 800b55c:	0800e1a8 	.word	0x0800e1a8
 800b560:	0800e168 	.word	0x0800e168

0800b564 <__swsetup_r>:
 800b564:	4b32      	ldr	r3, [pc, #200]	; (800b630 <__swsetup_r+0xcc>)
 800b566:	b570      	push	{r4, r5, r6, lr}
 800b568:	681d      	ldr	r5, [r3, #0]
 800b56a:	4606      	mov	r6, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	b125      	cbz	r5, 800b57a <__swsetup_r+0x16>
 800b570:	69ab      	ldr	r3, [r5, #24]
 800b572:	b913      	cbnz	r3, 800b57a <__swsetup_r+0x16>
 800b574:	4628      	mov	r0, r5
 800b576:	f000 ff4d 	bl	800c414 <__sinit>
 800b57a:	4b2e      	ldr	r3, [pc, #184]	; (800b634 <__swsetup_r+0xd0>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	d10f      	bne.n	800b5a0 <__swsetup_r+0x3c>
 800b580:	686c      	ldr	r4, [r5, #4]
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	b29a      	uxth	r2, r3
 800b588:	0715      	lsls	r5, r2, #28
 800b58a:	d42c      	bmi.n	800b5e6 <__swsetup_r+0x82>
 800b58c:	06d0      	lsls	r0, r2, #27
 800b58e:	d411      	bmi.n	800b5b4 <__swsetup_r+0x50>
 800b590:	2209      	movs	r2, #9
 800b592:	6032      	str	r2, [r6, #0]
 800b594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b598:	81a3      	strh	r3, [r4, #12]
 800b59a:	f04f 30ff 	mov.w	r0, #4294967295
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	4b25      	ldr	r3, [pc, #148]	; (800b638 <__swsetup_r+0xd4>)
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	d101      	bne.n	800b5aa <__swsetup_r+0x46>
 800b5a6:	68ac      	ldr	r4, [r5, #8]
 800b5a8:	e7eb      	b.n	800b582 <__swsetup_r+0x1e>
 800b5aa:	4b24      	ldr	r3, [pc, #144]	; (800b63c <__swsetup_r+0xd8>)
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	bf08      	it	eq
 800b5b0:	68ec      	ldreq	r4, [r5, #12]
 800b5b2:	e7e6      	b.n	800b582 <__swsetup_r+0x1e>
 800b5b4:	0751      	lsls	r1, r2, #29
 800b5b6:	d512      	bpl.n	800b5de <__swsetup_r+0x7a>
 800b5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ba:	b141      	cbz	r1, 800b5ce <__swsetup_r+0x6a>
 800b5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c0:	4299      	cmp	r1, r3
 800b5c2:	d002      	beq.n	800b5ca <__swsetup_r+0x66>
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f001 fb29 	bl	800cc1c <_free_r>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5d4:	81a3      	strh	r3, [r4, #12]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	6063      	str	r3, [r4, #4]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f043 0308 	orr.w	r3, r3, #8
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	b94b      	cbnz	r3, 800b5fe <__swsetup_r+0x9a>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f4:	d003      	beq.n	800b5fe <__swsetup_r+0x9a>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f000 ffcb 	bl	800c594 <__smakebuf_r>
 800b5fe:	89a2      	ldrh	r2, [r4, #12]
 800b600:	f012 0301 	ands.w	r3, r2, #1
 800b604:	d00c      	beq.n	800b620 <__swsetup_r+0xbc>
 800b606:	2300      	movs	r3, #0
 800b608:	60a3      	str	r3, [r4, #8]
 800b60a:	6963      	ldr	r3, [r4, #20]
 800b60c:	425b      	negs	r3, r3
 800b60e:	61a3      	str	r3, [r4, #24]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	b953      	cbnz	r3, 800b62a <__swsetup_r+0xc6>
 800b614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b618:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b61c:	d1ba      	bne.n	800b594 <__swsetup_r+0x30>
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	0792      	lsls	r2, r2, #30
 800b622:	bf58      	it	pl
 800b624:	6963      	ldrpl	r3, [r4, #20]
 800b626:	60a3      	str	r3, [r4, #8]
 800b628:	e7f2      	b.n	800b610 <__swsetup_r+0xac>
 800b62a:	2000      	movs	r0, #0
 800b62c:	e7f7      	b.n	800b61e <__swsetup_r+0xba>
 800b62e:	bf00      	nop
 800b630:	2000003c 	.word	0x2000003c
 800b634:	0800e188 	.word	0x0800e188
 800b638:	0800e1a8 	.word	0x0800e1a8
 800b63c:	0800e168 	.word	0x0800e168

0800b640 <quorem>:
 800b640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	6903      	ldr	r3, [r0, #16]
 800b646:	690c      	ldr	r4, [r1, #16]
 800b648:	429c      	cmp	r4, r3
 800b64a:	4680      	mov	r8, r0
 800b64c:	f300 8082 	bgt.w	800b754 <quorem+0x114>
 800b650:	3c01      	subs	r4, #1
 800b652:	f101 0714 	add.w	r7, r1, #20
 800b656:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800b65a:	f100 0614 	add.w	r6, r0, #20
 800b65e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b662:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b666:	eb06 030e 	add.w	r3, r6, lr
 800b66a:	3501      	adds	r5, #1
 800b66c:	eb07 090e 	add.w	r9, r7, lr
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	fbb0 f5f5 	udiv	r5, r0, r5
 800b676:	b395      	cbz	r5, 800b6de <quorem+0x9e>
 800b678:	f04f 0a00 	mov.w	sl, #0
 800b67c:	4638      	mov	r0, r7
 800b67e:	46b4      	mov	ip, r6
 800b680:	46d3      	mov	fp, sl
 800b682:	f850 2b04 	ldr.w	r2, [r0], #4
 800b686:	b293      	uxth	r3, r2
 800b688:	fb05 a303 	mla	r3, r5, r3, sl
 800b68c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b690:	b29b      	uxth	r3, r3
 800b692:	ebab 0303 	sub.w	r3, fp, r3
 800b696:	0c12      	lsrs	r2, r2, #16
 800b698:	f8bc b000 	ldrh.w	fp, [ip]
 800b69c:	fb05 a202 	mla	r2, r5, r2, sl
 800b6a0:	fa13 f38b 	uxtah	r3, r3, fp
 800b6a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b6a8:	fa1f fb82 	uxth.w	fp, r2
 800b6ac:	f8dc 2000 	ldr.w	r2, [ip]
 800b6b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b6b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6be:	4581      	cmp	r9, r0
 800b6c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b6c4:	f84c 3b04 	str.w	r3, [ip], #4
 800b6c8:	d2db      	bcs.n	800b682 <quorem+0x42>
 800b6ca:	f856 300e 	ldr.w	r3, [r6, lr]
 800b6ce:	b933      	cbnz	r3, 800b6de <quorem+0x9e>
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	3b04      	subs	r3, #4
 800b6d4:	429e      	cmp	r6, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	d330      	bcc.n	800b73c <quorem+0xfc>
 800b6da:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f001 f9c7 	bl	800ca72 <__mcmp>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	db25      	blt.n	800b734 <quorem+0xf4>
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f04f 0e00 	mov.w	lr, #0
 800b6f0:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6f4:	f8d0 c000 	ldr.w	ip, [r0]
 800b6f8:	b293      	uxth	r3, r2
 800b6fa:	ebae 0303 	sub.w	r3, lr, r3
 800b6fe:	0c12      	lsrs	r2, r2, #16
 800b700:	fa13 f38c 	uxtah	r3, r3, ip
 800b704:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b712:	45b9      	cmp	r9, r7
 800b714:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b718:	f840 3b04 	str.w	r3, [r0], #4
 800b71c:	d2e8      	bcs.n	800b6f0 <quorem+0xb0>
 800b71e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b722:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b726:	b92a      	cbnz	r2, 800b734 <quorem+0xf4>
 800b728:	3b04      	subs	r3, #4
 800b72a:	429e      	cmp	r6, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	d30b      	bcc.n	800b748 <quorem+0x108>
 800b730:	f8c8 4010 	str.w	r4, [r8, #16]
 800b734:	4628      	mov	r0, r5
 800b736:	b003      	add	sp, #12
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	6812      	ldr	r2, [r2, #0]
 800b73e:	3b04      	subs	r3, #4
 800b740:	2a00      	cmp	r2, #0
 800b742:	d1ca      	bne.n	800b6da <quorem+0x9a>
 800b744:	3c01      	subs	r4, #1
 800b746:	e7c5      	b.n	800b6d4 <quorem+0x94>
 800b748:	6812      	ldr	r2, [r2, #0]
 800b74a:	3b04      	subs	r3, #4
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	d1ef      	bne.n	800b730 <quorem+0xf0>
 800b750:	3c01      	subs	r4, #1
 800b752:	e7ea      	b.n	800b72a <quorem+0xea>
 800b754:	2000      	movs	r0, #0
 800b756:	e7ee      	b.n	800b736 <quorem+0xf6>

0800b758 <_dtoa_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ec57 6b10 	vmov	r6, r7, d0
 800b760:	b095      	sub	sp, #84	; 0x54
 800b762:	e9cd 6700 	strd	r6, r7, [sp]
 800b766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b768:	9107      	str	r1, [sp, #28]
 800b76a:	4605      	mov	r5, r0
 800b76c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b76e:	9310      	str	r3, [sp, #64]	; 0x40
 800b770:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b772:	b93e      	cbnz	r6, 800b784 <_dtoa_r+0x2c>
 800b774:	2010      	movs	r0, #16
 800b776:	f000 ff4d 	bl	800c614 <malloc>
 800b77a:	6268      	str	r0, [r5, #36]	; 0x24
 800b77c:	6046      	str	r6, [r0, #4]
 800b77e:	6086      	str	r6, [r0, #8]
 800b780:	6006      	str	r6, [r0, #0]
 800b782:	60c6      	str	r6, [r0, #12]
 800b784:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	b151      	cbz	r1, 800b7a0 <_dtoa_r+0x48>
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	604a      	str	r2, [r1, #4]
 800b78e:	2301      	movs	r3, #1
 800b790:	4093      	lsls	r3, r2
 800b792:	608b      	str	r3, [r1, #8]
 800b794:	4628      	mov	r0, r5
 800b796:	f000 ff96 	bl	800c6c6 <_Bfree>
 800b79a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	bfbf      	itttt	lt
 800b7a6:	2301      	movlt	r3, #1
 800b7a8:	6023      	strlt	r3, [r4, #0]
 800b7aa:	9b01      	ldrlt	r3, [sp, #4]
 800b7ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b7b0:	bfb2      	itee	lt
 800b7b2:	9301      	strlt	r3, [sp, #4]
 800b7b4:	2300      	movge	r3, #0
 800b7b6:	6023      	strge	r3, [r4, #0]
 800b7b8:	9c01      	ldr	r4, [sp, #4]
 800b7ba:	4b73      	ldr	r3, [pc, #460]	; (800b988 <_dtoa_r+0x230>)
 800b7bc:	43a3      	bics	r3, r4
 800b7be:	d118      	bne.n	800b7f2 <_dtoa_r+0x9a>
 800b7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	9b00      	ldr	r3, [sp, #0]
 800b7ca:	b923      	cbnz	r3, 800b7d6 <_dtoa_r+0x7e>
 800b7cc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	f000 8518 	beq.w	800c206 <_dtoa_r+0xaae>
 800b7d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7d8:	b93b      	cbnz	r3, 800b7ea <_dtoa_r+0x92>
 800b7da:	4b6c      	ldr	r3, [pc, #432]	; (800b98c <_dtoa_r+0x234>)
 800b7dc:	e01d      	b.n	800b81a <_dtoa_r+0xc2>
 800b7de:	4b6c      	ldr	r3, [pc, #432]	; (800b990 <_dtoa_r+0x238>)
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	e2a6      	b.n	800bd38 <_dtoa_r+0x5e0>
 800b7ea:	4b68      	ldr	r3, [pc, #416]	; (800b98c <_dtoa_r+0x234>)
 800b7ec:	9304      	str	r3, [sp, #16]
 800b7ee:	3303      	adds	r3, #3
 800b7f0:	e7f8      	b.n	800b7e4 <_dtoa_r+0x8c>
 800b7f2:	ed9d 7b00 	vldr	d7, [sp]
 800b7f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b802:	d10c      	bne.n	800b81e <_dtoa_r+0xc6>
 800b804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b806:	2301      	movs	r3, #1
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 84f7 	beq.w	800c200 <_dtoa_r+0xaa8>
 800b812:	4b60      	ldr	r3, [pc, #384]	; (800b994 <_dtoa_r+0x23c>)
 800b814:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	3b01      	subs	r3, #1
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	e28c      	b.n	800bd38 <_dtoa_r+0x5e0>
 800b81e:	a913      	add	r1, sp, #76	; 0x4c
 800b820:	aa12      	add	r2, sp, #72	; 0x48
 800b822:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b826:	4628      	mov	r0, r5
 800b828:	f001 f99b 	bl	800cb62 <__d2b>
 800b82c:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b830:	9003      	str	r0, [sp, #12]
 800b832:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b834:	2900      	cmp	r1, #0
 800b836:	d046      	beq.n	800b8c6 <_dtoa_r+0x16e>
 800b838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83c:	f3c3 0413 	ubfx	r4, r3, #0, #20
 800b840:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b844:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 800b848:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b84c:	2100      	movs	r1, #0
 800b84e:	ee07 aa90 	vmov	s15, sl
 800b852:	ec43 2b16 	vmov	d6, r2, r3
 800b856:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b85a:	ed9f 4b45 	vldr	d4, [pc, #276]	; 800b970 <_dtoa_r+0x218>
 800b85e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b862:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b866:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800b978 <_dtoa_r+0x220>
 800b86a:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b86e:	eeb0 7b46 	vmov.f64	d7, d6
 800b872:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800b980 <_dtoa_r+0x228>
 800b876:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b87a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b87e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b886:	9111      	str	r1, [sp, #68]	; 0x44
 800b888:	ee16 ba90 	vmov	fp, s13
 800b88c:	d508      	bpl.n	800b8a0 <_dtoa_r+0x148>
 800b88e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b892:	eeb4 7b46 	vcmp.f64	d7, d6
 800b896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89a:	bf18      	it	ne
 800b89c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b8a0:	f1bb 0f16 	cmp.w	fp, #22
 800b8a4:	d831      	bhi.n	800b90a <_dtoa_r+0x1b2>
 800b8a6:	4b3c      	ldr	r3, [pc, #240]	; (800b998 <_dtoa_r+0x240>)
 800b8a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b8ac:	ed93 7b00 	vldr	d7, [r3]
 800b8b0:	ed9d 6b00 	vldr	d6, [sp]
 800b8b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8bc:	dd01      	ble.n	800b8c2 <_dtoa_r+0x16a>
 800b8be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e022      	b.n	800b90c <_dtoa_r+0x1b4>
 800b8c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b8c8:	4401      	add	r1, r0
 800b8ca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b8ce:	2b20      	cmp	r3, #32
 800b8d0:	dd15      	ble.n	800b8fe <_dtoa_r+0x1a6>
 800b8d2:	9e00      	ldr	r6, [sp, #0]
 800b8d4:	f201 4212 	addw	r2, r1, #1042	; 0x412
 800b8d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b8dc:	fa26 f202 	lsr.w	r2, r6, r2
 800b8e0:	fa04 f303 	lsl.w	r3, r4, r3
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	ee07 2a90 	vmov	s15, r2
 800b8ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b8ee:	f101 3aff 	add.w	sl, r1, #4294967295
 800b8f2:	ec53 2b17 	vmov	r2, r3, d7
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 800b8fc:	e7a7      	b.n	800b84e <_dtoa_r+0xf6>
 800b8fe:	f1c3 0220 	rsb	r2, r3, #32
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	fa03 f202 	lsl.w	r2, r3, r2
 800b908:	e7ed      	b.n	800b8e6 <_dtoa_r+0x18e>
 800b90a:	2301      	movs	r3, #1
 800b90c:	eba0 0a0a 	sub.w	sl, r0, sl
 800b910:	f1ba 0701 	subs.w	r7, sl, #1
 800b914:	bf46      	itte	mi
 800b916:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b91a:	2700      	movmi	r7, #0
 800b91c:	f04f 0a00 	movpl.w	sl, #0
 800b920:	f1bb 0f00 	cmp.w	fp, #0
 800b924:	930d      	str	r3, [sp, #52]	; 0x34
 800b926:	bfbc      	itt	lt
 800b928:	2300      	movlt	r3, #0
 800b92a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b92c:	9b07      	ldr	r3, [sp, #28]
 800b92e:	bfa3      	ittte	ge
 800b930:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 800b934:	445f      	addge	r7, fp
 800b936:	f04f 0800 	movge.w	r8, #0
 800b93a:	ebaa 0a0b 	sublt.w	sl, sl, fp
 800b93e:	bfb8      	it	lt
 800b940:	f1cb 0800 	rsblt	r8, fp, #0
 800b944:	2b09      	cmp	r3, #9
 800b946:	f200 80f8 	bhi.w	800bb3a <_dtoa_r+0x3e2>
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	bfc4      	itt	gt
 800b94e:	3b04      	subgt	r3, #4
 800b950:	9307      	strgt	r3, [sp, #28]
 800b952:	9b07      	ldr	r3, [sp, #28]
 800b954:	f1a3 0302 	sub.w	r3, r3, #2
 800b958:	bfcc      	ite	gt
 800b95a:	2400      	movgt	r4, #0
 800b95c:	2401      	movle	r4, #1
 800b95e:	2b03      	cmp	r3, #3
 800b960:	f200 80f7 	bhi.w	800bb52 <_dtoa_r+0x3fa>
 800b964:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b968:	00e700e5 	.word	0x00e700e5
 800b96c:	00d9001a 	.word	0x00d9001a
 800b970:	636f4361 	.word	0x636f4361
 800b974:	3fd287a7 	.word	0x3fd287a7
 800b978:	8b60c8b3 	.word	0x8b60c8b3
 800b97c:	3fc68a28 	.word	0x3fc68a28
 800b980:	509f79fb 	.word	0x509f79fb
 800b984:	3fd34413 	.word	0x3fd34413
 800b988:	7ff00000 	.word	0x7ff00000
 800b98c:	0800e161 	.word	0x0800e161
 800b990:	0800e158 	.word	0x0800e158
 800b994:	0800e135 	.word	0x0800e135
 800b998:	0800e200 	.word	0x0800e200
 800b99c:	2301      	movs	r3, #1
 800b99e:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f340 80d8 	ble.w	800bb58 <_dtoa_r+0x400>
 800b9a8:	9306      	str	r3, [sp, #24]
 800b9aa:	4699      	mov	r9, r3
 800b9ac:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	6072      	str	r2, [r6, #4]
 800b9b2:	2104      	movs	r1, #4
 800b9b4:	f101 0214 	add.w	r2, r1, #20
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	f240 80d2 	bls.w	800bb62 <_dtoa_r+0x40a>
 800b9be:	6871      	ldr	r1, [r6, #4]
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f000 fe4c 	bl	800c65e <_Balloc>
 800b9c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9c8:	6030      	str	r0, [r6, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	f1b9 0f0e 	cmp.w	r9, #14
 800b9d2:	d875      	bhi.n	800bac0 <_dtoa_r+0x368>
 800b9d4:	2c00      	cmp	r4, #0
 800b9d6:	d073      	beq.n	800bac0 <_dtoa_r+0x368>
 800b9d8:	ed9d 7b00 	vldr	d7, [sp]
 800b9dc:	f1bb 0f00 	cmp.w	fp, #0
 800b9e0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b9e4:	f340 80ce 	ble.w	800bb84 <_dtoa_r+0x42c>
 800b9e8:	4ab5      	ldr	r2, [pc, #724]	; (800bcc0 <_dtoa_r+0x568>)
 800b9ea:	f00b 030f 	and.w	r3, fp, #15
 800b9ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9f2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b9f6:	ed93 7b00 	vldr	d7, [r3]
 800b9fa:	06d3      	lsls	r3, r2, #27
 800b9fc:	f140 80b6 	bpl.w	800bb6c <_dtoa_r+0x414>
 800ba00:	4bb0      	ldr	r3, [pc, #704]	; (800bcc4 <_dtoa_r+0x56c>)
 800ba02:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 800ba06:	ed93 6b08 	vldr	d6, [r3, #32]
 800ba0a:	ee84 5b06 	vdiv.f64	d5, d4, d6
 800ba0e:	ed8d 5b00 	vstr	d5, [sp]
 800ba12:	f002 020f 	and.w	r2, r2, #15
 800ba16:	2303      	movs	r3, #3
 800ba18:	49aa      	ldr	r1, [pc, #680]	; (800bcc4 <_dtoa_r+0x56c>)
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	f040 80a8 	bne.w	800bb70 <_dtoa_r+0x418>
 800ba20:	ed9d 5b00 	vldr	d5, [sp]
 800ba24:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800ba28:	ed8d 6b00 	vstr	d6, [sp]
 800ba2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	f000 80da 	beq.w	800bbe8 <_dtoa_r+0x490>
 800ba34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ba38:	ed9d 7b00 	vldr	d7, [sp]
 800ba3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba44:	f140 80d0 	bpl.w	800bbe8 <_dtoa_r+0x490>
 800ba48:	f1b9 0f00 	cmp.w	r9, #0
 800ba4c:	f000 80cc 	beq.w	800bbe8 <_dtoa_r+0x490>
 800ba50:	9a06      	ldr	r2, [sp, #24]
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	dd30      	ble.n	800bab8 <_dtoa_r+0x360>
 800ba56:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ba5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba5e:	ed8d 7b00 	vstr	d7, [sp]
 800ba62:	9c06      	ldr	r4, [sp, #24]
 800ba64:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ba68:	3301      	adds	r3, #1
 800ba6a:	ed9d 6b00 	vldr	d6, [sp]
 800ba6e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba7a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba7e:	ed8d 5b00 	vstr	d5, [sp]
 800ba82:	9b01      	ldr	r3, [sp, #4]
 800ba84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	f040 80af 	bne.w	800bbee <_dtoa_r+0x496>
 800ba90:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba94:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ba98:	ed9d 7b00 	vldr	d7, [sp]
 800ba9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa4:	f300 8300 	bgt.w	800c0a8 <_dtoa_r+0x950>
 800baa8:	eeb1 7b47 	vneg.f64	d7, d7
 800baac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab4:	f100 82f6 	bmi.w	800c0a4 <_dtoa_r+0x94c>
 800bab8:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800babc:	e88d 0018 	stmia.w	sp, {r3, r4}
 800bac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f2c0 8158 	blt.w	800bd78 <_dtoa_r+0x620>
 800bac8:	f1bb 0f0e 	cmp.w	fp, #14
 800bacc:	f300 8154 	bgt.w	800bd78 <_dtoa_r+0x620>
 800bad0:	4b7b      	ldr	r3, [pc, #492]	; (800bcc0 <_dtoa_r+0x568>)
 800bad2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bad6:	ed93 6b00 	vldr	d6, [r3]
 800bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	f280 80f3 	bge.w	800bcc8 <_dtoa_r+0x570>
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	f300 80ef 	bgt.w	800bcc8 <_dtoa_r+0x570>
 800baea:	f040 82da 	bne.w	800c0a2 <_dtoa_r+0x94a>
 800baee:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800baf2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800baf6:	ed9d 7b00 	vldr	d7, [sp]
 800bafa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	464c      	mov	r4, r9
 800bb04:	464e      	mov	r6, r9
 800bb06:	f280 82ac 	bge.w	800c062 <_dtoa_r+0x90a>
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	9904      	ldr	r1, [sp, #16]
 800bb0e:	2231      	movs	r2, #49	; 0x31
 800bb10:	3301      	adds	r3, #1
 800bb12:	700a      	strb	r2, [r1, #0]
 800bb14:	f10b 0b01 	add.w	fp, fp, #1
 800bb18:	e2a7      	b.n	800c06a <_dtoa_r+0x912>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	930a      	str	r3, [sp, #40]	; 0x28
 800bb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb20:	445b      	add	r3, fp
 800bb22:	f103 0901 	add.w	r9, r3, #1
 800bb26:	9306      	str	r3, [sp, #24]
 800bb28:	464b      	mov	r3, r9
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	bfb8      	it	lt
 800bb2e:	2301      	movlt	r3, #1
 800bb30:	e73c      	b.n	800b9ac <_dtoa_r+0x254>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e733      	b.n	800b99e <_dtoa_r+0x246>
 800bb36:	2300      	movs	r3, #0
 800bb38:	e7f0      	b.n	800bb1c <_dtoa_r+0x3c4>
 800bb3a:	2401      	movs	r4, #1
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	940a      	str	r4, [sp, #40]	; 0x28
 800bb42:	f04f 33ff 	mov.w	r3, #4294967295
 800bb46:	9306      	str	r3, [sp, #24]
 800bb48:	4699      	mov	r9, r3
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2312      	movs	r3, #18
 800bb4e:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb50:	e72c      	b.n	800b9ac <_dtoa_r+0x254>
 800bb52:	2301      	movs	r3, #1
 800bb54:	930a      	str	r3, [sp, #40]	; 0x28
 800bb56:	e7f4      	b.n	800bb42 <_dtoa_r+0x3ea>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	9306      	str	r3, [sp, #24]
 800bb5c:	4699      	mov	r9, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	e7f5      	b.n	800bb4e <_dtoa_r+0x3f6>
 800bb62:	6872      	ldr	r2, [r6, #4]
 800bb64:	3201      	adds	r2, #1
 800bb66:	6072      	str	r2, [r6, #4]
 800bb68:	0049      	lsls	r1, r1, #1
 800bb6a:	e723      	b.n	800b9b4 <_dtoa_r+0x25c>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e753      	b.n	800ba18 <_dtoa_r+0x2c0>
 800bb70:	07d6      	lsls	r6, r2, #31
 800bb72:	d504      	bpl.n	800bb7e <_dtoa_r+0x426>
 800bb74:	ed91 6b00 	vldr	d6, [r1]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb7e:	1052      	asrs	r2, r2, #1
 800bb80:	3108      	adds	r1, #8
 800bb82:	e74a      	b.n	800ba1a <_dtoa_r+0x2c2>
 800bb84:	d02e      	beq.n	800bbe4 <_dtoa_r+0x48c>
 800bb86:	f1cb 0200 	rsb	r2, fp, #0
 800bb8a:	4b4d      	ldr	r3, [pc, #308]	; (800bcc0 <_dtoa_r+0x568>)
 800bb8c:	f002 010f 	and.w	r1, r2, #15
 800bb90:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bb94:	ed93 7b00 	vldr	d7, [r3]
 800bb98:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800bb9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bba0:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bba4:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800bba8:	4946      	ldr	r1, [pc, #280]	; (800bcc4 <_dtoa_r+0x56c>)
 800bbaa:	e88d 0018 	stmia.w	sp, {r3, r4}
 800bbae:	1112      	asrs	r2, r2, #4
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	b93a      	cbnz	r2, 800bbc6 <_dtoa_r+0x46e>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f af38 	beq.w	800ba2c <_dtoa_r+0x2d4>
 800bbbc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800bbc0:	e88d 0006 	stmia.w	sp, {r1, r2}
 800bbc4:	e732      	b.n	800ba2c <_dtoa_r+0x2d4>
 800bbc6:	07d4      	lsls	r4, r2, #31
 800bbc8:	d509      	bpl.n	800bbde <_dtoa_r+0x486>
 800bbca:	ed9d 6b08 	vldr	d6, [sp, #32]
 800bbce:	ed91 7b00 	vldr	d7, [r1]
 800bbd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbd6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	2001      	movs	r0, #1
 800bbde:	1052      	asrs	r2, r2, #1
 800bbe0:	3108      	adds	r1, #8
 800bbe2:	e7e7      	b.n	800bbb4 <_dtoa_r+0x45c>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e721      	b.n	800ba2c <_dtoa_r+0x2d4>
 800bbe8:	465a      	mov	r2, fp
 800bbea:	464c      	mov	r4, r9
 800bbec:	e73d      	b.n	800ba6a <_dtoa_r+0x312>
 800bbee:	9804      	ldr	r0, [sp, #16]
 800bbf0:	4b33      	ldr	r3, [pc, #204]	; (800bcc0 <_dtoa_r+0x568>)
 800bbf2:	1e61      	subs	r1, r4, #1
 800bbf4:	4404      	add	r4, r0
 800bbf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bbf8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bbfc:	ed93 5b00 	vldr	d5, [r3]
 800bc00:	b358      	cbz	r0, 800bc5a <_dtoa_r+0x502>
 800bc02:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bc06:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800bc0a:	ed9d 5b00 	vldr	d5, [sp]
 800bc0e:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bc12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bc1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc20:	ee14 1a90 	vmov	r1, s9
 800bc24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc28:	3130      	adds	r1, #48	; 0x30
 800bc2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc36:	f803 1b01 	strb.w	r1, [r3], #1
 800bc3a:	d439      	bmi.n	800bcb0 <_dtoa_r+0x558>
 800bc3c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bc40:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc48:	d47b      	bmi.n	800bd42 <_dtoa_r+0x5ea>
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	f43f af34 	beq.w	800bab8 <_dtoa_r+0x360>
 800bc50:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bc54:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc58:	e7e0      	b.n	800bc1c <_dtoa_r+0x4c4>
 800bc5a:	ed9d 7b00 	vldr	d7, [sp]
 800bc5e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bc62:	9b04      	ldr	r3, [sp, #16]
 800bc64:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc6c:	ee14 1a90 	vmov	r1, s9
 800bc70:	3130      	adds	r1, #48	; 0x30
 800bc72:	f803 1b01 	strb.w	r1, [r3], #1
 800bc76:	429c      	cmp	r4, r3
 800bc78:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 800bc7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc80:	d11a      	bne.n	800bcb8 <_dtoa_r+0x560>
 800bc82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bc86:	ee35 4b07 	vadd.f64	d4, d5, d7
 800bc8a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc92:	dc56      	bgt.n	800bd42 <_dtoa_r+0x5ea>
 800bc94:	ee37 5b45 	vsub.f64	d5, d7, d5
 800bc98:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca0:	f57f af0a 	bpl.w	800bab8 <_dtoa_r+0x360>
 800bca4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bca8:	2930      	cmp	r1, #48	; 0x30
 800bcaa:	f103 30ff 	add.w	r0, r3, #4294967295
 800bcae:	d001      	beq.n	800bcb4 <_dtoa_r+0x55c>
 800bcb0:	4693      	mov	fp, r2
 800bcb2:	e031      	b.n	800bd18 <_dtoa_r+0x5c0>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	e7f5      	b.n	800bca4 <_dtoa_r+0x54c>
 800bcb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bcbc:	e7d4      	b.n	800bc68 <_dtoa_r+0x510>
 800bcbe:	bf00      	nop
 800bcc0:	0800e200 	.word	0x0800e200
 800bcc4:	0800e1d8 	.word	0x0800e1d8
 800bcc8:	ed9d 7b00 	vldr	d7, [sp]
 800bccc:	eeb1 3b46 	vneg.f64	d3, d6
 800bcd0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bcda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bcde:	ee15 2a10 	vmov	r2, s10
 800bce2:	3230      	adds	r2, #48	; 0x30
 800bce4:	f803 2b01 	strb.w	r2, [r3], #1
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	1a9a      	subs	r2, r3, r2
 800bcec:	4591      	cmp	r9, r2
 800bcee:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 800bcf2:	eea3 7b02 	vfma.f64	d7, d3, d2
 800bcf6:	d137      	bne.n	800bd68 <_dtoa_r+0x610>
 800bcf8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bcfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd04:	d41c      	bmi.n	800bd40 <_dtoa_r+0x5e8>
 800bd06:	eeb4 6b47 	vcmp.f64	d6, d7
 800bd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0e:	d103      	bne.n	800bd18 <_dtoa_r+0x5c0>
 800bd10:	ee15 2a10 	vmov	r2, s10
 800bd14:	07d2      	lsls	r2, r2, #31
 800bd16:	d413      	bmi.n	800bd40 <_dtoa_r+0x5e8>
 800bd18:	9903      	ldr	r1, [sp, #12]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f000 fcd2 	bl	800c6c6 <_Bfree>
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	f10b 0201 	add.w	r2, fp, #1
 800bd2e:	600a      	str	r2, [r1, #0]
 800bd30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	f47f ad57 	bne.w	800b7e6 <_dtoa_r+0x8e>
 800bd38:	9804      	ldr	r0, [sp, #16]
 800bd3a:	b015      	add	sp, #84	; 0x54
 800bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd40:	465a      	mov	r2, fp
 800bd42:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800bd46:	2839      	cmp	r0, #57	; 0x39
 800bd48:	f103 31ff 	add.w	r1, r3, #4294967295
 800bd4c:	d106      	bne.n	800bd5c <_dtoa_r+0x604>
 800bd4e:	9804      	ldr	r0, [sp, #16]
 800bd50:	4288      	cmp	r0, r1
 800bd52:	d107      	bne.n	800bd64 <_dtoa_r+0x60c>
 800bd54:	2130      	movs	r1, #48	; 0x30
 800bd56:	7001      	strb	r1, [r0, #0]
 800bd58:	3201      	adds	r2, #1
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	7808      	ldrb	r0, [r1, #0]
 800bd5e:	3001      	adds	r0, #1
 800bd60:	7008      	strb	r0, [r1, #0]
 800bd62:	e7a5      	b.n	800bcb0 <_dtoa_r+0x558>
 800bd64:	460b      	mov	r3, r1
 800bd66:	e7ec      	b.n	800bd42 <_dtoa_r+0x5ea>
 800bd68:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd74:	d1af      	bne.n	800bcd6 <_dtoa_r+0x57e>
 800bd76:	e7cf      	b.n	800bd18 <_dtoa_r+0x5c0>
 800bd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd7a:	2a00      	cmp	r2, #0
 800bd7c:	f000 8129 	beq.w	800bfd2 <_dtoa_r+0x87a>
 800bd80:	9a07      	ldr	r2, [sp, #28]
 800bd82:	2a01      	cmp	r2, #1
 800bd84:	f300 810b 	bgt.w	800bf9e <_dtoa_r+0x846>
 800bd88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd8a:	2a00      	cmp	r2, #0
 800bd8c:	f000 8103 	beq.w	800bf96 <_dtoa_r+0x83e>
 800bd90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd94:	4644      	mov	r4, r8
 800bd96:	f8cd a020 	str.w	sl, [sp, #32]
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	449a      	add	sl, r3
 800bda0:	441f      	add	r7, r3
 800bda2:	f000 fd30 	bl	800c806 <__i2b>
 800bda6:	4606      	mov	r6, r0
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dd0a      	ble.n	800bdc4 <_dtoa_r+0x66c>
 800bdae:	2f00      	cmp	r7, #0
 800bdb0:	dd08      	ble.n	800bdc4 <_dtoa_r+0x66c>
 800bdb2:	42bb      	cmp	r3, r7
 800bdb4:	9a08      	ldr	r2, [sp, #32]
 800bdb6:	bfa8      	it	ge
 800bdb8:	463b      	movge	r3, r7
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	ebaa 0a03 	sub.w	sl, sl, r3
 800bdc0:	9208      	str	r2, [sp, #32]
 800bdc2:	1aff      	subs	r7, r7, r3
 800bdc4:	f1b8 0f00 	cmp.w	r8, #0
 800bdc8:	d01f      	beq.n	800be0a <_dtoa_r+0x6b2>
 800bdca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 8105 	beq.w	800bfdc <_dtoa_r+0x884>
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	dd11      	ble.n	800bdfa <_dtoa_r+0x6a2>
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4622      	mov	r2, r4
 800bdda:	4628      	mov	r0, r5
 800bddc:	f000 fdaa 	bl	800c934 <__pow5mult>
 800bde0:	9a03      	ldr	r2, [sp, #12]
 800bde2:	4601      	mov	r1, r0
 800bde4:	4606      	mov	r6, r0
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 fd16 	bl	800c818 <__multiply>
 800bdec:	9903      	ldr	r1, [sp, #12]
 800bdee:	900e      	str	r0, [sp, #56]	; 0x38
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f000 fc68 	bl	800c6c6 <_Bfree>
 800bdf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdf8:	9303      	str	r3, [sp, #12]
 800bdfa:	ebb8 0204 	subs.w	r2, r8, r4
 800bdfe:	d004      	beq.n	800be0a <_dtoa_r+0x6b2>
 800be00:	9903      	ldr	r1, [sp, #12]
 800be02:	4628      	mov	r0, r5
 800be04:	f000 fd96 	bl	800c934 <__pow5mult>
 800be08:	9003      	str	r0, [sp, #12]
 800be0a:	2101      	movs	r1, #1
 800be0c:	4628      	mov	r0, r5
 800be0e:	f000 fcfa 	bl	800c806 <__i2b>
 800be12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be14:	2b00      	cmp	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	f340 80e2 	ble.w	800bfe0 <_dtoa_r+0x888>
 800be1c:	461a      	mov	r2, r3
 800be1e:	4601      	mov	r1, r0
 800be20:	4628      	mov	r0, r5
 800be22:	f000 fd87 	bl	800c934 <__pow5mult>
 800be26:	9b07      	ldr	r3, [sp, #28]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	4604      	mov	r4, r0
 800be2c:	f340 80db 	ble.w	800bfe6 <_dtoa_r+0x88e>
 800be30:	f04f 0800 	mov.w	r8, #0
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be3a:	6918      	ldr	r0, [r3, #16]
 800be3c:	f000 fc95 	bl	800c76a <__hi0bits>
 800be40:	f1c0 0020 	rsb	r0, r0, #32
 800be44:	4438      	add	r0, r7
 800be46:	f010 001f 	ands.w	r0, r0, #31
 800be4a:	f000 80f1 	beq.w	800c030 <_dtoa_r+0x8d8>
 800be4e:	f1c0 0320 	rsb	r3, r0, #32
 800be52:	2b04      	cmp	r3, #4
 800be54:	f340 80e3 	ble.w	800c01e <_dtoa_r+0x8c6>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	f1c0 001c 	rsb	r0, r0, #28
 800be5e:	4403      	add	r3, r0
 800be60:	4482      	add	sl, r0
 800be62:	9308      	str	r3, [sp, #32]
 800be64:	4407      	add	r7, r0
 800be66:	f1ba 0f00 	cmp.w	sl, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x720>
 800be6c:	4652      	mov	r2, sl
 800be6e:	9903      	ldr	r1, [sp, #12]
 800be70:	4628      	mov	r0, r5
 800be72:	f000 fdad 	bl	800c9d0 <__lshift>
 800be76:	9003      	str	r0, [sp, #12]
 800be78:	2f00      	cmp	r7, #0
 800be7a:	dd05      	ble.n	800be88 <_dtoa_r+0x730>
 800be7c:	4621      	mov	r1, r4
 800be7e:	463a      	mov	r2, r7
 800be80:	4628      	mov	r0, r5
 800be82:	f000 fda5 	bl	800c9d0 <__lshift>
 800be86:	4604      	mov	r4, r0
 800be88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 80d2 	beq.w	800c034 <_dtoa_r+0x8dc>
 800be90:	4621      	mov	r1, r4
 800be92:	9803      	ldr	r0, [sp, #12]
 800be94:	f000 fded 	bl	800ca72 <__mcmp>
 800be98:	2800      	cmp	r0, #0
 800be9a:	f280 80cb 	bge.w	800c034 <_dtoa_r+0x8dc>
 800be9e:	2300      	movs	r3, #0
 800bea0:	220a      	movs	r2, #10
 800bea2:	9903      	ldr	r1, [sp, #12]
 800bea4:	4628      	mov	r0, r5
 800bea6:	f000 fc25 	bl	800c6f4 <__multadd>
 800beaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beac:	9003      	str	r0, [sp, #12]
 800beae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f000 81ae 	beq.w	800c214 <_dtoa_r+0xabc>
 800beb8:	2300      	movs	r3, #0
 800beba:	4631      	mov	r1, r6
 800bebc:	220a      	movs	r2, #10
 800bebe:	4628      	mov	r0, r5
 800bec0:	f000 fc18 	bl	800c6f4 <__multadd>
 800bec4:	9b06      	ldr	r3, [sp, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	4606      	mov	r6, r0
 800beca:	dc03      	bgt.n	800bed4 <_dtoa_r+0x77c>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	f300 80b8 	bgt.w	800c044 <_dtoa_r+0x8ec>
 800bed4:	9b08      	ldr	r3, [sp, #32]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dd05      	ble.n	800bee6 <_dtoa_r+0x78e>
 800beda:	4631      	mov	r1, r6
 800bedc:	461a      	mov	r2, r3
 800bede:	4628      	mov	r0, r5
 800bee0:	f000 fd76 	bl	800c9d0 <__lshift>
 800bee4:	4606      	mov	r6, r0
 800bee6:	f1b8 0f00 	cmp.w	r8, #0
 800beea:	f000 8115 	beq.w	800c118 <_dtoa_r+0x9c0>
 800beee:	6871      	ldr	r1, [r6, #4]
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 fbb4 	bl	800c65e <_Balloc>
 800bef6:	6932      	ldr	r2, [r6, #16]
 800bef8:	3202      	adds	r2, #2
 800befa:	4607      	mov	r7, r0
 800befc:	0092      	lsls	r2, r2, #2
 800befe:	f106 010c 	add.w	r1, r6, #12
 800bf02:	300c      	adds	r0, #12
 800bf04:	f000 fba0 	bl	800c648 <memcpy>
 800bf08:	2201      	movs	r2, #1
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f000 fd5f 	bl	800c9d0 <__lshift>
 800bf12:	9b00      	ldr	r3, [sp, #0]
 800bf14:	9f04      	ldr	r7, [sp, #16]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	46b1      	mov	r9, r6
 800bf1c:	9308      	str	r3, [sp, #32]
 800bf1e:	4606      	mov	r6, r0
 800bf20:	4621      	mov	r1, r4
 800bf22:	9803      	ldr	r0, [sp, #12]
 800bf24:	f7ff fb8c 	bl	800b640 <quorem>
 800bf28:	4649      	mov	r1, r9
 800bf2a:	4682      	mov	sl, r0
 800bf2c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bf30:	9803      	ldr	r0, [sp, #12]
 800bf32:	f000 fd9e 	bl	800ca72 <__mcmp>
 800bf36:	4632      	mov	r2, r6
 800bf38:	9000      	str	r0, [sp, #0]
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f000 fdb2 	bl	800caa6 <__mdiff>
 800bf42:	68c3      	ldr	r3, [r0, #12]
 800bf44:	4602      	mov	r2, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f040 80e8 	bne.w	800c11c <_dtoa_r+0x9c4>
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	900a      	str	r0, [sp, #40]	; 0x28
 800bf50:	9803      	ldr	r0, [sp, #12]
 800bf52:	f000 fd8e 	bl	800ca72 <__mcmp>
 800bf56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf58:	4603      	mov	r3, r0
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf60:	f000 fbb1 	bl	800c6c6 <_Bfree>
 800bf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 80da 	bne.w	800c120 <_dtoa_r+0x9c8>
 800bf6c:	9a07      	ldr	r2, [sp, #28]
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	f040 80d6 	bne.w	800c120 <_dtoa_r+0x9c8>
 800bf74:	9a08      	ldr	r2, [sp, #32]
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	f040 80d2 	bne.w	800c120 <_dtoa_r+0x9c8>
 800bf7c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf80:	f000 80ee 	beq.w	800c160 <_dtoa_r+0xa08>
 800bf84:	9b00      	ldr	r3, [sp, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dd01      	ble.n	800bf8e <_dtoa_r+0x836>
 800bf8a:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 800bf8e:	1c7b      	adds	r3, r7, #1
 800bf90:	f887 8000 	strb.w	r8, [r7]
 800bf94:	e06b      	b.n	800c06e <_dtoa_r+0x916>
 800bf96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf9c:	e6fa      	b.n	800bd94 <_dtoa_r+0x63c>
 800bf9e:	f109 34ff 	add.w	r4, r9, #4294967295
 800bfa2:	45a0      	cmp	r8, r4
 800bfa4:	bfbf      	itttt	lt
 800bfa6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800bfa8:	eba4 0808 	sublt.w	r8, r4, r8
 800bfac:	4443      	addlt	r3, r8
 800bfae:	930c      	strlt	r3, [sp, #48]	; 0x30
 800bfb0:	bfb6      	itet	lt
 800bfb2:	46a0      	movlt	r8, r4
 800bfb4:	eba8 0404 	subge.w	r4, r8, r4
 800bfb8:	2400      	movlt	r4, #0
 800bfba:	f1b9 0f00 	cmp.w	r9, #0
 800bfbe:	bfbb      	ittet	lt
 800bfc0:	ebaa 0309 	sublt.w	r3, sl, r9
 800bfc4:	9308      	strlt	r3, [sp, #32]
 800bfc6:	f8cd a020 	strge.w	sl, [sp, #32]
 800bfca:	2300      	movlt	r3, #0
 800bfcc:	bfa8      	it	ge
 800bfce:	464b      	movge	r3, r9
 800bfd0:	e6e3      	b.n	800bd9a <_dtoa_r+0x642>
 800bfd2:	4644      	mov	r4, r8
 800bfd4:	f8cd a020 	str.w	sl, [sp, #32]
 800bfd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bfda:	e6e5      	b.n	800bda8 <_dtoa_r+0x650>
 800bfdc:	4642      	mov	r2, r8
 800bfde:	e70f      	b.n	800be00 <_dtoa_r+0x6a8>
 800bfe0:	9b07      	ldr	r3, [sp, #28]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	dc16      	bgt.n	800c014 <_dtoa_r+0x8bc>
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	b9a3      	cbnz	r3, 800c014 <_dtoa_r+0x8bc>
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bff0:	b983      	cbnz	r3, 800c014 <_dtoa_r+0x8bc>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bff8:	0d1b      	lsrs	r3, r3, #20
 800bffa:	051b      	lsls	r3, r3, #20
 800bffc:	b16b      	cbz	r3, 800c01a <_dtoa_r+0x8c2>
 800bffe:	f10a 0a01 	add.w	sl, sl, #1
 800c002:	3701      	adds	r7, #1
 800c004:	f04f 0801 	mov.w	r8, #1
 800c008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f47f af12 	bne.w	800be34 <_dtoa_r+0x6dc>
 800c010:	2001      	movs	r0, #1
 800c012:	e717      	b.n	800be44 <_dtoa_r+0x6ec>
 800c014:	f04f 0800 	mov.w	r8, #0
 800c018:	e7f6      	b.n	800c008 <_dtoa_r+0x8b0>
 800c01a:	4698      	mov	r8, r3
 800c01c:	e7f4      	b.n	800c008 <_dtoa_r+0x8b0>
 800c01e:	f43f af22 	beq.w	800be66 <_dtoa_r+0x70e>
 800c022:	9a08      	ldr	r2, [sp, #32]
 800c024:	331c      	adds	r3, #28
 800c026:	441a      	add	r2, r3
 800c028:	449a      	add	sl, r3
 800c02a:	9208      	str	r2, [sp, #32]
 800c02c:	441f      	add	r7, r3
 800c02e:	e71a      	b.n	800be66 <_dtoa_r+0x70e>
 800c030:	4603      	mov	r3, r0
 800c032:	e7f6      	b.n	800c022 <_dtoa_r+0x8ca>
 800c034:	f1b9 0f00 	cmp.w	r9, #0
 800c038:	dc39      	bgt.n	800c0ae <_dtoa_r+0x956>
 800c03a:	9b07      	ldr	r3, [sp, #28]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	dd36      	ble.n	800c0ae <_dtoa_r+0x956>
 800c040:	f8cd 9018 	str.w	r9, [sp, #24]
 800c044:	9b06      	ldr	r3, [sp, #24]
 800c046:	b963      	cbnz	r3, 800c062 <_dtoa_r+0x90a>
 800c048:	4621      	mov	r1, r4
 800c04a:	2205      	movs	r2, #5
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 fb51 	bl	800c6f4 <__multadd>
 800c052:	4601      	mov	r1, r0
 800c054:	4604      	mov	r4, r0
 800c056:	9803      	ldr	r0, [sp, #12]
 800c058:	f000 fd0b 	bl	800ca72 <__mcmp>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f73f ad54 	bgt.w	800bb0a <_dtoa_r+0x3b2>
 800c062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c064:	ea6f 0b03 	mvn.w	fp, r3
 800c068:	9b04      	ldr	r3, [sp, #16]
 800c06a:	f04f 0900 	mov.w	r9, #0
 800c06e:	4621      	mov	r1, r4
 800c070:	4628      	mov	r0, r5
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	f000 fb27 	bl	800c6c6 <_Bfree>
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	2e00      	cmp	r6, #0
 800c07c:	f43f ae4c 	beq.w	800bd18 <_dtoa_r+0x5c0>
 800c080:	f1b9 0f00 	cmp.w	r9, #0
 800c084:	d006      	beq.n	800c094 <_dtoa_r+0x93c>
 800c086:	45b1      	cmp	r9, r6
 800c088:	d004      	beq.n	800c094 <_dtoa_r+0x93c>
 800c08a:	4649      	mov	r1, r9
 800c08c:	4628      	mov	r0, r5
 800c08e:	f000 fb1a 	bl	800c6c6 <_Bfree>
 800c092:	9b00      	ldr	r3, [sp, #0]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	f000 fb14 	bl	800c6c6 <_Bfree>
 800c09e:	9b00      	ldr	r3, [sp, #0]
 800c0a0:	e63a      	b.n	800bd18 <_dtoa_r+0x5c0>
 800c0a2:	2400      	movs	r4, #0
 800c0a4:	4626      	mov	r6, r4
 800c0a6:	e7dc      	b.n	800c062 <_dtoa_r+0x90a>
 800c0a8:	4693      	mov	fp, r2
 800c0aa:	4626      	mov	r6, r4
 800c0ac:	e52d      	b.n	800bb0a <_dtoa_r+0x3b2>
 800c0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b0:	f8cd 9018 	str.w	r9, [sp, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f47f af0d 	bne.w	800bed4 <_dtoa_r+0x77c>
 800c0ba:	9f04      	ldr	r7, [sp, #16]
 800c0bc:	9803      	ldr	r0, [sp, #12]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	f7ff fabe 	bl	800b640 <quorem>
 800c0c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0c8:	f807 8b01 	strb.w	r8, [r7], #1
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	9a06      	ldr	r2, [sp, #24]
 800c0d0:	1afb      	subs	r3, r7, r3
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	f300 8081 	bgt.w	800c1da <_dtoa_r+0xa82>
 800c0d8:	9b04      	ldr	r3, [sp, #16]
 800c0da:	2a01      	cmp	r2, #1
 800c0dc:	bfac      	ite	ge
 800c0de:	189b      	addge	r3, r3, r2
 800c0e0:	3301      	addlt	r3, #1
 800c0e2:	461f      	mov	r7, r3
 800c0e4:	f04f 0900 	mov.w	r9, #0
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	9903      	ldr	r1, [sp, #12]
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 fc6f 	bl	800c9d0 <__lshift>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	9003      	str	r0, [sp, #12]
 800c0f6:	f000 fcbc 	bl	800ca72 <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	dc33      	bgt.n	800c166 <_dtoa_r+0xa0e>
 800c0fe:	d102      	bne.n	800c106 <_dtoa_r+0x9ae>
 800c100:	f018 0f01 	tst.w	r8, #1
 800c104:	d12f      	bne.n	800c166 <_dtoa_r+0xa0e>
 800c106:	463b      	mov	r3, r7
 800c108:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800c10c:	2a30      	cmp	r2, #48	; 0x30
 800c10e:	f103 31ff 	add.w	r1, r3, #4294967295
 800c112:	d1ac      	bne.n	800c06e <_dtoa_r+0x916>
 800c114:	460b      	mov	r3, r1
 800c116:	e7f7      	b.n	800c108 <_dtoa_r+0x9b0>
 800c118:	4630      	mov	r0, r6
 800c11a:	e6fa      	b.n	800bf12 <_dtoa_r+0x7ba>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e71c      	b.n	800bf5a <_dtoa_r+0x802>
 800c120:	9a00      	ldr	r2, [sp, #0]
 800c122:	2a00      	cmp	r2, #0
 800c124:	db04      	blt.n	800c130 <_dtoa_r+0x9d8>
 800c126:	d127      	bne.n	800c178 <_dtoa_r+0xa20>
 800c128:	9a07      	ldr	r2, [sp, #28]
 800c12a:	bb2a      	cbnz	r2, 800c178 <_dtoa_r+0xa20>
 800c12c:	9a08      	ldr	r2, [sp, #32]
 800c12e:	bb1a      	cbnz	r2, 800c178 <_dtoa_r+0xa20>
 800c130:	2b00      	cmp	r3, #0
 800c132:	f77f af2c 	ble.w	800bf8e <_dtoa_r+0x836>
 800c136:	2201      	movs	r2, #1
 800c138:	9903      	ldr	r1, [sp, #12]
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 fc48 	bl	800c9d0 <__lshift>
 800c140:	4621      	mov	r1, r4
 800c142:	9003      	str	r0, [sp, #12]
 800c144:	f000 fc95 	bl	800ca72 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	dc05      	bgt.n	800c158 <_dtoa_r+0xa00>
 800c14c:	f47f af1f 	bne.w	800bf8e <_dtoa_r+0x836>
 800c150:	f018 0f01 	tst.w	r8, #1
 800c154:	f43f af1b 	beq.w	800bf8e <_dtoa_r+0x836>
 800c158:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c15c:	f47f af15 	bne.w	800bf8a <_dtoa_r+0x832>
 800c160:	2339      	movs	r3, #57	; 0x39
 800c162:	703b      	strb	r3, [r7, #0]
 800c164:	3701      	adds	r7, #1
 800c166:	463b      	mov	r3, r7
 800c168:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800c16c:	2a39      	cmp	r2, #57	; 0x39
 800c16e:	f103 31ff 	add.w	r1, r3, #4294967295
 800c172:	d03a      	beq.n	800c1ea <_dtoa_r+0xa92>
 800c174:	3201      	adds	r2, #1
 800c176:	e03f      	b.n	800c1f8 <_dtoa_r+0xaa0>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f107 0301 	add.w	r3, r7, #1
 800c17e:	dd05      	ble.n	800c18c <_dtoa_r+0xa34>
 800c180:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c184:	d0ec      	beq.n	800c160 <_dtoa_r+0xa08>
 800c186:	f108 0801 	add.w	r8, r8, #1
 800c18a:	e701      	b.n	800bf90 <_dtoa_r+0x838>
 800c18c:	461f      	mov	r7, r3
 800c18e:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c192:	9b04      	ldr	r3, [sp, #16]
 800c194:	9a06      	ldr	r2, [sp, #24]
 800c196:	1afb      	subs	r3, r7, r3
 800c198:	4293      	cmp	r3, r2
 800c19a:	d0a5      	beq.n	800c0e8 <_dtoa_r+0x990>
 800c19c:	2300      	movs	r3, #0
 800c19e:	220a      	movs	r2, #10
 800c1a0:	9903      	ldr	r1, [sp, #12]
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 faa6 	bl	800c6f4 <__multadd>
 800c1a8:	45b1      	cmp	r9, r6
 800c1aa:	9003      	str	r0, [sp, #12]
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	f04f 020a 	mov.w	r2, #10
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	d104      	bne.n	800c1c4 <_dtoa_r+0xa6c>
 800c1ba:	f000 fa9b 	bl	800c6f4 <__multadd>
 800c1be:	4681      	mov	r9, r0
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	e6ad      	b.n	800bf20 <_dtoa_r+0x7c8>
 800c1c4:	f000 fa96 	bl	800c6f4 <__multadd>
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4681      	mov	r9, r0
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	220a      	movs	r2, #10
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f000 fa8f 	bl	800c6f4 <__multadd>
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	e6a2      	b.n	800bf20 <_dtoa_r+0x7c8>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	220a      	movs	r2, #10
 800c1de:	9903      	ldr	r1, [sp, #12]
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f000 fa87 	bl	800c6f4 <__multadd>
 800c1e6:	9003      	str	r0, [sp, #12]
 800c1e8:	e768      	b.n	800c0bc <_dtoa_r+0x964>
 800c1ea:	9a04      	ldr	r2, [sp, #16]
 800c1ec:	428a      	cmp	r2, r1
 800c1ee:	d105      	bne.n	800c1fc <_dtoa_r+0xaa4>
 800c1f0:	9904      	ldr	r1, [sp, #16]
 800c1f2:	f10b 0b01 	add.w	fp, fp, #1
 800c1f6:	2231      	movs	r2, #49	; 0x31
 800c1f8:	700a      	strb	r2, [r1, #0]
 800c1fa:	e738      	b.n	800c06e <_dtoa_r+0x916>
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	e7b3      	b.n	800c168 <_dtoa_r+0xa10>
 800c200:	4b09      	ldr	r3, [pc, #36]	; (800c228 <_dtoa_r+0xad0>)
 800c202:	f7ff bb0a 	b.w	800b81a <_dtoa_r+0xc2>
 800c206:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f47f aae8 	bne.w	800b7de <_dtoa_r+0x86>
 800c20e:	4b07      	ldr	r3, [pc, #28]	; (800c22c <_dtoa_r+0xad4>)
 800c210:	f7ff bb03 	b.w	800b81a <_dtoa_r+0xc2>
 800c214:	9b06      	ldr	r3, [sp, #24]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f73f af4f 	bgt.w	800c0ba <_dtoa_r+0x962>
 800c21c:	9b07      	ldr	r3, [sp, #28]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	f77f af4b 	ble.w	800c0ba <_dtoa_r+0x962>
 800c224:	e70e      	b.n	800c044 <_dtoa_r+0x8ec>
 800c226:	bf00      	nop
 800c228:	0800e134 	.word	0x0800e134
 800c22c:	0800e158 	.word	0x0800e158

0800c230 <__sflush_r>:
 800c230:	898a      	ldrh	r2, [r1, #12]
 800c232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c236:	4605      	mov	r5, r0
 800c238:	0710      	lsls	r0, r2, #28
 800c23a:	460c      	mov	r4, r1
 800c23c:	d45a      	bmi.n	800c2f4 <__sflush_r+0xc4>
 800c23e:	684b      	ldr	r3, [r1, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	dc05      	bgt.n	800c250 <__sflush_r+0x20>
 800c244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c246:	2b00      	cmp	r3, #0
 800c248:	dc02      	bgt.n	800c250 <__sflush_r+0x20>
 800c24a:	2000      	movs	r0, #0
 800c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c252:	2e00      	cmp	r6, #0
 800c254:	d0f9      	beq.n	800c24a <__sflush_r+0x1a>
 800c256:	2300      	movs	r3, #0
 800c258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c25c:	682f      	ldr	r7, [r5, #0]
 800c25e:	602b      	str	r3, [r5, #0]
 800c260:	d033      	beq.n	800c2ca <__sflush_r+0x9a>
 800c262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	075a      	lsls	r2, r3, #29
 800c268:	d505      	bpl.n	800c276 <__sflush_r+0x46>
 800c26a:	6863      	ldr	r3, [r4, #4]
 800c26c:	1ac0      	subs	r0, r0, r3
 800c26e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c270:	b10b      	cbz	r3, 800c276 <__sflush_r+0x46>
 800c272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c274:	1ac0      	subs	r0, r0, r3
 800c276:	2300      	movs	r3, #0
 800c278:	4602      	mov	r2, r0
 800c27a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c27c:	6a21      	ldr	r1, [r4, #32]
 800c27e:	4628      	mov	r0, r5
 800c280:	47b0      	blx	r6
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	d106      	bne.n	800c296 <__sflush_r+0x66>
 800c288:	6829      	ldr	r1, [r5, #0]
 800c28a:	291d      	cmp	r1, #29
 800c28c:	d84b      	bhi.n	800c326 <__sflush_r+0xf6>
 800c28e:	4a2b      	ldr	r2, [pc, #172]	; (800c33c <__sflush_r+0x10c>)
 800c290:	40ca      	lsrs	r2, r1
 800c292:	07d6      	lsls	r6, r2, #31
 800c294:	d547      	bpl.n	800c326 <__sflush_r+0xf6>
 800c296:	2200      	movs	r2, #0
 800c298:	6062      	str	r2, [r4, #4]
 800c29a:	04d9      	lsls	r1, r3, #19
 800c29c:	6922      	ldr	r2, [r4, #16]
 800c29e:	6022      	str	r2, [r4, #0]
 800c2a0:	d504      	bpl.n	800c2ac <__sflush_r+0x7c>
 800c2a2:	1c42      	adds	r2, r0, #1
 800c2a4:	d101      	bne.n	800c2aa <__sflush_r+0x7a>
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	b903      	cbnz	r3, 800c2ac <__sflush_r+0x7c>
 800c2aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ae:	602f      	str	r7, [r5, #0]
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	d0ca      	beq.n	800c24a <__sflush_r+0x1a>
 800c2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b8:	4299      	cmp	r1, r3
 800c2ba:	d002      	beq.n	800c2c2 <__sflush_r+0x92>
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 fcad 	bl	800cc1c <_free_r>
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ca:	6a21      	ldr	r1, [r4, #32]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	47b0      	blx	r6
 800c2d2:	1c41      	adds	r1, r0, #1
 800c2d4:	d1c6      	bne.n	800c264 <__sflush_r+0x34>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0c3      	beq.n	800c264 <__sflush_r+0x34>
 800c2dc:	2b1d      	cmp	r3, #29
 800c2de:	d001      	beq.n	800c2e4 <__sflush_r+0xb4>
 800c2e0:	2b16      	cmp	r3, #22
 800c2e2:	d101      	bne.n	800c2e8 <__sflush_r+0xb8>
 800c2e4:	602f      	str	r7, [r5, #0]
 800c2e6:	e7b0      	b.n	800c24a <__sflush_r+0x1a>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	690f      	ldr	r7, [r1, #16]
 800c2f6:	2f00      	cmp	r7, #0
 800c2f8:	d0a7      	beq.n	800c24a <__sflush_r+0x1a>
 800c2fa:	0793      	lsls	r3, r2, #30
 800c2fc:	680e      	ldr	r6, [r1, #0]
 800c2fe:	bf08      	it	eq
 800c300:	694b      	ldreq	r3, [r1, #20]
 800c302:	600f      	str	r7, [r1, #0]
 800c304:	bf18      	it	ne
 800c306:	2300      	movne	r3, #0
 800c308:	eba6 0807 	sub.w	r8, r6, r7
 800c30c:	608b      	str	r3, [r1, #8]
 800c30e:	f1b8 0f00 	cmp.w	r8, #0
 800c312:	dd9a      	ble.n	800c24a <__sflush_r+0x1a>
 800c314:	4643      	mov	r3, r8
 800c316:	463a      	mov	r2, r7
 800c318:	6a21      	ldr	r1, [r4, #32]
 800c31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c31c:	4628      	mov	r0, r5
 800c31e:	47b0      	blx	r6
 800c320:	2800      	cmp	r0, #0
 800c322:	dc07      	bgt.n	800c334 <__sflush_r+0x104>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	4407      	add	r7, r0
 800c336:	eba8 0800 	sub.w	r8, r8, r0
 800c33a:	e7e8      	b.n	800c30e <__sflush_r+0xde>
 800c33c:	20400001 	.word	0x20400001

0800c340 <_fflush_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	690b      	ldr	r3, [r1, #16]
 800c344:	4605      	mov	r5, r0
 800c346:	460c      	mov	r4, r1
 800c348:	b1db      	cbz	r3, 800c382 <_fflush_r+0x42>
 800c34a:	b118      	cbz	r0, 800c354 <_fflush_r+0x14>
 800c34c:	6983      	ldr	r3, [r0, #24]
 800c34e:	b90b      	cbnz	r3, 800c354 <_fflush_r+0x14>
 800c350:	f000 f860 	bl	800c414 <__sinit>
 800c354:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <_fflush_r+0x48>)
 800c356:	429c      	cmp	r4, r3
 800c358:	d109      	bne.n	800c36e <_fflush_r+0x2e>
 800c35a:	686c      	ldr	r4, [r5, #4]
 800c35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c360:	b17b      	cbz	r3, 800c382 <_fflush_r+0x42>
 800c362:	4621      	mov	r1, r4
 800c364:	4628      	mov	r0, r5
 800c366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36a:	f7ff bf61 	b.w	800c230 <__sflush_r>
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <_fflush_r+0x4c>)
 800c370:	429c      	cmp	r4, r3
 800c372:	d101      	bne.n	800c378 <_fflush_r+0x38>
 800c374:	68ac      	ldr	r4, [r5, #8]
 800c376:	e7f1      	b.n	800c35c <_fflush_r+0x1c>
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <_fflush_r+0x50>)
 800c37a:	429c      	cmp	r4, r3
 800c37c:	bf08      	it	eq
 800c37e:	68ec      	ldreq	r4, [r5, #12]
 800c380:	e7ec      	b.n	800c35c <_fflush_r+0x1c>
 800c382:	2000      	movs	r0, #0
 800c384:	bd38      	pop	{r3, r4, r5, pc}
 800c386:	bf00      	nop
 800c388:	0800e188 	.word	0x0800e188
 800c38c:	0800e1a8 	.word	0x0800e1a8
 800c390:	0800e168 	.word	0x0800e168

0800c394 <_cleanup_r>:
 800c394:	4901      	ldr	r1, [pc, #4]	; (800c39c <_cleanup_r+0x8>)
 800c396:	f000 b8a9 	b.w	800c4ec <_fwalk_reent>
 800c39a:	bf00      	nop
 800c39c:	0800c341 	.word	0x0800c341

0800c3a0 <std.isra.0>:
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	6003      	str	r3, [r0, #0]
 800c3a8:	6043      	str	r3, [r0, #4]
 800c3aa:	6083      	str	r3, [r0, #8]
 800c3ac:	8181      	strh	r1, [r0, #12]
 800c3ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c3b0:	81c2      	strh	r2, [r0, #14]
 800c3b2:	6103      	str	r3, [r0, #16]
 800c3b4:	6143      	str	r3, [r0, #20]
 800c3b6:	6183      	str	r3, [r0, #24]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	2208      	movs	r2, #8
 800c3bc:	305c      	adds	r0, #92	; 0x5c
 800c3be:	f7fe fab3 	bl	800a928 <memset>
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <std.isra.0+0x38>)
 800c3c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c3c6:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <std.isra.0+0x3c>)
 800c3c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <std.isra.0+0x40>)
 800c3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3ce:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <std.isra.0+0x44>)
 800c3d0:	6224      	str	r4, [r4, #32]
 800c3d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	bf00      	nop
 800c3d8:	0800d035 	.word	0x0800d035
 800c3dc:	0800d057 	.word	0x0800d057
 800c3e0:	0800d08f 	.word	0x0800d08f
 800c3e4:	0800d0b3 	.word	0x0800d0b3

0800c3e8 <__sfmoreglue>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	1e4a      	subs	r2, r1, #1
 800c3ec:	2568      	movs	r5, #104	; 0x68
 800c3ee:	4355      	muls	r5, r2
 800c3f0:	460e      	mov	r6, r1
 800c3f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3f6:	f000 fc5f 	bl	800ccb8 <_malloc_r>
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	b140      	cbz	r0, 800c410 <__sfmoreglue+0x28>
 800c3fe:	2100      	movs	r1, #0
 800c400:	e880 0042 	stmia.w	r0, {r1, r6}
 800c404:	300c      	adds	r0, #12
 800c406:	60a0      	str	r0, [r4, #8]
 800c408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c40c:	f7fe fa8c 	bl	800a928 <memset>
 800c410:	4620      	mov	r0, r4
 800c412:	bd70      	pop	{r4, r5, r6, pc}

0800c414 <__sinit>:
 800c414:	6983      	ldr	r3, [r0, #24]
 800c416:	b510      	push	{r4, lr}
 800c418:	4604      	mov	r4, r0
 800c41a:	bb33      	cbnz	r3, 800c46a <__sinit+0x56>
 800c41c:	6483      	str	r3, [r0, #72]	; 0x48
 800c41e:	64c3      	str	r3, [r0, #76]	; 0x4c
 800c420:	6503      	str	r3, [r0, #80]	; 0x50
 800c422:	4b12      	ldr	r3, [pc, #72]	; (800c46c <__sinit+0x58>)
 800c424:	4a12      	ldr	r2, [pc, #72]	; (800c470 <__sinit+0x5c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6282      	str	r2, [r0, #40]	; 0x28
 800c42a:	4298      	cmp	r0, r3
 800c42c:	bf04      	itt	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	6183      	streq	r3, [r0, #24]
 800c432:	f000 f81f 	bl	800c474 <__sfp>
 800c436:	6060      	str	r0, [r4, #4]
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 f81b 	bl	800c474 <__sfp>
 800c43e:	60a0      	str	r0, [r4, #8]
 800c440:	4620      	mov	r0, r4
 800c442:	f000 f817 	bl	800c474 <__sfp>
 800c446:	2200      	movs	r2, #0
 800c448:	60e0      	str	r0, [r4, #12]
 800c44a:	2104      	movs	r1, #4
 800c44c:	6860      	ldr	r0, [r4, #4]
 800c44e:	f7ff ffa7 	bl	800c3a0 <std.isra.0>
 800c452:	2201      	movs	r2, #1
 800c454:	2109      	movs	r1, #9
 800c456:	68a0      	ldr	r0, [r4, #8]
 800c458:	f7ff ffa2 	bl	800c3a0 <std.isra.0>
 800c45c:	2202      	movs	r2, #2
 800c45e:	2112      	movs	r1, #18
 800c460:	68e0      	ldr	r0, [r4, #12]
 800c462:	f7ff ff9d 	bl	800c3a0 <std.isra.0>
 800c466:	2301      	movs	r3, #1
 800c468:	61a3      	str	r3, [r4, #24]
 800c46a:	bd10      	pop	{r4, pc}
 800c46c:	0800e1c8 	.word	0x0800e1c8
 800c470:	0800c395 	.word	0x0800c395

0800c474 <__sfp>:
 800c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c476:	4b1c      	ldr	r3, [pc, #112]	; (800c4e8 <__sfp+0x74>)
 800c478:	681e      	ldr	r6, [r3, #0]
 800c47a:	69b3      	ldr	r3, [r6, #24]
 800c47c:	4607      	mov	r7, r0
 800c47e:	b913      	cbnz	r3, 800c486 <__sfp+0x12>
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ffc7 	bl	800c414 <__sinit>
 800c486:	3648      	adds	r6, #72	; 0x48
 800c488:	68b4      	ldr	r4, [r6, #8]
 800c48a:	6873      	ldr	r3, [r6, #4]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	d503      	bpl.n	800c498 <__sfp+0x24>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	b133      	cbz	r3, 800c4a2 <__sfp+0x2e>
 800c494:	6836      	ldr	r6, [r6, #0]
 800c496:	e7f7      	b.n	800c488 <__sfp+0x14>
 800c498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c49c:	b16d      	cbz	r5, 800c4ba <__sfp+0x46>
 800c49e:	3468      	adds	r4, #104	; 0x68
 800c4a0:	e7f4      	b.n	800c48c <__sfp+0x18>
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f7ff ff9f 	bl	800c3e8 <__sfmoreglue>
 800c4aa:	6030      	str	r0, [r6, #0]
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1f1      	bne.n	800c494 <__sfp+0x20>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4be:	81e3      	strh	r3, [r4, #14]
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	6665      	str	r5, [r4, #100]	; 0x64
 800c4c6:	6025      	str	r5, [r4, #0]
 800c4c8:	60a5      	str	r5, [r4, #8]
 800c4ca:	6065      	str	r5, [r4, #4]
 800c4cc:	6125      	str	r5, [r4, #16]
 800c4ce:	6165      	str	r5, [r4, #20]
 800c4d0:	61a5      	str	r5, [r4, #24]
 800c4d2:	2208      	movs	r2, #8
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4da:	f7fe fa25 	bl	800a928 <memset>
 800c4de:	6365      	str	r5, [r4, #52]	; 0x34
 800c4e0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c4e2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c4e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c4e6:	e7e6      	b.n	800c4b6 <__sfp+0x42>
 800c4e8:	0800e1c8 	.word	0x0800e1c8

0800c4ec <_fwalk_reent>:
 800c4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	4689      	mov	r9, r1
 800c4f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4f8:	2600      	movs	r6, #0
 800c4fa:	b914      	cbnz	r4, 800c502 <_fwalk_reent+0x16>
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c502:	68a5      	ldr	r5, [r4, #8]
 800c504:	6867      	ldr	r7, [r4, #4]
 800c506:	3f01      	subs	r7, #1
 800c508:	d501      	bpl.n	800c50e <_fwalk_reent+0x22>
 800c50a:	6824      	ldr	r4, [r4, #0]
 800c50c:	e7f5      	b.n	800c4fa <_fwalk_reent+0xe>
 800c50e:	89ab      	ldrh	r3, [r5, #12]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d907      	bls.n	800c524 <_fwalk_reent+0x38>
 800c514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c518:	3301      	adds	r3, #1
 800c51a:	d003      	beq.n	800c524 <_fwalk_reent+0x38>
 800c51c:	4629      	mov	r1, r5
 800c51e:	4640      	mov	r0, r8
 800c520:	47c8      	blx	r9
 800c522:	4306      	orrs	r6, r0
 800c524:	3568      	adds	r5, #104	; 0x68
 800c526:	e7ee      	b.n	800c506 <_fwalk_reent+0x1a>

0800c528 <__locale_ctype_ptr_l>:
 800c528:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c52c:	4770      	bx	lr
	...

0800c530 <_localeconv_r>:
 800c530:	4b04      	ldr	r3, [pc, #16]	; (800c544 <_localeconv_r+0x14>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a18      	ldr	r0, [r3, #32]
 800c536:	4b04      	ldr	r3, [pc, #16]	; (800c548 <_localeconv_r+0x18>)
 800c538:	2800      	cmp	r0, #0
 800c53a:	bf08      	it	eq
 800c53c:	4618      	moveq	r0, r3
 800c53e:	30f0      	adds	r0, #240	; 0xf0
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	2000003c 	.word	0x2000003c
 800c548:	200000a0 	.word	0x200000a0

0800c54c <__swhatbuf_r>:
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	460e      	mov	r6, r1
 800c550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c554:	2900      	cmp	r1, #0
 800c556:	b090      	sub	sp, #64	; 0x40
 800c558:	4614      	mov	r4, r2
 800c55a:	461d      	mov	r5, r3
 800c55c:	da07      	bge.n	800c56e <__swhatbuf_r+0x22>
 800c55e:	2300      	movs	r3, #0
 800c560:	602b      	str	r3, [r5, #0]
 800c562:	89b3      	ldrh	r3, [r6, #12]
 800c564:	061a      	lsls	r2, r3, #24
 800c566:	d410      	bmi.n	800c58a <__swhatbuf_r+0x3e>
 800c568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c56c:	e00e      	b.n	800c58c <__swhatbuf_r+0x40>
 800c56e:	aa01      	add	r2, sp, #4
 800c570:	f000 fdd2 	bl	800d118 <_fstat_r>
 800c574:	2800      	cmp	r0, #0
 800c576:	dbf2      	blt.n	800c55e <__swhatbuf_r+0x12>
 800c578:	9a02      	ldr	r2, [sp, #8]
 800c57a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c57e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c582:	425a      	negs	r2, r3
 800c584:	415a      	adcs	r2, r3
 800c586:	602a      	str	r2, [r5, #0]
 800c588:	e7ee      	b.n	800c568 <__swhatbuf_r+0x1c>
 800c58a:	2340      	movs	r3, #64	; 0x40
 800c58c:	2000      	movs	r0, #0
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	b010      	add	sp, #64	; 0x40
 800c592:	bd70      	pop	{r4, r5, r6, pc}

0800c594 <__smakebuf_r>:
 800c594:	898b      	ldrh	r3, [r1, #12]
 800c596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c598:	079d      	lsls	r5, r3, #30
 800c59a:	4606      	mov	r6, r0
 800c59c:	460c      	mov	r4, r1
 800c59e:	d507      	bpl.n	800c5b0 <__smakebuf_r+0x1c>
 800c5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	6123      	str	r3, [r4, #16]
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	6163      	str	r3, [r4, #20]
 800c5ac:	b002      	add	sp, #8
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	ab01      	add	r3, sp, #4
 800c5b2:	466a      	mov	r2, sp
 800c5b4:	f7ff ffca 	bl	800c54c <__swhatbuf_r>
 800c5b8:	9900      	ldr	r1, [sp, #0]
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f000 fb7b 	bl	800ccb8 <_malloc_r>
 800c5c2:	b948      	cbnz	r0, 800c5d8 <__smakebuf_r+0x44>
 800c5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c8:	059a      	lsls	r2, r3, #22
 800c5ca:	d4ef      	bmi.n	800c5ac <__smakebuf_r+0x18>
 800c5cc:	f023 0303 	bic.w	r3, r3, #3
 800c5d0:	f043 0302 	orr.w	r3, r3, #2
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	e7e3      	b.n	800c5a0 <__smakebuf_r+0xc>
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <__smakebuf_r+0x7c>)
 800c5da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	6020      	str	r0, [r4, #0]
 800c5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	9b00      	ldr	r3, [sp, #0]
 800c5e8:	6163      	str	r3, [r4, #20]
 800c5ea:	9b01      	ldr	r3, [sp, #4]
 800c5ec:	6120      	str	r0, [r4, #16]
 800c5ee:	b15b      	cbz	r3, 800c608 <__smakebuf_r+0x74>
 800c5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f000 fda1 	bl	800d13c <_isatty_r>
 800c5fa:	b128      	cbz	r0, 800c608 <__smakebuf_r+0x74>
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	f023 0303 	bic.w	r3, r3, #3
 800c602:	f043 0301 	orr.w	r3, r3, #1
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	431d      	orrs	r5, r3
 800c60c:	81a5      	strh	r5, [r4, #12]
 800c60e:	e7cd      	b.n	800c5ac <__smakebuf_r+0x18>
 800c610:	0800c395 	.word	0x0800c395

0800c614 <malloc>:
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <malloc+0xc>)
 800c616:	4601      	mov	r1, r0
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	f000 bb4d 	b.w	800ccb8 <_malloc_r>
 800c61e:	bf00      	nop
 800c620:	2000003c 	.word	0x2000003c

0800c624 <__ascii_mbtowc>:
 800c624:	b082      	sub	sp, #8
 800c626:	b901      	cbnz	r1, 800c62a <__ascii_mbtowc+0x6>
 800c628:	a901      	add	r1, sp, #4
 800c62a:	b142      	cbz	r2, 800c63e <__ascii_mbtowc+0x1a>
 800c62c:	b14b      	cbz	r3, 800c642 <__ascii_mbtowc+0x1e>
 800c62e:	7813      	ldrb	r3, [r2, #0]
 800c630:	600b      	str	r3, [r1, #0]
 800c632:	7812      	ldrb	r2, [r2, #0]
 800c634:	1c10      	adds	r0, r2, #0
 800c636:	bf18      	it	ne
 800c638:	2001      	movne	r0, #1
 800c63a:	b002      	add	sp, #8
 800c63c:	4770      	bx	lr
 800c63e:	4610      	mov	r0, r2
 800c640:	e7fb      	b.n	800c63a <__ascii_mbtowc+0x16>
 800c642:	f06f 0001 	mvn.w	r0, #1
 800c646:	e7f8      	b.n	800c63a <__ascii_mbtowc+0x16>

0800c648 <memcpy>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	1e43      	subs	r3, r0, #1
 800c64c:	440a      	add	r2, r1
 800c64e:	4291      	cmp	r1, r2
 800c650:	d100      	bne.n	800c654 <memcpy+0xc>
 800c652:	bd10      	pop	{r4, pc}
 800c654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c65c:	e7f7      	b.n	800c64e <memcpy+0x6>

0800c65e <_Balloc>:
 800c65e:	b570      	push	{r4, r5, r6, lr}
 800c660:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c662:	4604      	mov	r4, r0
 800c664:	460e      	mov	r6, r1
 800c666:	b93d      	cbnz	r5, 800c678 <_Balloc+0x1a>
 800c668:	2010      	movs	r0, #16
 800c66a:	f7ff ffd3 	bl	800c614 <malloc>
 800c66e:	6260      	str	r0, [r4, #36]	; 0x24
 800c670:	6045      	str	r5, [r0, #4]
 800c672:	6085      	str	r5, [r0, #8]
 800c674:	6005      	str	r5, [r0, #0]
 800c676:	60c5      	str	r5, [r0, #12]
 800c678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c67a:	68eb      	ldr	r3, [r5, #12]
 800c67c:	b183      	cbz	r3, 800c6a0 <_Balloc+0x42>
 800c67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c686:	b9b8      	cbnz	r0, 800c6b8 <_Balloc+0x5a>
 800c688:	2101      	movs	r1, #1
 800c68a:	fa01 f506 	lsl.w	r5, r1, r6
 800c68e:	1d6a      	adds	r2, r5, #5
 800c690:	0092      	lsls	r2, r2, #2
 800c692:	4620      	mov	r0, r4
 800c694:	f000 fab4 	bl	800cc00 <_calloc_r>
 800c698:	b160      	cbz	r0, 800c6b4 <_Balloc+0x56>
 800c69a:	6046      	str	r6, [r0, #4]
 800c69c:	6085      	str	r5, [r0, #8]
 800c69e:	e00e      	b.n	800c6be <_Balloc+0x60>
 800c6a0:	2221      	movs	r2, #33	; 0x21
 800c6a2:	2104      	movs	r1, #4
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 faab 	bl	800cc00 <_calloc_r>
 800c6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ac:	60e8      	str	r0, [r5, #12]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e4      	bne.n	800c67e <_Balloc+0x20>
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	6802      	ldr	r2, [r0, #0]
 800c6ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	6103      	str	r3, [r0, #16]
 800c6c2:	60c3      	str	r3, [r0, #12]
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}

0800c6c6 <_Bfree>:
 800c6c6:	b570      	push	{r4, r5, r6, lr}
 800c6c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	b93c      	cbnz	r4, 800c6e0 <_Bfree+0x1a>
 800c6d0:	2010      	movs	r0, #16
 800c6d2:	f7ff ff9f 	bl	800c614 <malloc>
 800c6d6:	6270      	str	r0, [r6, #36]	; 0x24
 800c6d8:	6044      	str	r4, [r0, #4]
 800c6da:	6084      	str	r4, [r0, #8]
 800c6dc:	6004      	str	r4, [r0, #0]
 800c6de:	60c4      	str	r4, [r0, #12]
 800c6e0:	b13d      	cbz	r5, 800c6f2 <_Bfree+0x2c>
 800c6e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c6e4:	686a      	ldr	r2, [r5, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6ec:	6029      	str	r1, [r5, #0]
 800c6ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}

0800c6f4 <__multadd>:
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	690d      	ldr	r5, [r1, #16]
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	f101 0e14 	add.w	lr, r1, #20
 800c704:	2300      	movs	r3, #0
 800c706:	f8de 0000 	ldr.w	r0, [lr]
 800c70a:	b281      	uxth	r1, r0
 800c70c:	fb02 7101 	mla	r1, r2, r1, r7
 800c710:	0c0f      	lsrs	r7, r1, #16
 800c712:	0c00      	lsrs	r0, r0, #16
 800c714:	fb02 7000 	mla	r0, r2, r0, r7
 800c718:	b289      	uxth	r1, r1
 800c71a:	3301      	adds	r3, #1
 800c71c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c720:	429d      	cmp	r5, r3
 800c722:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c726:	f84e 1b04 	str.w	r1, [lr], #4
 800c72a:	dcec      	bgt.n	800c706 <__multadd+0x12>
 800c72c:	b1d7      	cbz	r7, 800c764 <__multadd+0x70>
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	429d      	cmp	r5, r3
 800c732:	db12      	blt.n	800c75a <__multadd+0x66>
 800c734:	6861      	ldr	r1, [r4, #4]
 800c736:	4630      	mov	r0, r6
 800c738:	3101      	adds	r1, #1
 800c73a:	f7ff ff90 	bl	800c65e <_Balloc>
 800c73e:	6922      	ldr	r2, [r4, #16]
 800c740:	3202      	adds	r2, #2
 800c742:	f104 010c 	add.w	r1, r4, #12
 800c746:	4680      	mov	r8, r0
 800c748:	0092      	lsls	r2, r2, #2
 800c74a:	300c      	adds	r0, #12
 800c74c:	f7ff ff7c 	bl	800c648 <memcpy>
 800c750:	4621      	mov	r1, r4
 800c752:	4630      	mov	r0, r6
 800c754:	f7ff ffb7 	bl	800c6c6 <_Bfree>
 800c758:	4644      	mov	r4, r8
 800c75a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c75e:	3501      	adds	r5, #1
 800c760:	615f      	str	r7, [r3, #20]
 800c762:	6125      	str	r5, [r4, #16]
 800c764:	4620      	mov	r0, r4
 800c766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c76a <__hi0bits>:
 800c76a:	0c02      	lsrs	r2, r0, #16
 800c76c:	0412      	lsls	r2, r2, #16
 800c76e:	4603      	mov	r3, r0
 800c770:	b9b2      	cbnz	r2, 800c7a0 <__hi0bits+0x36>
 800c772:	0403      	lsls	r3, r0, #16
 800c774:	2010      	movs	r0, #16
 800c776:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c77a:	bf04      	itt	eq
 800c77c:	021b      	lsleq	r3, r3, #8
 800c77e:	3008      	addeq	r0, #8
 800c780:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c784:	bf04      	itt	eq
 800c786:	011b      	lsleq	r3, r3, #4
 800c788:	3004      	addeq	r0, #4
 800c78a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c78e:	bf04      	itt	eq
 800c790:	009b      	lsleq	r3, r3, #2
 800c792:	3002      	addeq	r0, #2
 800c794:	2b00      	cmp	r3, #0
 800c796:	db06      	blt.n	800c7a6 <__hi0bits+0x3c>
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	d503      	bpl.n	800c7a4 <__hi0bits+0x3a>
 800c79c:	3001      	adds	r0, #1
 800c79e:	4770      	bx	lr
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e7e8      	b.n	800c776 <__hi0bits+0xc>
 800c7a4:	2020      	movs	r0, #32
 800c7a6:	4770      	bx	lr

0800c7a8 <__lo0bits>:
 800c7a8:	6803      	ldr	r3, [r0, #0]
 800c7aa:	f013 0207 	ands.w	r2, r3, #7
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	d00b      	beq.n	800c7ca <__lo0bits+0x22>
 800c7b2:	07da      	lsls	r2, r3, #31
 800c7b4:	d423      	bmi.n	800c7fe <__lo0bits+0x56>
 800c7b6:	0798      	lsls	r0, r3, #30
 800c7b8:	bf49      	itett	mi
 800c7ba:	085b      	lsrmi	r3, r3, #1
 800c7bc:	089b      	lsrpl	r3, r3, #2
 800c7be:	2001      	movmi	r0, #1
 800c7c0:	600b      	strmi	r3, [r1, #0]
 800c7c2:	bf5c      	itt	pl
 800c7c4:	600b      	strpl	r3, [r1, #0]
 800c7c6:	2002      	movpl	r0, #2
 800c7c8:	4770      	bx	lr
 800c7ca:	b298      	uxth	r0, r3
 800c7cc:	b9a8      	cbnz	r0, 800c7fa <__lo0bits+0x52>
 800c7ce:	0c1b      	lsrs	r3, r3, #16
 800c7d0:	2010      	movs	r0, #16
 800c7d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7d6:	bf04      	itt	eq
 800c7d8:	0a1b      	lsreq	r3, r3, #8
 800c7da:	3008      	addeq	r0, #8
 800c7dc:	071a      	lsls	r2, r3, #28
 800c7de:	bf04      	itt	eq
 800c7e0:	091b      	lsreq	r3, r3, #4
 800c7e2:	3004      	addeq	r0, #4
 800c7e4:	079a      	lsls	r2, r3, #30
 800c7e6:	bf04      	itt	eq
 800c7e8:	089b      	lsreq	r3, r3, #2
 800c7ea:	3002      	addeq	r0, #2
 800c7ec:	07da      	lsls	r2, r3, #31
 800c7ee:	d402      	bmi.n	800c7f6 <__lo0bits+0x4e>
 800c7f0:	085b      	lsrs	r3, r3, #1
 800c7f2:	d006      	beq.n	800c802 <__lo0bits+0x5a>
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	600b      	str	r3, [r1, #0]
 800c7f8:	4770      	bx	lr
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	e7e9      	b.n	800c7d2 <__lo0bits+0x2a>
 800c7fe:	2000      	movs	r0, #0
 800c800:	4770      	bx	lr
 800c802:	2020      	movs	r0, #32
 800c804:	4770      	bx	lr

0800c806 <__i2b>:
 800c806:	b510      	push	{r4, lr}
 800c808:	460c      	mov	r4, r1
 800c80a:	2101      	movs	r1, #1
 800c80c:	f7ff ff27 	bl	800c65e <_Balloc>
 800c810:	2201      	movs	r2, #1
 800c812:	6144      	str	r4, [r0, #20]
 800c814:	6102      	str	r2, [r0, #16]
 800c816:	bd10      	pop	{r4, pc}

0800c818 <__multiply>:
 800c818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	4614      	mov	r4, r2
 800c81e:	690a      	ldr	r2, [r1, #16]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	429a      	cmp	r2, r3
 800c824:	bfb8      	it	lt
 800c826:	460b      	movlt	r3, r1
 800c828:	4689      	mov	r9, r1
 800c82a:	bfbc      	itt	lt
 800c82c:	46a1      	movlt	r9, r4
 800c82e:	461c      	movlt	r4, r3
 800c830:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c834:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c838:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c83c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c840:	eb07 060a 	add.w	r6, r7, sl
 800c844:	429e      	cmp	r6, r3
 800c846:	bfc8      	it	gt
 800c848:	3101      	addgt	r1, #1
 800c84a:	f7ff ff08 	bl	800c65e <_Balloc>
 800c84e:	f100 0514 	add.w	r5, r0, #20
 800c852:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c856:	462b      	mov	r3, r5
 800c858:	2200      	movs	r2, #0
 800c85a:	4543      	cmp	r3, r8
 800c85c:	d316      	bcc.n	800c88c <__multiply+0x74>
 800c85e:	f104 0214 	add.w	r2, r4, #20
 800c862:	f109 0114 	add.w	r1, r9, #20
 800c866:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800c86a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	9c01      	ldr	r4, [sp, #4]
 800c872:	4294      	cmp	r4, r2
 800c874:	4613      	mov	r3, r2
 800c876:	d80c      	bhi.n	800c892 <__multiply+0x7a>
 800c878:	2e00      	cmp	r6, #0
 800c87a:	dd03      	ble.n	800c884 <__multiply+0x6c>
 800c87c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c880:	2b00      	cmp	r3, #0
 800c882:	d054      	beq.n	800c92e <__multiply+0x116>
 800c884:	6106      	str	r6, [r0, #16]
 800c886:	b003      	add	sp, #12
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	f843 2b04 	str.w	r2, [r3], #4
 800c890:	e7e3      	b.n	800c85a <__multiply+0x42>
 800c892:	f8b3 a000 	ldrh.w	sl, [r3]
 800c896:	3204      	adds	r2, #4
 800c898:	f1ba 0f00 	cmp.w	sl, #0
 800c89c:	d020      	beq.n	800c8e0 <__multiply+0xc8>
 800c89e:	46ae      	mov	lr, r5
 800c8a0:	4689      	mov	r9, r1
 800c8a2:	f04f 0c00 	mov.w	ip, #0
 800c8a6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8aa:	f8be b000 	ldrh.w	fp, [lr]
 800c8ae:	b2a3      	uxth	r3, r4
 800c8b0:	fb0a b303 	mla	r3, sl, r3, fp
 800c8b4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800c8b8:	f8de 4000 	ldr.w	r4, [lr]
 800c8bc:	4463      	add	r3, ip
 800c8be:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c8c2:	fb0a c40b 	mla	r4, sl, fp, ip
 800c8c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c8d0:	454f      	cmp	r7, r9
 800c8d2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c8d6:	f84e 3b04 	str.w	r3, [lr], #4
 800c8da:	d8e4      	bhi.n	800c8a6 <__multiply+0x8e>
 800c8dc:	f8ce c000 	str.w	ip, [lr]
 800c8e0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800c8e4:	f1b9 0f00 	cmp.w	r9, #0
 800c8e8:	d01f      	beq.n	800c92a <__multiply+0x112>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	46ae      	mov	lr, r5
 800c8ee:	468c      	mov	ip, r1
 800c8f0:	f04f 0a00 	mov.w	sl, #0
 800c8f4:	f8bc 4000 	ldrh.w	r4, [ip]
 800c8f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c8fc:	fb09 b404 	mla	r4, r9, r4, fp
 800c900:	44a2      	add	sl, r4
 800c902:	b29b      	uxth	r3, r3
 800c904:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c908:	f84e 3b04 	str.w	r3, [lr], #4
 800c90c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c910:	f8be 4000 	ldrh.w	r4, [lr]
 800c914:	0c1b      	lsrs	r3, r3, #16
 800c916:	fb09 4303 	mla	r3, r9, r3, r4
 800c91a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800c91e:	4567      	cmp	r7, ip
 800c920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c924:	d8e6      	bhi.n	800c8f4 <__multiply+0xdc>
 800c926:	f8ce 3000 	str.w	r3, [lr]
 800c92a:	3504      	adds	r5, #4
 800c92c:	e7a0      	b.n	800c870 <__multiply+0x58>
 800c92e:	3e01      	subs	r6, #1
 800c930:	e7a2      	b.n	800c878 <__multiply+0x60>
	...

0800c934 <__pow5mult>:
 800c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c938:	4615      	mov	r5, r2
 800c93a:	f012 0203 	ands.w	r2, r2, #3
 800c93e:	4606      	mov	r6, r0
 800c940:	460f      	mov	r7, r1
 800c942:	d007      	beq.n	800c954 <__pow5mult+0x20>
 800c944:	3a01      	subs	r2, #1
 800c946:	4c21      	ldr	r4, [pc, #132]	; (800c9cc <__pow5mult+0x98>)
 800c948:	2300      	movs	r3, #0
 800c94a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c94e:	f7ff fed1 	bl	800c6f4 <__multadd>
 800c952:	4607      	mov	r7, r0
 800c954:	10ad      	asrs	r5, r5, #2
 800c956:	d035      	beq.n	800c9c4 <__pow5mult+0x90>
 800c958:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c95a:	b93c      	cbnz	r4, 800c96c <__pow5mult+0x38>
 800c95c:	2010      	movs	r0, #16
 800c95e:	f7ff fe59 	bl	800c614 <malloc>
 800c962:	6270      	str	r0, [r6, #36]	; 0x24
 800c964:	6044      	str	r4, [r0, #4]
 800c966:	6084      	str	r4, [r0, #8]
 800c968:	6004      	str	r4, [r0, #0]
 800c96a:	60c4      	str	r4, [r0, #12]
 800c96c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c974:	b94c      	cbnz	r4, 800c98a <__pow5mult+0x56>
 800c976:	f240 2171 	movw	r1, #625	; 0x271
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ff43 	bl	800c806 <__i2b>
 800c980:	2300      	movs	r3, #0
 800c982:	f8c8 0008 	str.w	r0, [r8, #8]
 800c986:	4604      	mov	r4, r0
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	f04f 0800 	mov.w	r8, #0
 800c98e:	07eb      	lsls	r3, r5, #31
 800c990:	d50a      	bpl.n	800c9a8 <__pow5mult+0x74>
 800c992:	4639      	mov	r1, r7
 800c994:	4622      	mov	r2, r4
 800c996:	4630      	mov	r0, r6
 800c998:	f7ff ff3e 	bl	800c818 <__multiply>
 800c99c:	4639      	mov	r1, r7
 800c99e:	4681      	mov	r9, r0
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7ff fe90 	bl	800c6c6 <_Bfree>
 800c9a6:	464f      	mov	r7, r9
 800c9a8:	106d      	asrs	r5, r5, #1
 800c9aa:	d00b      	beq.n	800c9c4 <__pow5mult+0x90>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	b938      	cbnz	r0, 800c9c0 <__pow5mult+0x8c>
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7ff ff2f 	bl	800c818 <__multiply>
 800c9ba:	6020      	str	r0, [r4, #0]
 800c9bc:	f8c0 8000 	str.w	r8, [r0]
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	e7e4      	b.n	800c98e <__pow5mult+0x5a>
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ca:	bf00      	nop
 800c9cc:	0800e2c8 	.word	0x0800e2c8

0800c9d0 <__lshift>:
 800c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9da:	6923      	ldr	r3, [r4, #16]
 800c9dc:	6849      	ldr	r1, [r1, #4]
 800c9de:	eb0a 0903 	add.w	r9, sl, r3
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	4616      	mov	r6, r2
 800c9e8:	f109 0501 	add.w	r5, r9, #1
 800c9ec:	42ab      	cmp	r3, r5
 800c9ee:	db31      	blt.n	800ca54 <__lshift+0x84>
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff fe34 	bl	800c65e <_Balloc>
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	4680      	mov	r8, r0
 800c9fa:	f100 0314 	add.w	r3, r0, #20
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4552      	cmp	r2, sl
 800ca02:	db2a      	blt.n	800ca5a <__lshift+0x8a>
 800ca04:	6920      	ldr	r0, [r4, #16]
 800ca06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca0a:	f104 0114 	add.w	r1, r4, #20
 800ca0e:	f016 021f 	ands.w	r2, r6, #31
 800ca12:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ca16:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800ca1a:	d022      	beq.n	800ca62 <__lshift+0x92>
 800ca1c:	f1c2 0c20 	rsb	ip, r2, #32
 800ca20:	2000      	movs	r0, #0
 800ca22:	680e      	ldr	r6, [r1, #0]
 800ca24:	4096      	lsls	r6, r2
 800ca26:	4330      	orrs	r0, r6
 800ca28:	f843 0b04 	str.w	r0, [r3], #4
 800ca2c:	f851 0b04 	ldr.w	r0, [r1], #4
 800ca30:	458e      	cmp	lr, r1
 800ca32:	fa20 f00c 	lsr.w	r0, r0, ip
 800ca36:	d8f4      	bhi.n	800ca22 <__lshift+0x52>
 800ca38:	6018      	str	r0, [r3, #0]
 800ca3a:	b108      	cbz	r0, 800ca40 <__lshift+0x70>
 800ca3c:	f109 0502 	add.w	r5, r9, #2
 800ca40:	3d01      	subs	r5, #1
 800ca42:	4638      	mov	r0, r7
 800ca44:	f8c8 5010 	str.w	r5, [r8, #16]
 800ca48:	4621      	mov	r1, r4
 800ca4a:	f7ff fe3c 	bl	800c6c6 <_Bfree>
 800ca4e:	4640      	mov	r0, r8
 800ca50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca54:	3101      	adds	r1, #1
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	e7c8      	b.n	800c9ec <__lshift+0x1c>
 800ca5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca5e:	3201      	adds	r2, #1
 800ca60:	e7ce      	b.n	800ca00 <__lshift+0x30>
 800ca62:	3b04      	subs	r3, #4
 800ca64:	f851 2b04 	ldr.w	r2, [r1], #4
 800ca68:	f843 2f04 	str.w	r2, [r3, #4]!
 800ca6c:	458e      	cmp	lr, r1
 800ca6e:	d8f9      	bhi.n	800ca64 <__lshift+0x94>
 800ca70:	e7e6      	b.n	800ca40 <__lshift+0x70>

0800ca72 <__mcmp>:
 800ca72:	6903      	ldr	r3, [r0, #16]
 800ca74:	690a      	ldr	r2, [r1, #16]
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	b530      	push	{r4, r5, lr}
 800ca7a:	d10c      	bne.n	800ca96 <__mcmp+0x24>
 800ca7c:	0092      	lsls	r2, r2, #2
 800ca7e:	3014      	adds	r0, #20
 800ca80:	3114      	adds	r1, #20
 800ca82:	1884      	adds	r4, r0, r2
 800ca84:	4411      	add	r1, r2
 800ca86:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca8a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca8e:	4295      	cmp	r5, r2
 800ca90:	d003      	beq.n	800ca9a <__mcmp+0x28>
 800ca92:	d305      	bcc.n	800caa0 <__mcmp+0x2e>
 800ca94:	2301      	movs	r3, #1
 800ca96:	4618      	mov	r0, r3
 800ca98:	bd30      	pop	{r4, r5, pc}
 800ca9a:	42a0      	cmp	r0, r4
 800ca9c:	d3f3      	bcc.n	800ca86 <__mcmp+0x14>
 800ca9e:	e7fa      	b.n	800ca96 <__mcmp+0x24>
 800caa0:	f04f 33ff 	mov.w	r3, #4294967295
 800caa4:	e7f7      	b.n	800ca96 <__mcmp+0x24>

0800caa6 <__mdiff>:
 800caa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caaa:	460d      	mov	r5, r1
 800caac:	4607      	mov	r7, r0
 800caae:	4611      	mov	r1, r2
 800cab0:	4628      	mov	r0, r5
 800cab2:	4614      	mov	r4, r2
 800cab4:	f7ff ffdd 	bl	800ca72 <__mcmp>
 800cab8:	1e06      	subs	r6, r0, #0
 800caba:	d108      	bne.n	800cace <__mdiff+0x28>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4638      	mov	r0, r7
 800cac0:	f7ff fdcd 	bl	800c65e <_Balloc>
 800cac4:	2301      	movs	r3, #1
 800cac6:	6103      	str	r3, [r0, #16]
 800cac8:	6146      	str	r6, [r0, #20]
 800caca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cace:	bfa4      	itt	ge
 800cad0:	4623      	movge	r3, r4
 800cad2:	462c      	movge	r4, r5
 800cad4:	4638      	mov	r0, r7
 800cad6:	6861      	ldr	r1, [r4, #4]
 800cad8:	bfa6      	itte	ge
 800cada:	461d      	movge	r5, r3
 800cadc:	2600      	movge	r6, #0
 800cade:	2601      	movlt	r6, #1
 800cae0:	f7ff fdbd 	bl	800c65e <_Balloc>
 800cae4:	692b      	ldr	r3, [r5, #16]
 800cae6:	60c6      	str	r6, [r0, #12]
 800cae8:	6926      	ldr	r6, [r4, #16]
 800caea:	f105 0914 	add.w	r9, r5, #20
 800caee:	f104 0214 	add.w	r2, r4, #20
 800caf2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800caf6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cafa:	f100 0514 	add.w	r5, r0, #20
 800cafe:	f04f 0c00 	mov.w	ip, #0
 800cb02:	f852 ab04 	ldr.w	sl, [r2], #4
 800cb06:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb0a:	fa1c f18a 	uxtah	r1, ip, sl
 800cb0e:	b2a3      	uxth	r3, r4
 800cb10:	1ac9      	subs	r1, r1, r3
 800cb12:	0c23      	lsrs	r3, r4, #16
 800cb14:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cb18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cb1c:	b289      	uxth	r1, r1
 800cb1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cb22:	45c8      	cmp	r8, r9
 800cb24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb28:	4696      	mov	lr, r2
 800cb2a:	f845 3b04 	str.w	r3, [r5], #4
 800cb2e:	d8e8      	bhi.n	800cb02 <__mdiff+0x5c>
 800cb30:	45be      	cmp	lr, r7
 800cb32:	d305      	bcc.n	800cb40 <__mdiff+0x9a>
 800cb34:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cb38:	b18b      	cbz	r3, 800cb5e <__mdiff+0xb8>
 800cb3a:	6106      	str	r6, [r0, #16]
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb40:	f85e 1b04 	ldr.w	r1, [lr], #4
 800cb44:	fa1c f381 	uxtah	r3, ip, r1
 800cb48:	141a      	asrs	r2, r3, #16
 800cb4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb58:	f845 3b04 	str.w	r3, [r5], #4
 800cb5c:	e7e8      	b.n	800cb30 <__mdiff+0x8a>
 800cb5e:	3e01      	subs	r6, #1
 800cb60:	e7e8      	b.n	800cb34 <__mdiff+0x8e>

0800cb62 <__d2b>:
 800cb62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb66:	460e      	mov	r6, r1
 800cb68:	2101      	movs	r1, #1
 800cb6a:	ec59 8b10 	vmov	r8, r9, d0
 800cb6e:	4615      	mov	r5, r2
 800cb70:	f7ff fd75 	bl	800c65e <_Balloc>
 800cb74:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cb78:	4607      	mov	r7, r0
 800cb7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb7e:	bb34      	cbnz	r4, 800cbce <__d2b+0x6c>
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	f1b8 0f00 	cmp.w	r8, #0
 800cb86:	d027      	beq.n	800cbd8 <__d2b+0x76>
 800cb88:	a802      	add	r0, sp, #8
 800cb8a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800cb8e:	f7ff fe0b 	bl	800c7a8 <__lo0bits>
 800cb92:	9900      	ldr	r1, [sp, #0]
 800cb94:	b1f0      	cbz	r0, 800cbd4 <__d2b+0x72>
 800cb96:	9a01      	ldr	r2, [sp, #4]
 800cb98:	f1c0 0320 	rsb	r3, r0, #32
 800cb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cba0:	430b      	orrs	r3, r1
 800cba2:	40c2      	lsrs	r2, r0
 800cba4:	617b      	str	r3, [r7, #20]
 800cba6:	9201      	str	r2, [sp, #4]
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	61bb      	str	r3, [r7, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	bf14      	ite	ne
 800cbb0:	2102      	movne	r1, #2
 800cbb2:	2101      	moveq	r1, #1
 800cbb4:	6139      	str	r1, [r7, #16]
 800cbb6:	b1c4      	cbz	r4, 800cbea <__d2b+0x88>
 800cbb8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cbbc:	4404      	add	r4, r0
 800cbbe:	6034      	str	r4, [r6, #0]
 800cbc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbc4:	6028      	str	r0, [r5, #0]
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	b003      	add	sp, #12
 800cbca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbd2:	e7d5      	b.n	800cb80 <__d2b+0x1e>
 800cbd4:	6179      	str	r1, [r7, #20]
 800cbd6:	e7e7      	b.n	800cba8 <__d2b+0x46>
 800cbd8:	a801      	add	r0, sp, #4
 800cbda:	f7ff fde5 	bl	800c7a8 <__lo0bits>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	6139      	str	r1, [r7, #16]
 800cbe6:	3020      	adds	r0, #32
 800cbe8:	e7e5      	b.n	800cbb6 <__d2b+0x54>
 800cbea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cbee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbf2:	6030      	str	r0, [r6, #0]
 800cbf4:	6918      	ldr	r0, [r3, #16]
 800cbf6:	f7ff fdb8 	bl	800c76a <__hi0bits>
 800cbfa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cbfe:	e7e1      	b.n	800cbc4 <__d2b+0x62>

0800cc00 <_calloc_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	fb02 f401 	mul.w	r4, r2, r1
 800cc06:	4621      	mov	r1, r4
 800cc08:	f000 f856 	bl	800ccb8 <_malloc_r>
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	b118      	cbz	r0, 800cc18 <_calloc_r+0x18>
 800cc10:	4622      	mov	r2, r4
 800cc12:	2100      	movs	r1, #0
 800cc14:	f7fd fe88 	bl	800a928 <memset>
 800cc18:	4628      	mov	r0, r5
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}

0800cc1c <_free_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4605      	mov	r5, r0
 800cc20:	2900      	cmp	r1, #0
 800cc22:	d045      	beq.n	800ccb0 <_free_r+0x94>
 800cc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc28:	1f0c      	subs	r4, r1, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bfb8      	it	lt
 800cc2e:	18e4      	addlt	r4, r4, r3
 800cc30:	f000 fac0 	bl	800d1b4 <__malloc_lock>
 800cc34:	4a1f      	ldr	r2, [pc, #124]	; (800ccb4 <_free_r+0x98>)
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	4610      	mov	r0, r2
 800cc3a:	b933      	cbnz	r3, 800cc4a <_free_r+0x2e>
 800cc3c:	6063      	str	r3, [r4, #4]
 800cc3e:	6014      	str	r4, [r2, #0]
 800cc40:	4628      	mov	r0, r5
 800cc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc46:	f000 bab6 	b.w	800d1b6 <__malloc_unlock>
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	d90c      	bls.n	800cc68 <_free_r+0x4c>
 800cc4e:	6821      	ldr	r1, [r4, #0]
 800cc50:	1862      	adds	r2, r4, r1
 800cc52:	4293      	cmp	r3, r2
 800cc54:	bf04      	itt	eq
 800cc56:	681a      	ldreq	r2, [r3, #0]
 800cc58:	685b      	ldreq	r3, [r3, #4]
 800cc5a:	6063      	str	r3, [r4, #4]
 800cc5c:	bf04      	itt	eq
 800cc5e:	1852      	addeq	r2, r2, r1
 800cc60:	6022      	streq	r2, [r4, #0]
 800cc62:	6004      	str	r4, [r0, #0]
 800cc64:	e7ec      	b.n	800cc40 <_free_r+0x24>
 800cc66:	4613      	mov	r3, r2
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	b10a      	cbz	r2, 800cc70 <_free_r+0x54>
 800cc6c:	42a2      	cmp	r2, r4
 800cc6e:	d9fa      	bls.n	800cc66 <_free_r+0x4a>
 800cc70:	6819      	ldr	r1, [r3, #0]
 800cc72:	1858      	adds	r0, r3, r1
 800cc74:	42a0      	cmp	r0, r4
 800cc76:	d10b      	bne.n	800cc90 <_free_r+0x74>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	4401      	add	r1, r0
 800cc7c:	1858      	adds	r0, r3, r1
 800cc7e:	4282      	cmp	r2, r0
 800cc80:	6019      	str	r1, [r3, #0]
 800cc82:	d1dd      	bne.n	800cc40 <_free_r+0x24>
 800cc84:	6810      	ldr	r0, [r2, #0]
 800cc86:	6852      	ldr	r2, [r2, #4]
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	4401      	add	r1, r0
 800cc8c:	6019      	str	r1, [r3, #0]
 800cc8e:	e7d7      	b.n	800cc40 <_free_r+0x24>
 800cc90:	d902      	bls.n	800cc98 <_free_r+0x7c>
 800cc92:	230c      	movs	r3, #12
 800cc94:	602b      	str	r3, [r5, #0]
 800cc96:	e7d3      	b.n	800cc40 <_free_r+0x24>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	1821      	adds	r1, r4, r0
 800cc9c:	428a      	cmp	r2, r1
 800cc9e:	bf04      	itt	eq
 800cca0:	6811      	ldreq	r1, [r2, #0]
 800cca2:	6852      	ldreq	r2, [r2, #4]
 800cca4:	6062      	str	r2, [r4, #4]
 800cca6:	bf04      	itt	eq
 800cca8:	1809      	addeq	r1, r1, r0
 800ccaa:	6021      	streq	r1, [r4, #0]
 800ccac:	605c      	str	r4, [r3, #4]
 800ccae:	e7c7      	b.n	800cc40 <_free_r+0x24>
 800ccb0:	bd38      	pop	{r3, r4, r5, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000023c 	.word	0x2000023c

0800ccb8 <_malloc_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	1ccd      	adds	r5, r1, #3
 800ccbc:	f025 0503 	bic.w	r5, r5, #3
 800ccc0:	3508      	adds	r5, #8
 800ccc2:	2d0c      	cmp	r5, #12
 800ccc4:	bf38      	it	cc
 800ccc6:	250c      	movcc	r5, #12
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	4606      	mov	r6, r0
 800cccc:	db01      	blt.n	800ccd2 <_malloc_r+0x1a>
 800ccce:	42a9      	cmp	r1, r5
 800ccd0:	d903      	bls.n	800ccda <_malloc_r+0x22>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
 800ccda:	f000 fa6b 	bl	800d1b4 <__malloc_lock>
 800ccde:	4a23      	ldr	r2, [pc, #140]	; (800cd6c <_malloc_r+0xb4>)
 800cce0:	6814      	ldr	r4, [r2, #0]
 800cce2:	4621      	mov	r1, r4
 800cce4:	b991      	cbnz	r1, 800cd0c <_malloc_r+0x54>
 800cce6:	4c22      	ldr	r4, [pc, #136]	; (800cd70 <_malloc_r+0xb8>)
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	b91b      	cbnz	r3, 800ccf4 <_malloc_r+0x3c>
 800ccec:	4630      	mov	r0, r6
 800ccee:	f000 f991 	bl	800d014 <_sbrk_r>
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f000 f98c 	bl	800d014 <_sbrk_r>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d126      	bne.n	800cd4e <_malloc_r+0x96>
 800cd00:	230c      	movs	r3, #12
 800cd02:	6033      	str	r3, [r6, #0]
 800cd04:	4630      	mov	r0, r6
 800cd06:	f000 fa56 	bl	800d1b6 <__malloc_unlock>
 800cd0a:	e7e4      	b.n	800ccd6 <_malloc_r+0x1e>
 800cd0c:	680b      	ldr	r3, [r1, #0]
 800cd0e:	1b5b      	subs	r3, r3, r5
 800cd10:	d41a      	bmi.n	800cd48 <_malloc_r+0x90>
 800cd12:	2b0b      	cmp	r3, #11
 800cd14:	d90f      	bls.n	800cd36 <_malloc_r+0x7e>
 800cd16:	600b      	str	r3, [r1, #0]
 800cd18:	50cd      	str	r5, [r1, r3]
 800cd1a:	18cc      	adds	r4, r1, r3
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 fa4a 	bl	800d1b6 <__malloc_unlock>
 800cd22:	f104 000b 	add.w	r0, r4, #11
 800cd26:	1d23      	adds	r3, r4, #4
 800cd28:	f020 0007 	bic.w	r0, r0, #7
 800cd2c:	1ac3      	subs	r3, r0, r3
 800cd2e:	d01b      	beq.n	800cd68 <_malloc_r+0xb0>
 800cd30:	425a      	negs	r2, r3
 800cd32:	50e2      	str	r2, [r4, r3]
 800cd34:	bd70      	pop	{r4, r5, r6, pc}
 800cd36:	428c      	cmp	r4, r1
 800cd38:	bf0d      	iteet	eq
 800cd3a:	6863      	ldreq	r3, [r4, #4]
 800cd3c:	684b      	ldrne	r3, [r1, #4]
 800cd3e:	6063      	strne	r3, [r4, #4]
 800cd40:	6013      	streq	r3, [r2, #0]
 800cd42:	bf18      	it	ne
 800cd44:	460c      	movne	r4, r1
 800cd46:	e7e9      	b.n	800cd1c <_malloc_r+0x64>
 800cd48:	460c      	mov	r4, r1
 800cd4a:	6849      	ldr	r1, [r1, #4]
 800cd4c:	e7ca      	b.n	800cce4 <_malloc_r+0x2c>
 800cd4e:	1cc4      	adds	r4, r0, #3
 800cd50:	f024 0403 	bic.w	r4, r4, #3
 800cd54:	42a0      	cmp	r0, r4
 800cd56:	d005      	beq.n	800cd64 <_malloc_r+0xac>
 800cd58:	1a21      	subs	r1, r4, r0
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f000 f95a 	bl	800d014 <_sbrk_r>
 800cd60:	3001      	adds	r0, #1
 800cd62:	d0cd      	beq.n	800cd00 <_malloc_r+0x48>
 800cd64:	6025      	str	r5, [r4, #0]
 800cd66:	e7d9      	b.n	800cd1c <_malloc_r+0x64>
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2000023c 	.word	0x2000023c
 800cd70:	20000240 	.word	0x20000240

0800cd74 <__ssputs_r>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	688e      	ldr	r6, [r1, #8]
 800cd7a:	429e      	cmp	r6, r3
 800cd7c:	4682      	mov	sl, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	4691      	mov	r9, r2
 800cd82:	4698      	mov	r8, r3
 800cd84:	d835      	bhi.n	800cdf2 <__ssputs_r+0x7e>
 800cd86:	898a      	ldrh	r2, [r1, #12]
 800cd88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd8c:	d031      	beq.n	800cdf2 <__ssputs_r+0x7e>
 800cd8e:	6825      	ldr	r5, [r4, #0]
 800cd90:	6909      	ldr	r1, [r1, #16]
 800cd92:	1a6f      	subs	r7, r5, r1
 800cd94:	6965      	ldr	r5, [r4, #20]
 800cd96:	2302      	movs	r3, #2
 800cd98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd9c:	fb95 f5f3 	sdiv	r5, r5, r3
 800cda0:	f108 0301 	add.w	r3, r8, #1
 800cda4:	443b      	add	r3, r7
 800cda6:	429d      	cmp	r5, r3
 800cda8:	bf38      	it	cc
 800cdaa:	461d      	movcc	r5, r3
 800cdac:	0553      	lsls	r3, r2, #21
 800cdae:	d531      	bpl.n	800ce14 <__ssputs_r+0xa0>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	f7ff ff81 	bl	800ccb8 <_malloc_r>
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	b950      	cbnz	r0, 800cdd0 <__ssputs_r+0x5c>
 800cdba:	230c      	movs	r3, #12
 800cdbc:	f8ca 3000 	str.w	r3, [sl]
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd0:	463a      	mov	r2, r7
 800cdd2:	6921      	ldr	r1, [r4, #16]
 800cdd4:	f7ff fc38 	bl	800c648 <memcpy>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	6126      	str	r6, [r4, #16]
 800cde6:	6165      	str	r5, [r4, #20]
 800cde8:	443e      	add	r6, r7
 800cdea:	1bed      	subs	r5, r5, r7
 800cdec:	6026      	str	r6, [r4, #0]
 800cdee:	60a5      	str	r5, [r4, #8]
 800cdf0:	4646      	mov	r6, r8
 800cdf2:	4546      	cmp	r6, r8
 800cdf4:	bf28      	it	cs
 800cdf6:	4646      	movcs	r6, r8
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	6820      	ldr	r0, [r4, #0]
 800cdfe:	f000 f9bf 	bl	800d180 <memmove>
 800ce02:	68a3      	ldr	r3, [r4, #8]
 800ce04:	1b9b      	subs	r3, r3, r6
 800ce06:	60a3      	str	r3, [r4, #8]
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	441e      	add	r6, r3
 800ce0c:	6026      	str	r6, [r4, #0]
 800ce0e:	2000      	movs	r0, #0
 800ce10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce14:	462a      	mov	r2, r5
 800ce16:	f000 f9cf 	bl	800d1b8 <_realloc_r>
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d1e1      	bne.n	800cde4 <__ssputs_r+0x70>
 800ce20:	6921      	ldr	r1, [r4, #16]
 800ce22:	4650      	mov	r0, sl
 800ce24:	f7ff fefa 	bl	800cc1c <_free_r>
 800ce28:	e7c7      	b.n	800cdba <__ssputs_r+0x46>
	...

0800ce2c <_svfiprintf_r>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	b09d      	sub	sp, #116	; 0x74
 800ce32:	4680      	mov	r8, r0
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	898b      	ldrh	r3, [r1, #12]
 800ce38:	061c      	lsls	r4, r3, #24
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	4616      	mov	r6, r2
 800ce3e:	d50f      	bpl.n	800ce60 <_svfiprintf_r+0x34>
 800ce40:	690b      	ldr	r3, [r1, #16]
 800ce42:	b96b      	cbnz	r3, 800ce60 <_svfiprintf_r+0x34>
 800ce44:	2140      	movs	r1, #64	; 0x40
 800ce46:	f7ff ff37 	bl	800ccb8 <_malloc_r>
 800ce4a:	6028      	str	r0, [r5, #0]
 800ce4c:	6128      	str	r0, [r5, #16]
 800ce4e:	b928      	cbnz	r0, 800ce5c <_svfiprintf_r+0x30>
 800ce50:	230c      	movs	r3, #12
 800ce52:	f8c8 3000 	str.w	r3, [r8]
 800ce56:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5a:	e0c5      	b.n	800cfe8 <_svfiprintf_r+0x1bc>
 800ce5c:	2340      	movs	r3, #64	; 0x40
 800ce5e:	616b      	str	r3, [r5, #20]
 800ce60:	2300      	movs	r3, #0
 800ce62:	9309      	str	r3, [sp, #36]	; 0x24
 800ce64:	2320      	movs	r3, #32
 800ce66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce6a:	2330      	movs	r3, #48	; 0x30
 800ce6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce70:	f04f 0b01 	mov.w	fp, #1
 800ce74:	4637      	mov	r7, r6
 800ce76:	463c      	mov	r4, r7
 800ce78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d13c      	bne.n	800cefa <_svfiprintf_r+0xce>
 800ce80:	ebb7 0a06 	subs.w	sl, r7, r6
 800ce84:	d00b      	beq.n	800ce9e <_svfiprintf_r+0x72>
 800ce86:	4653      	mov	r3, sl
 800ce88:	4632      	mov	r2, r6
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	f7ff ff71 	bl	800cd74 <__ssputs_r>
 800ce92:	3001      	adds	r0, #1
 800ce94:	f000 80a3 	beq.w	800cfde <_svfiprintf_r+0x1b2>
 800ce98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9a:	4453      	add	r3, sl
 800ce9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9e:	783b      	ldrb	r3, [r7, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 809c 	beq.w	800cfde <_svfiprintf_r+0x1b2>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceac:	9304      	str	r3, [sp, #16]
 800ceae:	9307      	str	r3, [sp, #28]
 800ceb0:	9205      	str	r2, [sp, #20]
 800ceb2:	9306      	str	r3, [sp, #24]
 800ceb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceb8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceba:	2205      	movs	r2, #5
 800cebc:	7821      	ldrb	r1, [r4, #0]
 800cebe:	4850      	ldr	r0, [pc, #320]	; (800d000 <_svfiprintf_r+0x1d4>)
 800cec0:	f7f3 fa16 	bl	80002f0 <memchr>
 800cec4:	1c67      	adds	r7, r4, #1
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	b9d8      	cbnz	r0, 800cf02 <_svfiprintf_r+0xd6>
 800ceca:	06d9      	lsls	r1, r3, #27
 800cecc:	bf44      	itt	mi
 800cece:	2220      	movmi	r2, #32
 800ced0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ced4:	071a      	lsls	r2, r3, #28
 800ced6:	bf44      	itt	mi
 800ced8:	222b      	movmi	r2, #43	; 0x2b
 800ceda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cede:	7822      	ldrb	r2, [r4, #0]
 800cee0:	2a2a      	cmp	r2, #42	; 0x2a
 800cee2:	d016      	beq.n	800cf12 <_svfiprintf_r+0xe6>
 800cee4:	9a07      	ldr	r2, [sp, #28]
 800cee6:	2100      	movs	r1, #0
 800cee8:	200a      	movs	r0, #10
 800ceea:	4627      	mov	r7, r4
 800ceec:	3401      	adds	r4, #1
 800ceee:	783b      	ldrb	r3, [r7, #0]
 800cef0:	3b30      	subs	r3, #48	; 0x30
 800cef2:	2b09      	cmp	r3, #9
 800cef4:	d951      	bls.n	800cf9a <_svfiprintf_r+0x16e>
 800cef6:	b1c9      	cbz	r1, 800cf2c <_svfiprintf_r+0x100>
 800cef8:	e011      	b.n	800cf1e <_svfiprintf_r+0xf2>
 800cefa:	2b25      	cmp	r3, #37	; 0x25
 800cefc:	d0c0      	beq.n	800ce80 <_svfiprintf_r+0x54>
 800cefe:	4627      	mov	r7, r4
 800cf00:	e7b9      	b.n	800ce76 <_svfiprintf_r+0x4a>
 800cf02:	4a3f      	ldr	r2, [pc, #252]	; (800d000 <_svfiprintf_r+0x1d4>)
 800cf04:	1a80      	subs	r0, r0, r2
 800cf06:	fa0b f000 	lsl.w	r0, fp, r0
 800cf0a:	4318      	orrs	r0, r3
 800cf0c:	9004      	str	r0, [sp, #16]
 800cf0e:	463c      	mov	r4, r7
 800cf10:	e7d3      	b.n	800ceba <_svfiprintf_r+0x8e>
 800cf12:	9a03      	ldr	r2, [sp, #12]
 800cf14:	1d11      	adds	r1, r2, #4
 800cf16:	6812      	ldr	r2, [r2, #0]
 800cf18:	9103      	str	r1, [sp, #12]
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	db01      	blt.n	800cf22 <_svfiprintf_r+0xf6>
 800cf1e:	9207      	str	r2, [sp, #28]
 800cf20:	e004      	b.n	800cf2c <_svfiprintf_r+0x100>
 800cf22:	4252      	negs	r2, r2
 800cf24:	f043 0302 	orr.w	r3, r3, #2
 800cf28:	9207      	str	r2, [sp, #28]
 800cf2a:	9304      	str	r3, [sp, #16]
 800cf2c:	783b      	ldrb	r3, [r7, #0]
 800cf2e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf30:	d10e      	bne.n	800cf50 <_svfiprintf_r+0x124>
 800cf32:	787b      	ldrb	r3, [r7, #1]
 800cf34:	2b2a      	cmp	r3, #42	; 0x2a
 800cf36:	f107 0101 	add.w	r1, r7, #1
 800cf3a:	d132      	bne.n	800cfa2 <_svfiprintf_r+0x176>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	1d1a      	adds	r2, r3, #4
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	9203      	str	r2, [sp, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfb8      	it	lt
 800cf48:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf4c:	3702      	adds	r7, #2
 800cf4e:	9305      	str	r3, [sp, #20]
 800cf50:	4c2c      	ldr	r4, [pc, #176]	; (800d004 <_svfiprintf_r+0x1d8>)
 800cf52:	7839      	ldrb	r1, [r7, #0]
 800cf54:	2203      	movs	r2, #3
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7f3 f9ca 	bl	80002f0 <memchr>
 800cf5c:	b138      	cbz	r0, 800cf6e <_svfiprintf_r+0x142>
 800cf5e:	2340      	movs	r3, #64	; 0x40
 800cf60:	1b00      	subs	r0, r0, r4
 800cf62:	fa03 f000 	lsl.w	r0, r3, r0
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	4303      	orrs	r3, r0
 800cf6a:	9304      	str	r3, [sp, #16]
 800cf6c:	3701      	adds	r7, #1
 800cf6e:	7839      	ldrb	r1, [r7, #0]
 800cf70:	4825      	ldr	r0, [pc, #148]	; (800d008 <_svfiprintf_r+0x1dc>)
 800cf72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf76:	2206      	movs	r2, #6
 800cf78:	1c7e      	adds	r6, r7, #1
 800cf7a:	f7f3 f9b9 	bl	80002f0 <memchr>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d035      	beq.n	800cfee <_svfiprintf_r+0x1c2>
 800cf82:	4b22      	ldr	r3, [pc, #136]	; (800d00c <_svfiprintf_r+0x1e0>)
 800cf84:	b9fb      	cbnz	r3, 800cfc6 <_svfiprintf_r+0x19a>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	3307      	adds	r3, #7
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	3308      	adds	r3, #8
 800cf90:	9303      	str	r3, [sp, #12]
 800cf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf94:	444b      	add	r3, r9
 800cf96:	9309      	str	r3, [sp, #36]	; 0x24
 800cf98:	e76c      	b.n	800ce74 <_svfiprintf_r+0x48>
 800cf9a:	fb00 3202 	mla	r2, r0, r2, r3
 800cf9e:	2101      	movs	r1, #1
 800cfa0:	e7a3      	b.n	800ceea <_svfiprintf_r+0xbe>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	240a      	movs	r4, #10
 800cfaa:	460f      	mov	r7, r1
 800cfac:	3101      	adds	r1, #1
 800cfae:	783a      	ldrb	r2, [r7, #0]
 800cfb0:	3a30      	subs	r2, #48	; 0x30
 800cfb2:	2a09      	cmp	r2, #9
 800cfb4:	d903      	bls.n	800cfbe <_svfiprintf_r+0x192>
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0ca      	beq.n	800cf50 <_svfiprintf_r+0x124>
 800cfba:	9005      	str	r0, [sp, #20]
 800cfbc:	e7c8      	b.n	800cf50 <_svfiprintf_r+0x124>
 800cfbe:	fb04 2000 	mla	r0, r4, r0, r2
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e7f1      	b.n	800cfaa <_svfiprintf_r+0x17e>
 800cfc6:	ab03      	add	r3, sp, #12
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4b10      	ldr	r3, [pc, #64]	; (800d010 <_svfiprintf_r+0x1e4>)
 800cfce:	a904      	add	r1, sp, #16
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	f7fd fd39 	bl	800aa48 <_printf_float>
 800cfd6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cfda:	4681      	mov	r9, r0
 800cfdc:	d1d9      	bne.n	800cf92 <_svfiprintf_r+0x166>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	065b      	lsls	r3, r3, #25
 800cfe2:	f53f af38 	bmi.w	800ce56 <_svfiprintf_r+0x2a>
 800cfe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe8:	b01d      	add	sp, #116	; 0x74
 800cfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfee:	ab03      	add	r3, sp, #12
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	462a      	mov	r2, r5
 800cff4:	4b06      	ldr	r3, [pc, #24]	; (800d010 <_svfiprintf_r+0x1e4>)
 800cff6:	a904      	add	r1, sp, #16
 800cff8:	4640      	mov	r0, r8
 800cffa:	f7fd ffc7 	bl	800af8c <_printf_i>
 800cffe:	e7ea      	b.n	800cfd6 <_svfiprintf_r+0x1aa>
 800d000:	0800e2d4 	.word	0x0800e2d4
 800d004:	0800e2da 	.word	0x0800e2da
 800d008:	0800e2de 	.word	0x0800e2de
 800d00c:	0800aa49 	.word	0x0800aa49
 800d010:	0800cd75 	.word	0x0800cd75

0800d014 <_sbrk_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4c06      	ldr	r4, [pc, #24]	; (800d030 <_sbrk_r+0x1c>)
 800d018:	2300      	movs	r3, #0
 800d01a:	4605      	mov	r5, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	f001 f814 	bl	800e04c <_sbrk>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d102      	bne.n	800d02e <_sbrk_r+0x1a>
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	b103      	cbz	r3, 800d02e <_sbrk_r+0x1a>
 800d02c:	602b      	str	r3, [r5, #0]
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	20000b30 	.word	0x20000b30

0800d034 <__sread>:
 800d034:	b510      	push	{r4, lr}
 800d036:	460c      	mov	r4, r1
 800d038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03c:	f000 f8e2 	bl	800d204 <_read_r>
 800d040:	2800      	cmp	r0, #0
 800d042:	bfab      	itete	ge
 800d044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d046:	89a3      	ldrhlt	r3, [r4, #12]
 800d048:	181b      	addge	r3, r3, r0
 800d04a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d04e:	bfac      	ite	ge
 800d050:	6563      	strge	r3, [r4, #84]	; 0x54
 800d052:	81a3      	strhlt	r3, [r4, #12]
 800d054:	bd10      	pop	{r4, pc}

0800d056 <__swrite>:
 800d056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	461f      	mov	r7, r3
 800d05c:	898b      	ldrh	r3, [r1, #12]
 800d05e:	05db      	lsls	r3, r3, #23
 800d060:	4605      	mov	r5, r0
 800d062:	460c      	mov	r4, r1
 800d064:	4616      	mov	r6, r2
 800d066:	d505      	bpl.n	800d074 <__swrite+0x1e>
 800d068:	2302      	movs	r3, #2
 800d06a:	2200      	movs	r2, #0
 800d06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d070:	f000 f874 	bl	800d15c <_lseek_r>
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	4632      	mov	r2, r6
 800d082:	463b      	mov	r3, r7
 800d084:	4628      	mov	r0, r5
 800d086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	f000 b823 	b.w	800d0d4 <_write_r>

0800d08e <__sseek>:
 800d08e:	b510      	push	{r4, lr}
 800d090:	460c      	mov	r4, r1
 800d092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d096:	f000 f861 	bl	800d15c <_lseek_r>
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	bf15      	itete	ne
 800d0a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0aa:	81a3      	strheq	r3, [r4, #12]
 800d0ac:	bf18      	it	ne
 800d0ae:	81a3      	strhne	r3, [r4, #12]
 800d0b0:	bd10      	pop	{r4, pc}

0800d0b2 <__sclose>:
 800d0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b6:	f000 b81f 	b.w	800d0f8 <_close_r>

0800d0ba <__ascii_wctomb>:
 800d0ba:	b149      	cbz	r1, 800d0d0 <__ascii_wctomb+0x16>
 800d0bc:	2aff      	cmp	r2, #255	; 0xff
 800d0be:	bf85      	ittet	hi
 800d0c0:	238a      	movhi	r3, #138	; 0x8a
 800d0c2:	6003      	strhi	r3, [r0, #0]
 800d0c4:	700a      	strbls	r2, [r1, #0]
 800d0c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0ca:	bf98      	it	ls
 800d0cc:	2001      	movls	r0, #1
 800d0ce:	4770      	bx	lr
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	4770      	bx	lr

0800d0d4 <_write_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4c07      	ldr	r4, [pc, #28]	; (800d0f4 <_write_r+0x20>)
 800d0d8:	4605      	mov	r5, r0
 800d0da:	4608      	mov	r0, r1
 800d0dc:	4611      	mov	r1, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	6022      	str	r2, [r4, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f000 ffc0 	bl	800e068 <_write>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_write_r+0x1e>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_write_r+0x1e>
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	20000b30 	.word	0x20000b30

0800d0f8 <_close_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4c06      	ldr	r4, [pc, #24]	; (800d114 <_close_r+0x1c>)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4605      	mov	r5, r0
 800d100:	4608      	mov	r0, r1
 800d102:	6023      	str	r3, [r4, #0]
 800d104:	f000 ff7a 	bl	800dffc <_close>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	d102      	bne.n	800d112 <_close_r+0x1a>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	b103      	cbz	r3, 800d112 <_close_r+0x1a>
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	bd38      	pop	{r3, r4, r5, pc}
 800d114:	20000b30 	.word	0x20000b30

0800d118 <_fstat_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4c07      	ldr	r4, [pc, #28]	; (800d138 <_fstat_r+0x20>)
 800d11c:	2300      	movs	r3, #0
 800d11e:	4605      	mov	r5, r0
 800d120:	4608      	mov	r0, r1
 800d122:	4611      	mov	r1, r2
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	f000 ff71 	bl	800e00c <_fstat>
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	d102      	bne.n	800d134 <_fstat_r+0x1c>
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	b103      	cbz	r3, 800d134 <_fstat_r+0x1c>
 800d132:	602b      	str	r3, [r5, #0]
 800d134:	bd38      	pop	{r3, r4, r5, pc}
 800d136:	bf00      	nop
 800d138:	20000b30 	.word	0x20000b30

0800d13c <_isatty_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4c06      	ldr	r4, [pc, #24]	; (800d158 <_isatty_r+0x1c>)
 800d140:	2300      	movs	r3, #0
 800d142:	4605      	mov	r5, r0
 800d144:	4608      	mov	r0, r1
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	f000 ff68 	bl	800e01c <_isatty>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_isatty_r+0x1a>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	b103      	cbz	r3, 800d156 <_isatty_r+0x1a>
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	20000b30 	.word	0x20000b30

0800d15c <_lseek_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4c07      	ldr	r4, [pc, #28]	; (800d17c <_lseek_r+0x20>)
 800d160:	4605      	mov	r5, r0
 800d162:	4608      	mov	r0, r1
 800d164:	4611      	mov	r1, r2
 800d166:	2200      	movs	r2, #0
 800d168:	6022      	str	r2, [r4, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	f000 ff5e 	bl	800e02c <_lseek>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_lseek_r+0x1e>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	b103      	cbz	r3, 800d17a <_lseek_r+0x1e>
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20000b30 	.word	0x20000b30

0800d180 <memmove>:
 800d180:	4288      	cmp	r0, r1
 800d182:	b510      	push	{r4, lr}
 800d184:	eb01 0302 	add.w	r3, r1, r2
 800d188:	d803      	bhi.n	800d192 <memmove+0x12>
 800d18a:	1e42      	subs	r2, r0, #1
 800d18c:	4299      	cmp	r1, r3
 800d18e:	d10c      	bne.n	800d1aa <memmove+0x2a>
 800d190:	bd10      	pop	{r4, pc}
 800d192:	4298      	cmp	r0, r3
 800d194:	d2f9      	bcs.n	800d18a <memmove+0xa>
 800d196:	1881      	adds	r1, r0, r2
 800d198:	1ad2      	subs	r2, r2, r3
 800d19a:	42d3      	cmn	r3, r2
 800d19c:	d100      	bne.n	800d1a0 <memmove+0x20>
 800d19e:	bd10      	pop	{r4, pc}
 800d1a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d1a8:	e7f7      	b.n	800d19a <memmove+0x1a>
 800d1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d1b2:	e7eb      	b.n	800d18c <memmove+0xc>

0800d1b4 <__malloc_lock>:
 800d1b4:	4770      	bx	lr

0800d1b6 <__malloc_unlock>:
 800d1b6:	4770      	bx	lr

0800d1b8 <_realloc_r>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	4614      	mov	r4, r2
 800d1be:	460e      	mov	r6, r1
 800d1c0:	b921      	cbnz	r1, 800d1cc <_realloc_r+0x14>
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d1c8:	f7ff bd76 	b.w	800ccb8 <_malloc_r>
 800d1cc:	b922      	cbnz	r2, 800d1d8 <_realloc_r+0x20>
 800d1ce:	f7ff fd25 	bl	800cc1c <_free_r>
 800d1d2:	4625      	mov	r5, r4
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d8:	f000 f826 	bl	800d228 <_malloc_usable_size_r>
 800d1dc:	4284      	cmp	r4, r0
 800d1de:	d90f      	bls.n	800d200 <_realloc_r+0x48>
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	f7ff fd68 	bl	800ccb8 <_malloc_r>
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d0f2      	beq.n	800d1d4 <_realloc_r+0x1c>
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	f7ff fa29 	bl	800c648 <memcpy>
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	f7ff fd0f 	bl	800cc1c <_free_r>
 800d1fe:	e7e9      	b.n	800d1d4 <_realloc_r+0x1c>
 800d200:	4635      	mov	r5, r6
 800d202:	e7e7      	b.n	800d1d4 <_realloc_r+0x1c>

0800d204 <_read_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4c07      	ldr	r4, [pc, #28]	; (800d224 <_read_r+0x20>)
 800d208:	4605      	mov	r5, r0
 800d20a:	4608      	mov	r0, r1
 800d20c:	4611      	mov	r1, r2
 800d20e:	2200      	movs	r2, #0
 800d210:	6022      	str	r2, [r4, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	f000 ff12 	bl	800e03c <_read>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_read_r+0x1e>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_read_r+0x1e>
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	20000b30 	.word	0x20000b30

0800d228 <_malloc_usable_size_r>:
 800d228:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f1a0 0004 	sub.w	r0, r0, #4
 800d232:	bfbc      	itt	lt
 800d234:	580b      	ldrlt	r3, [r1, r0]
 800d236:	18c0      	addlt	r0, r0, r3
 800d238:	4770      	bx	lr
 800d23a:	0000      	movs	r0, r0
 800d23c:	0000      	movs	r0, r0
	...

0800d240 <pow>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	ed2d 8b0a 	vpush	{d8-d12}
 800d246:	eeb0 9b40 	vmov.f64	d9, d0
 800d24a:	eeb0 8b41 	vmov.f64	d8, d1
 800d24e:	4c8e      	ldr	r4, [pc, #568]	; (800d488 <pow+0x248>)
 800d250:	b08a      	sub	sp, #40	; 0x28
 800d252:	f000 f975 	bl	800d540 <__ieee754_pow>
 800d256:	f994 3000 	ldrsb.w	r3, [r4]
 800d25a:	eeb0 ab40 	vmov.f64	d10, d0
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	4626      	mov	r6, r4
 800d262:	d04b      	beq.n	800d2fc <pow+0xbc>
 800d264:	eeb4 8b48 	vcmp.f64	d8, d8
 800d268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26c:	d646      	bvs.n	800d2fc <pow+0xbc>
 800d26e:	eeb4 9b49 	vcmp.f64	d9, d9
 800d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d276:	d719      	bvc.n	800d2ac <pow+0x6c>
 800d278:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d280:	d13c      	bne.n	800d2fc <pow+0xbc>
 800d282:	2201      	movs	r2, #1
 800d284:	9200      	str	r2, [sp, #0]
 800d286:	4981      	ldr	r1, [pc, #516]	; (800d48c <pow+0x24c>)
 800d288:	4a81      	ldr	r2, [pc, #516]	; (800d490 <pow+0x250>)
 800d28a:	9201      	str	r2, [sp, #4]
 800d28c:	2000      	movs	r0, #0
 800d28e:	2200      	movs	r2, #0
 800d290:	2b02      	cmp	r3, #2
 800d292:	9208      	str	r2, [sp, #32]
 800d294:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d298:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d29c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d2a0:	d02a      	beq.n	800d2f8 <pow+0xb8>
 800d2a2:	4668      	mov	r0, sp
 800d2a4:	f000 fd7f 	bl	800dda6 <matherr>
 800d2a8:	bb00      	cbnz	r0, 800d2ec <pow+0xac>
 800d2aa:	e04e      	b.n	800d34a <pow+0x10a>
 800d2ac:	ed9f bb74 	vldr	d11, [pc, #464]	; 800d480 <pow+0x240>
 800d2b0:	eeb4 9b4b 	vcmp.f64	d9, d11
 800d2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b8:	eeb0 cb4b 	vmov.f64	d12, d11
 800d2bc:	d14a      	bne.n	800d354 <pow+0x114>
 800d2be:	eeb4 8b4b 	vcmp.f64	d8, d11
 800d2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c6:	d11f      	bne.n	800d308 <pow+0xc8>
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	9200      	str	r2, [sp, #0]
 800d2cc:	4a70      	ldr	r2, [pc, #448]	; (800d490 <pow+0x250>)
 800d2ce:	9201      	str	r2, [sp, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	9208      	str	r2, [sp, #32]
 800d2d4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d2d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d2dc:	ed8d bb06 	vstr	d11, [sp, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d0de      	beq.n	800d2a2 <pow+0x62>
 800d2e4:	4b69      	ldr	r3, [pc, #420]	; (800d48c <pow+0x24c>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	b11b      	cbz	r3, 800d2f8 <pow+0xb8>
 800d2f0:	f000 fe7e 	bl	800dff0 <__errno>
 800d2f4:	9b08      	ldr	r3, [sp, #32]
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	ed9d ab06 	vldr	d10, [sp, #24]
 800d2fc:	eeb0 0b4a 	vmov.f64	d0, d10
 800d300:	b00a      	add	sp, #40	; 0x28
 800d302:	ecbd 8b0a 	vpop	{d8-d12}
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	eeb0 0b48 	vmov.f64	d0, d8
 800d30c:	f000 fd43 	bl	800dd96 <finite>
 800d310:	2800      	cmp	r0, #0
 800d312:	d0f3      	beq.n	800d2fc <pow+0xbc>
 800d314:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31c:	d5ee      	bpl.n	800d2fc <pow+0xbc>
 800d31e:	2301      	movs	r3, #1
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	4b5b      	ldr	r3, [pc, #364]	; (800d490 <pow+0x250>)
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	2300      	movs	r3, #0
 800d328:	9308      	str	r3, [sp, #32]
 800d32a:	f994 3000 	ldrsb.w	r3, [r4]
 800d32e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d332:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d336:	b913      	cbnz	r3, 800d33e <pow+0xfe>
 800d338:	ed8d bb06 	vstr	d11, [sp, #24]
 800d33c:	e7b1      	b.n	800d2a2 <pow+0x62>
 800d33e:	4955      	ldr	r1, [pc, #340]	; (800d494 <pow+0x254>)
 800d340:	2000      	movs	r0, #0
 800d342:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d1ab      	bne.n	800d2a2 <pow+0x62>
 800d34a:	f000 fe51 	bl	800dff0 <__errno>
 800d34e:	2321      	movs	r3, #33	; 0x21
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	e7cb      	b.n	800d2ec <pow+0xac>
 800d354:	f000 fd1f 	bl	800dd96 <finite>
 800d358:	4605      	mov	r5, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d168      	bne.n	800d430 <pow+0x1f0>
 800d35e:	eeb0 0b49 	vmov.f64	d0, d9
 800d362:	f000 fd18 	bl	800dd96 <finite>
 800d366:	2800      	cmp	r0, #0
 800d368:	d062      	beq.n	800d430 <pow+0x1f0>
 800d36a:	eeb0 0b48 	vmov.f64	d0, d8
 800d36e:	f000 fd12 	bl	800dd96 <finite>
 800d372:	2800      	cmp	r0, #0
 800d374:	d05c      	beq.n	800d430 <pow+0x1f0>
 800d376:	eeb4 ab4a 	vcmp.f64	d10, d10
 800d37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37e:	f994 3000 	ldrsb.w	r3, [r4]
 800d382:	4a43      	ldr	r2, [pc, #268]	; (800d490 <pow+0x250>)
 800d384:	d70e      	bvc.n	800d3a4 <pow+0x164>
 800d386:	2101      	movs	r1, #1
 800d388:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d38c:	9508      	str	r5, [sp, #32]
 800d38e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d392:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0ce      	beq.n	800d338 <pow+0xf8>
 800d39a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800d39e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3a2:	e7d0      	b.n	800d346 <pow+0x106>
 800d3a4:	2103      	movs	r1, #3
 800d3a6:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d3aa:	9508      	str	r5, [sp, #32]
 800d3ac:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d3b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d3b4:	bb1b      	cbnz	r3, 800d3fe <pow+0x1be>
 800d3b6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d3ba:	4b37      	ldr	r3, [pc, #220]	; (800d498 <pow+0x258>)
 800d3bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3c8:	d553      	bpl.n	800d472 <pow+0x232>
 800d3ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d3ce:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d3d2:	eeb0 0b48 	vmov.f64	d0, d8
 800d3d6:	f000 fcf3 	bl	800ddc0 <rint>
 800d3da:	eeb4 8b40 	vcmp.f64	d8, d0
 800d3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e2:	d004      	beq.n	800d3ee <pow+0x1ae>
 800d3e4:	4b2d      	ldr	r3, [pc, #180]	; (800d49c <pow+0x25c>)
 800d3e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d3ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3ee:	f996 3000 	ldrsb.w	r3, [r6]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d13d      	bne.n	800d472 <pow+0x232>
 800d3f6:	f000 fdfb 	bl	800dff0 <__errno>
 800d3fa:	2322      	movs	r3, #34	; 0x22
 800d3fc:	e7a8      	b.n	800d350 <pow+0x110>
 800d3fe:	4b28      	ldr	r3, [pc, #160]	; (800d4a0 <pow+0x260>)
 800d400:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d404:	2200      	movs	r2, #0
 800d406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d40e:	d5ee      	bpl.n	800d3ee <pow+0x1ae>
 800d410:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d414:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d418:	eeb0 0b48 	vmov.f64	d0, d8
 800d41c:	f000 fcd0 	bl	800ddc0 <rint>
 800d420:	eeb4 8b40 	vcmp.f64	d8, d0
 800d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d428:	d0e1      	beq.n	800d3ee <pow+0x1ae>
 800d42a:	2200      	movs	r2, #0
 800d42c:	4b19      	ldr	r3, [pc, #100]	; (800d494 <pow+0x254>)
 800d42e:	e7dc      	b.n	800d3ea <pow+0x1aa>
 800d430:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800d434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d438:	f47f af60 	bne.w	800d2fc <pow+0xbc>
 800d43c:	eeb0 0b49 	vmov.f64	d0, d9
 800d440:	f000 fca9 	bl	800dd96 <finite>
 800d444:	2800      	cmp	r0, #0
 800d446:	f43f af59 	beq.w	800d2fc <pow+0xbc>
 800d44a:	eeb0 0b48 	vmov.f64	d0, d8
 800d44e:	f000 fca2 	bl	800dd96 <finite>
 800d452:	2800      	cmp	r0, #0
 800d454:	f43f af52 	beq.w	800d2fc <pow+0xbc>
 800d458:	2304      	movs	r3, #4
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <pow+0x250>)
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	2300      	movs	r3, #0
 800d462:	9308      	str	r3, [sp, #32]
 800d464:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d468:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d46c:	ed8d cb06 	vstr	d12, [sp, #24]
 800d470:	e7bd      	b.n	800d3ee <pow+0x1ae>
 800d472:	4668      	mov	r0, sp
 800d474:	f000 fc97 	bl	800dda6 <matherr>
 800d478:	2800      	cmp	r0, #0
 800d47a:	f47f af37 	bne.w	800d2ec <pow+0xac>
 800d47e:	e7ba      	b.n	800d3f6 <pow+0x1b6>
	...
 800d488:	2000020c 	.word	0x2000020c
 800d48c:	3ff00000 	.word	0x3ff00000
 800d490:	0800e3e6 	.word	0x0800e3e6
 800d494:	fff00000 	.word	0xfff00000
 800d498:	47efffff 	.word	0x47efffff
 800d49c:	c7efffff 	.word	0xc7efffff
 800d4a0:	7ff00000 	.word	0x7ff00000
 800d4a4:	00000000 	.word	0x00000000

0800d4a8 <sqrt>:
 800d4a8:	b500      	push	{lr}
 800d4aa:	ed2d 8b02 	vpush	{d8}
 800d4ae:	eeb0 8b40 	vmov.f64	d8, d0
 800d4b2:	b08b      	sub	sp, #44	; 0x2c
 800d4b4:	f000 fbca 	bl	800dc4c <__ieee754_sqrt>
 800d4b8:	4b1f      	ldr	r3, [pc, #124]	; (800d538 <sqrt+0x90>)
 800d4ba:	f993 3000 	ldrsb.w	r3, [r3]
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	d024      	beq.n	800d50c <sqrt+0x64>
 800d4c2:	eeb4 8b48 	vcmp.f64	d8, d8
 800d4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ca:	d61f      	bvs.n	800d50c <sqrt+0x64>
 800d4cc:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d530 <sqrt+0x88>
 800d4d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d8:	d518      	bpl.n	800d50c <sqrt+0x64>
 800d4da:	2201      	movs	r2, #1
 800d4dc:	9200      	str	r2, [sp, #0]
 800d4de:	4a17      	ldr	r2, [pc, #92]	; (800d53c <sqrt+0x94>)
 800d4e0:	9201      	str	r2, [sp, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	9208      	str	r2, [sp, #32]
 800d4e6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d4ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d4ee:	b993      	cbnz	r3, 800d516 <sqrt+0x6e>
 800d4f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4f4:	4668      	mov	r0, sp
 800d4f6:	f000 fc56 	bl	800dda6 <matherr>
 800d4fa:	b190      	cbz	r0, 800d522 <sqrt+0x7a>
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	b11b      	cbz	r3, 800d508 <sqrt+0x60>
 800d500:	f000 fd76 	bl	800dff0 <__errno>
 800d504:	9b08      	ldr	r3, [sp, #32]
 800d506:	6003      	str	r3, [r0, #0]
 800d508:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d50c:	b00b      	add	sp, #44	; 0x2c
 800d50e:	ecbd 8b02 	vpop	{d8}
 800d512:	f85d fb04 	ldr.w	pc, [sp], #4
 800d516:	2b02      	cmp	r3, #2
 800d518:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d51c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d520:	d1e8      	bne.n	800d4f4 <sqrt+0x4c>
 800d522:	f000 fd65 	bl	800dff0 <__errno>
 800d526:	2321      	movs	r3, #33	; 0x21
 800d528:	6003      	str	r3, [r0, #0]
 800d52a:	e7e7      	b.n	800d4fc <sqrt+0x54>
 800d52c:	f3af 8000 	nop.w
	...
 800d538:	2000020c 	.word	0x2000020c
 800d53c:	0800e3ea 	.word	0x0800e3ea

0800d540 <__ieee754_pow>:
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	ec57 6b11 	vmov	r6, r7, d1
 800d548:	ed2d 8b02 	vpush	{d8}
 800d54c:	eeb0 8b40 	vmov.f64	d8, d0
 800d550:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d554:	ea58 0306 	orrs.w	r3, r8, r6
 800d558:	b085      	sub	sp, #20
 800d55a:	ee10 ba10 	vmov	fp, s0
 800d55e:	ee18 9a90 	vmov	r9, s17
 800d562:	ee11 2a10 	vmov	r2, s2
 800d566:	46ba      	mov	sl, r7
 800d568:	f000 8303 	beq.w	800db72 <__ieee754_pow+0x632>
 800d56c:	4bb8      	ldr	r3, [pc, #736]	; (800d850 <__ieee754_pow+0x310>)
 800d56e:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800d572:	429c      	cmp	r4, r3
 800d574:	dc0b      	bgt.n	800d58e <__ieee754_pow+0x4e>
 800d576:	d105      	bne.n	800d584 <__ieee754_pow+0x44>
 800d578:	f1bb 0f00 	cmp.w	fp, #0
 800d57c:	d107      	bne.n	800d58e <__ieee754_pow+0x4e>
 800d57e:	45a0      	cmp	r8, r4
 800d580:	dc0d      	bgt.n	800d59e <__ieee754_pow+0x5e>
 800d582:	e001      	b.n	800d588 <__ieee754_pow+0x48>
 800d584:	4598      	cmp	r8, r3
 800d586:	dc02      	bgt.n	800d58e <__ieee754_pow+0x4e>
 800d588:	4598      	cmp	r8, r3
 800d58a:	d110      	bne.n	800d5ae <__ieee754_pow+0x6e>
 800d58c:	b17a      	cbz	r2, 800d5ae <__ieee754_pow+0x6e>
 800d58e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d592:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d596:	ea54 030b 	orrs.w	r3, r4, fp
 800d59a:	f000 82ea 	beq.w	800db72 <__ieee754_pow+0x632>
 800d59e:	48ad      	ldr	r0, [pc, #692]	; (800d854 <__ieee754_pow+0x314>)
 800d5a0:	b005      	add	sp, #20
 800d5a2:	ecbd 8b02 	vpop	{d8}
 800d5a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5aa:	f000 bc01 	b.w	800ddb0 <nan>
 800d5ae:	f1b9 0f00 	cmp.w	r9, #0
 800d5b2:	da50      	bge.n	800d656 <__ieee754_pow+0x116>
 800d5b4:	4ba8      	ldr	r3, [pc, #672]	; (800d858 <__ieee754_pow+0x318>)
 800d5b6:	4598      	cmp	r8, r3
 800d5b8:	dc4b      	bgt.n	800d652 <__ieee754_pow+0x112>
 800d5ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d5be:	4598      	cmp	r8, r3
 800d5c0:	dd49      	ble.n	800d656 <__ieee754_pow+0x116>
 800d5c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d5ca:	2b14      	cmp	r3, #20
 800d5cc:	dd24      	ble.n	800d618 <__ieee754_pow+0xd8>
 800d5ce:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d5d2:	fa22 f503 	lsr.w	r5, r2, r3
 800d5d6:	fa05 f303 	lsl.w	r3, r5, r3
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d13b      	bne.n	800d656 <__ieee754_pow+0x116>
 800d5de:	f005 0501 	and.w	r5, r5, #1
 800d5e2:	f1c5 0502 	rsb	r5, r5, #2
 800d5e6:	2a00      	cmp	r2, #0
 800d5e8:	d15c      	bne.n	800d6a4 <__ieee754_pow+0x164>
 800d5ea:	4b99      	ldr	r3, [pc, #612]	; (800d850 <__ieee754_pow+0x310>)
 800d5ec:	4598      	cmp	r8, r3
 800d5ee:	d122      	bne.n	800d636 <__ieee754_pow+0xf6>
 800d5f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d5f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d5f8:	ea53 030b 	orrs.w	r3, r3, fp
 800d5fc:	f000 82b9 	beq.w	800db72 <__ieee754_pow+0x632>
 800d600:	4b96      	ldr	r3, [pc, #600]	; (800d85c <__ieee754_pow+0x31c>)
 800d602:	429c      	cmp	r4, r3
 800d604:	dd29      	ble.n	800d65a <__ieee754_pow+0x11a>
 800d606:	f1ba 0f00 	cmp.w	sl, #0
 800d60a:	f280 82b5 	bge.w	800db78 <__ieee754_pow+0x638>
 800d60e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800d820 <__ieee754_pow+0x2e0>
 800d612:	ed8d 7b00 	vstr	d7, [sp]
 800d616:	e028      	b.n	800d66a <__ieee754_pow+0x12a>
 800d618:	2a00      	cmp	r2, #0
 800d61a:	d142      	bne.n	800d6a2 <__ieee754_pow+0x162>
 800d61c:	f1c3 0314 	rsb	r3, r3, #20
 800d620:	fa48 f503 	asr.w	r5, r8, r3
 800d624:	fa05 f303 	lsl.w	r3, r5, r3
 800d628:	4598      	cmp	r8, r3
 800d62a:	f040 82ab 	bne.w	800db84 <__ieee754_pow+0x644>
 800d62e:	f005 0501 	and.w	r5, r5, #1
 800d632:	f1c5 0502 	rsb	r5, r5, #2
 800d636:	4b8a      	ldr	r3, [pc, #552]	; (800d860 <__ieee754_pow+0x320>)
 800d638:	4598      	cmp	r8, r3
 800d63a:	d11d      	bne.n	800d678 <__ieee754_pow+0x138>
 800d63c:	f1ba 0f00 	cmp.w	sl, #0
 800d640:	f280 829d 	bge.w	800db7e <__ieee754_pow+0x63e>
 800d644:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d648:	ee87 6b08 	vdiv.f64	d6, d7, d8
 800d64c:	ed8d 6b00 	vstr	d6, [sp]
 800d650:	e00b      	b.n	800d66a <__ieee754_pow+0x12a>
 800d652:	2502      	movs	r5, #2
 800d654:	e7c7      	b.n	800d5e6 <__ieee754_pow+0xa6>
 800d656:	2500      	movs	r5, #0
 800d658:	e7c5      	b.n	800d5e6 <__ieee754_pow+0xa6>
 800d65a:	f1ba 0f00 	cmp.w	sl, #0
 800d65e:	dad6      	bge.n	800d60e <__ieee754_pow+0xce>
 800d660:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800d664:	4633      	mov	r3, r6
 800d666:	e88d 0018 	stmia.w	sp, {r3, r4}
 800d66a:	ed9d 0b00 	vldr	d0, [sp]
 800d66e:	b005      	add	sp, #20
 800d670:	ecbd 8b02 	vpop	{d8}
 800d674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d678:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 800d67c:	d102      	bne.n	800d684 <__ieee754_pow+0x144>
 800d67e:	ee28 7b08 	vmul.f64	d7, d8, d8
 800d682:	e7c6      	b.n	800d612 <__ieee754_pow+0xd2>
 800d684:	4b77      	ldr	r3, [pc, #476]	; (800d864 <__ieee754_pow+0x324>)
 800d686:	459a      	cmp	sl, r3
 800d688:	d10c      	bne.n	800d6a4 <__ieee754_pow+0x164>
 800d68a:	f1b9 0f00 	cmp.w	r9, #0
 800d68e:	db09      	blt.n	800d6a4 <__ieee754_pow+0x164>
 800d690:	eeb0 0b48 	vmov.f64	d0, d8
 800d694:	b005      	add	sp, #20
 800d696:	ecbd 8b02 	vpop	{d8}
 800d69a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69e:	f000 bad5 	b.w	800dc4c <__ieee754_sqrt>
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	eeb0 0b48 	vmov.f64	d0, d8
 800d6a8:	f000 fb6e 	bl	800dd88 <fabs>
 800d6ac:	ed8d 0b00 	vstr	d0, [sp]
 800d6b0:	f1bb 0f00 	cmp.w	fp, #0
 800d6b4:	d128      	bne.n	800d708 <__ieee754_pow+0x1c8>
 800d6b6:	b124      	cbz	r4, 800d6c2 <__ieee754_pow+0x182>
 800d6b8:	4b69      	ldr	r3, [pc, #420]	; (800d860 <__ieee754_pow+0x320>)
 800d6ba:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d122      	bne.n	800d708 <__ieee754_pow+0x1c8>
 800d6c2:	f1ba 0f00 	cmp.w	sl, #0
 800d6c6:	da07      	bge.n	800d6d8 <__ieee754_pow+0x198>
 800d6c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d6cc:	ed9d 5b00 	vldr	d5, [sp]
 800d6d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800d6d4:	ed8d 6b00 	vstr	d6, [sp]
 800d6d8:	f1b9 0f00 	cmp.w	r9, #0
 800d6dc:	dac5      	bge.n	800d66a <__ieee754_pow+0x12a>
 800d6de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d6e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d6e6:	ea54 0305 	orrs.w	r3, r4, r5
 800d6ea:	d106      	bne.n	800d6fa <__ieee754_pow+0x1ba>
 800d6ec:	ed9d 7b00 	vldr	d7, [sp]
 800d6f0:	ee37 7b47 	vsub.f64	d7, d7, d7
 800d6f4:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d6f8:	e7a8      	b.n	800d64c <__ieee754_pow+0x10c>
 800d6fa:	2d01      	cmp	r5, #1
 800d6fc:	d1b5      	bne.n	800d66a <__ieee754_pow+0x12a>
 800d6fe:	ed9d 7b00 	vldr	d7, [sp]
 800d702:	eeb1 7b47 	vneg.f64	d7, d7
 800d706:	e784      	b.n	800d612 <__ieee754_pow+0xd2>
 800d708:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800d70c:	f109 30ff 	add.w	r0, r9, #4294967295
 800d710:	ea55 0300 	orrs.w	r3, r5, r0
 800d714:	d104      	bne.n	800d720 <__ieee754_pow+0x1e0>
 800d716:	ee38 8b48 	vsub.f64	d8, d8, d8
 800d71a:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800d71e:	e778      	b.n	800d612 <__ieee754_pow+0xd2>
 800d720:	4b51      	ldr	r3, [pc, #324]	; (800d868 <__ieee754_pow+0x328>)
 800d722:	4598      	cmp	r8, r3
 800d724:	f340 80a6 	ble.w	800d874 <__ieee754_pow+0x334>
 800d728:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d72c:	4598      	cmp	r8, r3
 800d72e:	dd0b      	ble.n	800d748 <__ieee754_pow+0x208>
 800d730:	4b4a      	ldr	r3, [pc, #296]	; (800d85c <__ieee754_pow+0x31c>)
 800d732:	429c      	cmp	r4, r3
 800d734:	dc0e      	bgt.n	800d754 <__ieee754_pow+0x214>
 800d736:	f1ba 0f00 	cmp.w	sl, #0
 800d73a:	f6bf af68 	bge.w	800d60e <__ieee754_pow+0xce>
 800d73e:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 800d828 <__ieee754_pow+0x2e8>
 800d742:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d746:	e764      	b.n	800d612 <__ieee754_pow+0xd2>
 800d748:	4b48      	ldr	r3, [pc, #288]	; (800d86c <__ieee754_pow+0x32c>)
 800d74a:	429c      	cmp	r4, r3
 800d74c:	ddf3      	ble.n	800d736 <__ieee754_pow+0x1f6>
 800d74e:	4b44      	ldr	r3, [pc, #272]	; (800d860 <__ieee754_pow+0x320>)
 800d750:	429c      	cmp	r4, r3
 800d752:	dd03      	ble.n	800d75c <__ieee754_pow+0x21c>
 800d754:	f1ba 0f00 	cmp.w	sl, #0
 800d758:	dcf1      	bgt.n	800d73e <__ieee754_pow+0x1fe>
 800d75a:	e758      	b.n	800d60e <__ieee754_pow+0xce>
 800d75c:	ed9d 7b00 	vldr	d7, [sp]
 800d760:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d764:	ed9f 5b32 	vldr	d5, [pc, #200]	; 800d830 <__ieee754_pow+0x2f0>
 800d768:	ee37 6b46 	vsub.f64	d6, d7, d6
 800d76c:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800d770:	eeb1 3b46 	vneg.f64	d3, d6
 800d774:	eea3 5b07 	vfma.f64	d5, d3, d7
 800d778:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d77c:	eea3 7b05 	vfma.f64	d7, d3, d5
 800d780:	ee26 5b06 	vmul.f64	d5, d6, d6
 800d784:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d788:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d838 <__ieee754_pow+0x2f8>
 800d78c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d790:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800d840 <__ieee754_pow+0x300>
 800d794:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d798:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800d848 <__ieee754_pow+0x308>
 800d79c:	eeb0 4b47 	vmov.f64	d4, d7
 800d7a0:	eea6 4b05 	vfma.f64	d4, d6, d5
 800d7a4:	ec53 2b14 	vmov	r2, r3, d4
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	ec43 2b14 	vmov	d4, r2, r3
 800d7ae:	eeb0 6b44 	vmov.f64	d6, d4
 800d7b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d7b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7ba:	3d01      	subs	r5, #1
 800d7bc:	ea55 0300 	orrs.w	r3, r5, r0
 800d7c0:	f04f 0200 	mov.w	r2, #0
 800d7c4:	463b      	mov	r3, r7
 800d7c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d7ca:	ec47 6b15 	vmov	d5, r6, r7
 800d7ce:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800d7d2:	bf08      	it	eq
 800d7d4:	eeb0 8b46 	vmoveq.f64	d8, d6
 800d7d8:	ec43 2b16 	vmov	d6, r2, r3
 800d7dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d7e0:	4b23      	ldr	r3, [pc, #140]	; (800d870 <__ieee754_pow+0x330>)
 800d7e2:	ee35 5b46 	vsub.f64	d5, d5, d6
 800d7e6:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d7ea:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d7ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d7f2:	ee15 1a90 	vmov	r1, s11
 800d7f6:	4299      	cmp	r1, r3
 800d7f8:	ee15 2a10 	vmov	r2, s10
 800d7fc:	f340 819b 	ble.w	800db36 <__ieee754_pow+0x5f6>
 800d800:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d804:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d808:	4313      	orrs	r3, r2
 800d80a:	f000 810a 	beq.w	800da22 <__ieee754_pow+0x4e2>
 800d80e:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800d828 <__ieee754_pow+0x2e8>
 800d812:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d816:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d81a:	e6fa      	b.n	800d612 <__ieee754_pow+0xd2>
 800d81c:	f3af 8000 	nop.w
	...
 800d828:	8800759c 	.word	0x8800759c
 800d82c:	7e37e43c 	.word	0x7e37e43c
 800d830:	55555555 	.word	0x55555555
 800d834:	3fd55555 	.word	0x3fd55555
 800d838:	652b82fe 	.word	0x652b82fe
 800d83c:	3ff71547 	.word	0x3ff71547
 800d840:	f85ddf44 	.word	0xf85ddf44
 800d844:	3e54ae0b 	.word	0x3e54ae0b
 800d848:	60000000 	.word	0x60000000
 800d84c:	3ff71547 	.word	0x3ff71547
 800d850:	7ff00000 	.word	0x7ff00000
 800d854:	0800e2d9 	.word	0x0800e2d9
 800d858:	433fffff 	.word	0x433fffff
 800d85c:	3fefffff 	.word	0x3fefffff
 800d860:	3ff00000 	.word	0x3ff00000
 800d864:	3fe00000 	.word	0x3fe00000
 800d868:	41e00000 	.word	0x41e00000
 800d86c:	3feffffe 	.word	0x3feffffe
 800d870:	408fffff 	.word	0x408fffff
 800d874:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d878:	f280 80cf 	bge.w	800da1a <__ieee754_pow+0x4da>
 800d87c:	ed9d 6b00 	vldr	d6, [sp]
 800d880:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800db88 <__ieee754_pow+0x648>
 800d884:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d888:	ed8d 7b00 	vstr	d7, [sp]
 800d88c:	9c01      	ldr	r4, [sp, #4]
 800d88e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800d892:	1521      	asrs	r1, r4, #20
 800d894:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d898:	4419      	add	r1, r3
 800d89a:	4be3      	ldr	r3, [pc, #908]	; (800dc28 <__ieee754_pow+0x6e8>)
 800d89c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d8a0:	f044 5e7f 	orr.w	lr, r4, #1069547520	; 0x3fc00000
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	f44e 1e40 	orr.w	lr, lr, #3145728	; 0x300000
 800d8aa:	dd06      	ble.n	800d8ba <__ieee754_pow+0x37a>
 800d8ac:	4bdf      	ldr	r3, [pc, #892]	; (800dc2c <__ieee754_pow+0x6ec>)
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	f340 80b5 	ble.w	800da1e <__ieee754_pow+0x4de>
 800d8b4:	3101      	adds	r1, #1
 800d8b6:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800d8ba:	2400      	movs	r4, #0
 800d8bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8c0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d8c4:	4673      	mov	r3, lr
 800d8c6:	ec43 2b17 	vmov	d7, r2, r3
 800d8ca:	4bd9      	ldr	r3, [pc, #868]	; (800dc30 <__ieee754_pow+0x6f0>)
 800d8cc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800d8d0:	4463      	add	r3, ip
 800d8d2:	ed93 5b00 	vldr	d5, [r3]
 800d8d6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 800d8da:	ee37 2b45 	vsub.f64	d2, d7, d5
 800d8de:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d8e2:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800d8e6:	ee22 6b01 	vmul.f64	d6, d2, d1
 800d8ea:	ed8d 6b00 	vstr	d6, [sp]
 800d8ee:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d8f2:	f04e 5e00 	orr.w	lr, lr, #536870912	; 0x20000000
 800d8f6:	f50e 2e00 	add.w	lr, lr, #524288	; 0x80000
 800d8fa:	f04f 0800 	mov.w	r8, #0
 800d8fe:	eb0e 4384 	add.w	r3, lr, r4, lsl #18
 800d902:	2200      	movs	r2, #0
 800d904:	ec49 8b14 	vmov	d4, r8, r9
 800d908:	ec43 2b16 	vmov	d6, r2, r3
 800d90c:	eeb1 3b44 	vneg.f64	d3, d4
 800d910:	eea3 2b06 	vfma.f64	d2, d3, d6
 800d914:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d918:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d91c:	eea3 2b07 	vfma.f64	d2, d3, d7
 800d920:	ed9d 7b00 	vldr	d7, [sp]
 800d924:	ee22 2b01 	vmul.f64	d2, d2, d1
 800d928:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d92c:	ee37 6b04 	vadd.f64	d6, d7, d4
 800d930:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800db90 <__ieee754_pow+0x650>
 800d934:	ee25 0b05 	vmul.f64	d0, d5, d5
 800d938:	ee26 6b02 	vmul.f64	d6, d6, d2
 800d93c:	ed9f 7b96 	vldr	d7, [pc, #600]	; 800db98 <__ieee754_pow+0x658>
 800d940:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d944:	ed9f 1b96 	vldr	d1, [pc, #600]	; 800dba0 <__ieee754_pow+0x660>
 800d948:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d94c:	ed9f 7b96 	vldr	d7, [pc, #600]	; 800dba8 <__ieee754_pow+0x668>
 800d950:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d954:	ed9f 1b96 	vldr	d1, [pc, #600]	; 800dbb0 <__ieee754_pow+0x670>
 800d958:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d95c:	ed9f 7b96 	vldr	d7, [pc, #600]	; 800dbb8 <__ieee754_pow+0x678>
 800d960:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d964:	eea0 6b07 	vfma.f64	d6, d0, d7
 800d968:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800d96c:	eeb0 5b47 	vmov.f64	d5, d7
 800d970:	eea4 5b04 	vfma.f64	d5, d4, d4
 800d974:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d978:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d97c:	f8cd 8008 	str.w	r8, [sp, #8]
 800d980:	ed9d 5b02 	vldr	d5, [sp, #8]
 800d984:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d988:	eea3 7b04 	vfma.f64	d7, d3, d4
 800d98c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d990:	ed9d 6b00 	vldr	d6, [sp]
 800d994:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d998:	eea2 7b05 	vfma.f64	d7, d2, d5
 800d99c:	eeb0 6b47 	vmov.f64	d6, d7
 800d9a0:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d9a4:	ed8d 6b00 	vstr	d6, [sp]
 800d9a8:	f8cd 8000 	str.w	r8, [sp]
 800d9ac:	ed9d 2b00 	vldr	d2, [sp]
 800d9b0:	eeb0 6b42 	vmov.f64	d6, d2
 800d9b4:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d9b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9bc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800dbc0 <__ieee754_pow+0x680>
 800d9c0:	4b9c      	ldr	r3, [pc, #624]	; (800dc34 <__ieee754_pow+0x6f4>)
 800d9c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9c6:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800dbc8 <__ieee754_pow+0x688>
 800d9ca:	4463      	add	r3, ip
 800d9cc:	eea2 7b06 	vfma.f64	d7, d2, d6
 800d9d0:	ed93 6b00 	vldr	d6, [r3]
 800d9d4:	4b98      	ldr	r3, [pc, #608]	; (800dc38 <__ieee754_pow+0x6f8>)
 800d9d6:	ee37 6b06 	vadd.f64	d6, d7, d6
 800d9da:	449c      	add	ip, r3
 800d9dc:	ed9c 1b00 	vldr	d1, [ip]
 800d9e0:	eeb0 4b46 	vmov.f64	d4, d6
 800d9e4:	ed9f 3b7a 	vldr	d3, [pc, #488]	; 800dbd0 <__ieee754_pow+0x690>
 800d9e8:	ee07 1a90 	vmov	s15, r1
 800d9ec:	eea2 4b03 	vfma.f64	d4, d2, d3
 800d9f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9f4:	ee34 4b01 	vadd.f64	d4, d4, d1
 800d9f8:	ee34 5b07 	vadd.f64	d5, d4, d7
 800d9fc:	ed8d 5b00 	vstr	d5, [sp]
 800da00:	f8cd 8000 	str.w	r8, [sp]
 800da04:	ed9d 4b00 	vldr	d4, [sp]
 800da08:	ee34 7b47 	vsub.f64	d7, d4, d7
 800da0c:	ee37 7b41 	vsub.f64	d7, d7, d1
 800da10:	eea2 7b43 	vfms.f64	d7, d2, d3
 800da14:	ee36 7b47 	vsub.f64	d7, d6, d7
 800da18:	e6cf      	b.n	800d7ba <__ieee754_pow+0x27a>
 800da1a:	2300      	movs	r3, #0
 800da1c:	e739      	b.n	800d892 <__ieee754_pow+0x352>
 800da1e:	2401      	movs	r4, #1
 800da20:	e74c      	b.n	800d8bc <__ieee754_pow+0x37c>
 800da22:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800dbd8 <__ieee754_pow+0x698>
 800da26:	ee35 5b46 	vsub.f64	d5, d5, d6
 800da2a:	ee37 4b04 	vadd.f64	d4, d7, d4
 800da2e:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	f73f aeea 	bgt.w	800d80e <__ieee754_pow+0x2ce>
 800da3a:	4a80      	ldr	r2, [pc, #512]	; (800dc3c <__ieee754_pow+0x6fc>)
 800da3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da40:	4293      	cmp	r3, r2
 800da42:	f340 808e 	ble.w	800db62 <__ieee754_pow+0x622>
 800da46:	151b      	asrs	r3, r3, #20
 800da48:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800da4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800da50:	4103      	asrs	r3, r0
 800da52:	440b      	add	r3, r1
 800da54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da58:	4879      	ldr	r0, [pc, #484]	; (800dc40 <__ieee754_pow+0x700>)
 800da5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da5e:	4110      	asrs	r0, r2
 800da60:	ea23 0500 	bic.w	r5, r3, r0
 800da64:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800da68:	2400      	movs	r4, #0
 800da6a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800da6e:	f1c2 0214 	rsb	r2, r2, #20
 800da72:	ec45 4b15 	vmov	d5, r4, r5
 800da76:	4110      	asrs	r0, r2
 800da78:	2900      	cmp	r1, #0
 800da7a:	bfb8      	it	lt
 800da7c:	4240      	neglt	r0, r0
 800da7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da82:	ee36 5b07 	vadd.f64	d5, d6, d7
 800da86:	ec53 2b15 	vmov	r2, r3, d5
 800da8a:	2200      	movs	r2, #0
 800da8c:	ec43 2b15 	vmov	d5, r2, r3
 800da90:	ed9f 4b53 	vldr	d4, [pc, #332]	; 800dbe0 <__ieee754_pow+0x6a0>
 800da94:	ee35 6b46 	vsub.f64	d6, d5, d6
 800da98:	ee37 6b46 	vsub.f64	d6, d7, d6
 800da9c:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800dbe8 <__ieee754_pow+0x6a8>
 800daa0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800daa4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800daa8:	ed9f 6b51 	vldr	d6, [pc, #324]	; 800dbf0 <__ieee754_pow+0x6b0>
 800daac:	eeb0 4b47 	vmov.f64	d4, d7
 800dab0:	eea5 4b06 	vfma.f64	d4, d5, d6
 800dab4:	eeb0 3b44 	vmov.f64	d3, d4
 800dab8:	eea5 3b46 	vfms.f64	d3, d5, d6
 800dabc:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 800dbf8 <__ieee754_pow+0x6b8>
 800dac0:	ee37 7b43 	vsub.f64	d7, d7, d3
 800dac4:	ee24 6b04 	vmul.f64	d6, d4, d4
 800dac8:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dc00 <__ieee754_pow+0x6c0>
 800dacc:	eea4 7b07 	vfma.f64	d7, d4, d7
 800dad0:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dad4:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 800dc08 <__ieee754_pow+0x6c8>
 800dad8:	eea6 5b03 	vfma.f64	d5, d6, d3
 800dadc:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800dc10 <__ieee754_pow+0x6d0>
 800dae0:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dae4:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 800dc18 <__ieee754_pow+0x6d8>
 800dae8:	eea6 5b03 	vfma.f64	d5, d6, d3
 800daec:	eeb0 3b44 	vmov.f64	d3, d4
 800daf0:	eea6 3b45 	vfms.f64	d3, d6, d5
 800daf4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800daf8:	eeb0 6b43 	vmov.f64	d6, d3
 800dafc:	ee24 3b03 	vmul.f64	d3, d4, d3
 800db00:	ee36 5b45 	vsub.f64	d5, d6, d5
 800db04:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800db08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800db0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800db10:	ee37 7b44 	vsub.f64	d7, d7, d4
 800db14:	ee36 7b47 	vsub.f64	d7, d6, d7
 800db18:	ed8d 7b00 	vstr	d7, [sp]
 800db1c:	9901      	ldr	r1, [sp, #4]
 800db1e:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800db22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800db26:	da1e      	bge.n	800db66 <__ieee754_pow+0x626>
 800db28:	eeb0 0b47 	vmov.f64	d0, d7
 800db2c:	f000 f9d4 	bl	800ded8 <scalbn>
 800db30:	ee20 7b08 	vmul.f64	d7, d0, d8
 800db34:	e56d      	b.n	800d612 <__ieee754_pow+0xd2>
 800db36:	4b43      	ldr	r3, [pc, #268]	; (800dc44 <__ieee754_pow+0x704>)
 800db38:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800db3c:	4298      	cmp	r0, r3
 800db3e:	f77f af7c 	ble.w	800da3a <__ieee754_pow+0x4fa>
 800db42:	4b41      	ldr	r3, [pc, #260]	; (800dc48 <__ieee754_pow+0x708>)
 800db44:	440b      	add	r3, r1
 800db46:	4313      	orrs	r3, r2
 800db48:	d002      	beq.n	800db50 <__ieee754_pow+0x610>
 800db4a:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800dc20 <__ieee754_pow+0x6e0>
 800db4e:	e660      	b.n	800d812 <__ieee754_pow+0x2d2>
 800db50:	ee35 5b46 	vsub.f64	d5, d5, d6
 800db54:	eeb4 7bc5 	vcmpe.f64	d7, d5
 800db58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5c:	f63f af6d 	bhi.w	800da3a <__ieee754_pow+0x4fa>
 800db60:	e7f3      	b.n	800db4a <__ieee754_pow+0x60a>
 800db62:	2000      	movs	r0, #0
 800db64:	e78d      	b.n	800da82 <__ieee754_pow+0x542>
 800db66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db6a:	460b      	mov	r3, r1
 800db6c:	ec43 2b10 	vmov	d0, r2, r3
 800db70:	e7de      	b.n	800db30 <__ieee754_pow+0x5f0>
 800db72:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800db76:	e54c      	b.n	800d612 <__ieee754_pow+0xd2>
 800db78:	e9cd 6700 	strd	r6, r7, [sp]
 800db7c:	e575      	b.n	800d66a <__ieee754_pow+0x12a>
 800db7e:	ed8d 8b00 	vstr	d8, [sp]
 800db82:	e572      	b.n	800d66a <__ieee754_pow+0x12a>
 800db84:	4615      	mov	r5, r2
 800db86:	e556      	b.n	800d636 <__ieee754_pow+0xf6>
 800db88:	00000000 	.word	0x00000000
 800db8c:	43400000 	.word	0x43400000
 800db90:	4a454eef 	.word	0x4a454eef
 800db94:	3fca7e28 	.word	0x3fca7e28
 800db98:	93c9db65 	.word	0x93c9db65
 800db9c:	3fcd864a 	.word	0x3fcd864a
 800dba0:	a91d4101 	.word	0xa91d4101
 800dba4:	3fd17460 	.word	0x3fd17460
 800dba8:	518f264d 	.word	0x518f264d
 800dbac:	3fd55555 	.word	0x3fd55555
 800dbb0:	db6fabff 	.word	0xdb6fabff
 800dbb4:	3fdb6db6 	.word	0x3fdb6db6
 800dbb8:	33333303 	.word	0x33333303
 800dbbc:	3fe33333 	.word	0x3fe33333
 800dbc0:	dc3a03fd 	.word	0xdc3a03fd
 800dbc4:	3feec709 	.word	0x3feec709
 800dbc8:	145b01f5 	.word	0x145b01f5
 800dbcc:	be3e2fe0 	.word	0xbe3e2fe0
 800dbd0:	e0000000 	.word	0xe0000000
 800dbd4:	3feec709 	.word	0x3feec709
 800dbd8:	652b82fe 	.word	0x652b82fe
 800dbdc:	3c971547 	.word	0x3c971547
 800dbe0:	fefa39ef 	.word	0xfefa39ef
 800dbe4:	3fe62e42 	.word	0x3fe62e42
 800dbe8:	0ca86c39 	.word	0x0ca86c39
 800dbec:	be205c61 	.word	0xbe205c61
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	3fe62e43 	.word	0x3fe62e43
 800dbf8:	72bea4d0 	.word	0x72bea4d0
 800dbfc:	3e663769 	.word	0x3e663769
 800dc00:	c5d26bf1 	.word	0xc5d26bf1
 800dc04:	bebbbd41 	.word	0xbebbbd41
 800dc08:	af25de2c 	.word	0xaf25de2c
 800dc0c:	3f11566a 	.word	0x3f11566a
 800dc10:	16bebd93 	.word	0x16bebd93
 800dc14:	bf66c16c 	.word	0xbf66c16c
 800dc18:	5555553e 	.word	0x5555553e
 800dc1c:	3fc55555 	.word	0x3fc55555
 800dc20:	c2f8f359 	.word	0xc2f8f359
 800dc24:	01a56e1f 	.word	0x01a56e1f
 800dc28:	0003988e 	.word	0x0003988e
 800dc2c:	000bb679 	.word	0x000bb679
 800dc30:	0800e3f0 	.word	0x0800e3f0
 800dc34:	0800e410 	.word	0x0800e410
 800dc38:	0800e400 	.word	0x0800e400
 800dc3c:	3fe00000 	.word	0x3fe00000
 800dc40:	000fffff 	.word	0x000fffff
 800dc44:	4090cbff 	.word	0x4090cbff
 800dc48:	3f6f3400 	.word	0x3f6f3400

0800dc4c <__ieee754_sqrt>:
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	ee10 3a90 	vmov	r3, s1
 800dc54:	4c4b      	ldr	r4, [pc, #300]	; (800dd84 <__ieee754_sqrt+0x138>)
 800dc56:	439c      	bics	r4, r3
 800dc58:	ee10 0a10 	vmov	r0, s0
 800dc5c:	ee10 2a90 	vmov	r2, s1
 800dc60:	ee10 1a10 	vmov	r1, s0
 800dc64:	d103      	bne.n	800dc6e <__ieee754_sqrt+0x22>
 800dc66:	eea0 0b00 	vfma.f64	d0, d0, d0
 800dc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dc0a      	bgt.n	800dc88 <__ieee754_sqrt+0x3c>
 800dc72:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dc76:	4320      	orrs	r0, r4
 800dc78:	d079      	beq.n	800dd6e <__ieee754_sqrt+0x122>
 800dc7a:	b12b      	cbz	r3, 800dc88 <__ieee754_sqrt+0x3c>
 800dc7c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dc80:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc88:	151b      	asrs	r3, r3, #20
 800dc8a:	d10c      	bne.n	800dca6 <__ieee754_sqrt+0x5a>
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	d070      	beq.n	800dd72 <__ieee754_sqrt+0x126>
 800dc90:	2000      	movs	r0, #0
 800dc92:	02d5      	lsls	r5, r2, #11
 800dc94:	d571      	bpl.n	800dd7a <__ieee754_sqrt+0x12e>
 800dc96:	1e44      	subs	r4, r0, #1
 800dc98:	1b1b      	subs	r3, r3, r4
 800dc9a:	f1c0 0420 	rsb	r4, r0, #32
 800dc9e:	fa21 f404 	lsr.w	r4, r1, r4
 800dca2:	4322      	orrs	r2, r4
 800dca4:	4081      	lsls	r1, r0
 800dca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dcaa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dcae:	07dc      	lsls	r4, r3, #31
 800dcb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dcb4:	bf42      	ittt	mi
 800dcb6:	0052      	lslmi	r2, r2, #1
 800dcb8:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800dcbc:	0049      	lslmi	r1, r1, #1
 800dcbe:	105c      	asrs	r4, r3, #1
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800dcc6:	441a      	add	r2, r3
 800dcc8:	0049      	lsls	r1, r1, #1
 800dcca:	2316      	movs	r3, #22
 800dccc:	4628      	mov	r0, r5
 800dcce:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dcd2:	1987      	adds	r7, r0, r6
 800dcd4:	4297      	cmp	r7, r2
 800dcd6:	bfde      	ittt	le
 800dcd8:	1bd2      	suble	r2, r2, r7
 800dcda:	19b8      	addle	r0, r7, r6
 800dcdc:	19ad      	addle	r5, r5, r6
 800dcde:	0052      	lsls	r2, r2, #1
 800dce0:	3b01      	subs	r3, #1
 800dce2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dce6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dcea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dcee:	d1f0      	bne.n	800dcd2 <__ieee754_sqrt+0x86>
 800dcf0:	f04f 0e20 	mov.w	lr, #32
 800dcf4:	469c      	mov	ip, r3
 800dcf6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dcfa:	4282      	cmp	r2, r0
 800dcfc:	eb06 070c 	add.w	r7, r6, ip
 800dd00:	dc02      	bgt.n	800dd08 <__ieee754_sqrt+0xbc>
 800dd02:	d112      	bne.n	800dd2a <__ieee754_sqrt+0xde>
 800dd04:	428f      	cmp	r7, r1
 800dd06:	d810      	bhi.n	800dd2a <__ieee754_sqrt+0xde>
 800dd08:	2f00      	cmp	r7, #0
 800dd0a:	eb07 0c06 	add.w	ip, r7, r6
 800dd0e:	da37      	bge.n	800dd80 <__ieee754_sqrt+0x134>
 800dd10:	f1bc 0f00 	cmp.w	ip, #0
 800dd14:	db34      	blt.n	800dd80 <__ieee754_sqrt+0x134>
 800dd16:	f100 0801 	add.w	r8, r0, #1
 800dd1a:	1a12      	subs	r2, r2, r0
 800dd1c:	428f      	cmp	r7, r1
 800dd1e:	bf88      	it	hi
 800dd20:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dd24:	1bc9      	subs	r1, r1, r7
 800dd26:	4433      	add	r3, r6
 800dd28:	4640      	mov	r0, r8
 800dd2a:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800dd2e:	f1be 0e01 	subs.w	lr, lr, #1
 800dd32:	443a      	add	r2, r7
 800dd34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dd3c:	d1dd      	bne.n	800dcfa <__ieee754_sqrt+0xae>
 800dd3e:	430a      	orrs	r2, r1
 800dd40:	d006      	beq.n	800dd50 <__ieee754_sqrt+0x104>
 800dd42:	1c58      	adds	r0, r3, #1
 800dd44:	bf13      	iteet	ne
 800dd46:	3301      	addne	r3, #1
 800dd48:	3501      	addeq	r5, #1
 800dd4a:	4673      	moveq	r3, lr
 800dd4c:	f023 0301 	bicne.w	r3, r3, #1
 800dd50:	106a      	asrs	r2, r5, #1
 800dd52:	085b      	lsrs	r3, r3, #1
 800dd54:	07e9      	lsls	r1, r5, #31
 800dd56:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dd5a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dd5e:	bf48      	it	mi
 800dd60:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dd64:	eb02 5104 	add.w	r1, r2, r4, lsl #20
 800dd68:	4618      	mov	r0, r3
 800dd6a:	ec41 0b10 	vmov	d0, r0, r1
 800dd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd72:	0aca      	lsrs	r2, r1, #11
 800dd74:	3b15      	subs	r3, #21
 800dd76:	0549      	lsls	r1, r1, #21
 800dd78:	e788      	b.n	800dc8c <__ieee754_sqrt+0x40>
 800dd7a:	0052      	lsls	r2, r2, #1
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	e788      	b.n	800dc92 <__ieee754_sqrt+0x46>
 800dd80:	4680      	mov	r8, r0
 800dd82:	e7ca      	b.n	800dd1a <__ieee754_sqrt+0xce>
 800dd84:	7ff00000 	.word	0x7ff00000

0800dd88 <fabs>:
 800dd88:	ec53 2b10 	vmov	r2, r3, d0
 800dd8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd90:	ec43 2b10 	vmov	d0, r2, r3
 800dd94:	4770      	bx	lr

0800dd96 <finite>:
 800dd96:	ee10 3a90 	vmov	r3, s1
 800dd9a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800dd9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dda2:	0fc0      	lsrs	r0, r0, #31
 800dda4:	4770      	bx	lr

0800dda6 <matherr>:
 800dda6:	2000      	movs	r0, #0
 800dda8:	4770      	bx	lr
 800ddaa:	0000      	movs	r0, r0
 800ddac:	0000      	movs	r0, r0
	...

0800ddb0 <nan>:
 800ddb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ddb8 <nan+0x8>
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	7ff80000 	.word	0x7ff80000

0800ddc0 <rint>:
 800ddc0:	b530      	push	{r4, r5, lr}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	ed8d 0b00 	vstr	d0, [sp]
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	9d00      	ldr	r5, [sp, #0]
 800ddcc:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800ddd0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800ddd4:	2813      	cmp	r0, #19
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800dddc:	dc5a      	bgt.n	800de94 <rint+0xd4>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	da2f      	bge.n	800de42 <rint+0x82>
 800dde2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dde6:	432a      	orrs	r2, r5
 800dde8:	d027      	beq.n	800de3a <rint+0x7a>
 800ddea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ddee:	4315      	orrs	r5, r2
 800ddf0:	426a      	negs	r2, r5
 800ddf2:	432a      	orrs	r2, r5
 800ddf4:	0b12      	lsrs	r2, r2, #12
 800ddf6:	0c5b      	lsrs	r3, r3, #17
 800ddf8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800ddfc:	045b      	lsls	r3, r3, #17
 800ddfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de02:	ea42 0103 	orr.w	r1, r2, r3
 800de06:	4b32      	ldr	r3, [pc, #200]	; (800ded0 <rint+0x110>)
 800de08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de0c:	ed93 6b00 	vldr	d6, [r3]
 800de10:	ec41 0b17 	vmov	d7, r0, r1
 800de14:	ee37 7b06 	vadd.f64	d7, d7, d6
 800de18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de20:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de24:	ed8d 7b00 	vstr	d7, [sp]
 800de28:	9901      	ldr	r1, [sp, #4]
 800de2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de32:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 800de36:	e9cd 2300 	strd	r2, r3, [sp]
 800de3a:	ed9d 0b00 	vldr	d0, [sp]
 800de3e:	b005      	add	sp, #20
 800de40:	bd30      	pop	{r4, r5, pc}
 800de42:	4924      	ldr	r1, [pc, #144]	; (800ded4 <rint+0x114>)
 800de44:	4101      	asrs	r1, r0
 800de46:	ea03 0501 	and.w	r5, r3, r1
 800de4a:	4315      	orrs	r5, r2
 800de4c:	d0f5      	beq.n	800de3a <rint+0x7a>
 800de4e:	0849      	lsrs	r1, r1, #1
 800de50:	ea03 0501 	and.w	r5, r3, r1
 800de54:	432a      	orrs	r2, r5
 800de56:	d00b      	beq.n	800de70 <rint+0xb0>
 800de58:	ea23 0101 	bic.w	r1, r3, r1
 800de5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de60:	2813      	cmp	r0, #19
 800de62:	fa43 f300 	asr.w	r3, r3, r0
 800de66:	bf0c      	ite	eq
 800de68:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800de6c:	2200      	movne	r2, #0
 800de6e:	430b      	orrs	r3, r1
 800de70:	4619      	mov	r1, r3
 800de72:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <rint+0x110>)
 800de74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800de78:	ed94 6b00 	vldr	d6, [r4]
 800de7c:	4610      	mov	r0, r2
 800de7e:	ec41 0b17 	vmov	d7, r0, r1
 800de82:	ee37 7b06 	vadd.f64	d7, d7, d6
 800de86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de92:	e008      	b.n	800dea6 <rint+0xe6>
 800de94:	2833      	cmp	r0, #51	; 0x33
 800de96:	dd09      	ble.n	800deac <rint+0xec>
 800de98:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800de9c:	d1cd      	bne.n	800de3a <rint+0x7a>
 800de9e:	ed9d 7b00 	vldr	d7, [sp]
 800dea2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dea6:	ed8d 7b00 	vstr	d7, [sp]
 800deaa:	e7c6      	b.n	800de3a <rint+0x7a>
 800deac:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800deb0:	f04f 31ff 	mov.w	r1, #4294967295
 800deb4:	40c1      	lsrs	r1, r0
 800deb6:	420d      	tst	r5, r1
 800deb8:	d0bf      	beq.n	800de3a <rint+0x7a>
 800deba:	0849      	lsrs	r1, r1, #1
 800debc:	420d      	tst	r5, r1
 800debe:	bf1f      	itttt	ne
 800dec0:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800dec4:	ea25 0101 	bicne.w	r1, r5, r1
 800dec8:	4102      	asrne	r2, r0
 800deca:	430a      	orrne	r2, r1
 800decc:	e7d0      	b.n	800de70 <rint+0xb0>
 800dece:	bf00      	nop
 800ded0:	0800e420 	.word	0x0800e420
 800ded4:	000fffff 	.word	0x000fffff

0800ded8 <scalbn>:
 800ded8:	b500      	push	{lr}
 800deda:	ed2d 8b02 	vpush	{d8}
 800dede:	b083      	sub	sp, #12
 800dee0:	ed8d 0b00 	vstr	d0, [sp]
 800dee4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800dee8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800deec:	b9a2      	cbnz	r2, 800df18 <scalbn+0x40>
 800deee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800def2:	430b      	orrs	r3, r1
 800def4:	d03a      	beq.n	800df6c <scalbn+0x94>
 800def6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800dfb0 <scalbn+0xd8>
 800defa:	4a35      	ldr	r2, [pc, #212]	; (800dfd0 <scalbn+0xf8>)
 800defc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800df00:	4290      	cmp	r0, r2
 800df02:	ed8d 7b00 	vstr	d7, [sp]
 800df06:	9b01      	ldr	r3, [sp, #4]
 800df08:	da11      	bge.n	800df2e <scalbn+0x56>
 800df0a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800dfb8 <scalbn+0xe0>
 800df0e:	ed9d 6b00 	vldr	d6, [sp]
 800df12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df16:	e007      	b.n	800df28 <scalbn+0x50>
 800df18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800df1c:	428a      	cmp	r2, r1
 800df1e:	d109      	bne.n	800df34 <scalbn+0x5c>
 800df20:	ed9d 7b00 	vldr	d7, [sp]
 800df24:	ee37 7b07 	vadd.f64	d7, d7, d7
 800df28:	ed8d 7b00 	vstr	d7, [sp]
 800df2c:	e01e      	b.n	800df6c <scalbn+0x94>
 800df2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df32:	3a36      	subs	r2, #54	; 0x36
 800df34:	4402      	add	r2, r0
 800df36:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df3a:	428a      	cmp	r2, r1
 800df3c:	dd0a      	ble.n	800df54 <scalbn+0x7c>
 800df3e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800dfc0 <scalbn+0xe8>
 800df42:	eeb0 0b48 	vmov.f64	d0, d8
 800df46:	ed9d 1b00 	vldr	d1, [sp]
 800df4a:	f000 f843 	bl	800dfd4 <copysign>
 800df4e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800df52:	e7e9      	b.n	800df28 <scalbn+0x50>
 800df54:	2a00      	cmp	r2, #0
 800df56:	dd10      	ble.n	800df7a <scalbn+0xa2>
 800df58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df64:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df68:	e9cd 0100 	strd	r0, r1, [sp]
 800df6c:	ed9d 0b00 	vldr	d0, [sp]
 800df70:	b003      	add	sp, #12
 800df72:	ecbd 8b02 	vpop	{d8}
 800df76:	f85d fb04 	ldr.w	pc, [sp], #4
 800df7a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df7e:	da06      	bge.n	800df8e <scalbn+0xb6>
 800df80:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df84:	4298      	cmp	r0, r3
 800df86:	dcda      	bgt.n	800df3e <scalbn+0x66>
 800df88:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800dfb8 <scalbn+0xe0>
 800df8c:	e7d9      	b.n	800df42 <scalbn+0x6a>
 800df8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df96:	3236      	adds	r2, #54	; 0x36
 800df98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfa0:	ec41 0b17 	vmov	d7, r0, r1
 800dfa4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800dfc8 <scalbn+0xf0>
 800dfa8:	e7b3      	b.n	800df12 <scalbn+0x3a>
 800dfaa:	bf00      	nop
 800dfac:	f3af 8000 	nop.w
 800dfb0:	00000000 	.word	0x00000000
 800dfb4:	43500000 	.word	0x43500000
 800dfb8:	c2f8f359 	.word	0xc2f8f359
 800dfbc:	01a56e1f 	.word	0x01a56e1f
 800dfc0:	8800759c 	.word	0x8800759c
 800dfc4:	7e37e43c 	.word	0x7e37e43c
 800dfc8:	00000000 	.word	0x00000000
 800dfcc:	3c900000 	.word	0x3c900000
 800dfd0:	ffff3cb0 	.word	0xffff3cb0

0800dfd4 <copysign>:
 800dfd4:	ec53 2b10 	vmov	r2, r3, d0
 800dfd8:	ee11 0a90 	vmov	r0, s3
 800dfdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dfe0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dfe4:	ea41 0300 	orr.w	r3, r1, r0
 800dfe8:	ec43 2b10 	vmov	d0, r2, r3
 800dfec:	4770      	bx	lr
	...

0800dff0 <__errno>:
 800dff0:	4b01      	ldr	r3, [pc, #4]	; (800dff8 <__errno+0x8>)
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	2000003c 	.word	0x2000003c

0800dffc <_close>:
 800dffc:	4b02      	ldr	r3, [pc, #8]	; (800e008 <_close+0xc>)
 800dffe:	2258      	movs	r2, #88	; 0x58
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	f04f 30ff 	mov.w	r0, #4294967295
 800e006:	4770      	bx	lr
 800e008:	20000b30 	.word	0x20000b30

0800e00c <_fstat>:
 800e00c:	4b02      	ldr	r3, [pc, #8]	; (800e018 <_fstat+0xc>)
 800e00e:	2258      	movs	r2, #88	; 0x58
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	f04f 30ff 	mov.w	r0, #4294967295
 800e016:	4770      	bx	lr
 800e018:	20000b30 	.word	0x20000b30

0800e01c <_isatty>:
 800e01c:	4b02      	ldr	r3, [pc, #8]	; (800e028 <_isatty+0xc>)
 800e01e:	2258      	movs	r2, #88	; 0x58
 800e020:	601a      	str	r2, [r3, #0]
 800e022:	2000      	movs	r0, #0
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	20000b30 	.word	0x20000b30

0800e02c <_lseek>:
 800e02c:	4b02      	ldr	r3, [pc, #8]	; (800e038 <_lseek+0xc>)
 800e02e:	2258      	movs	r2, #88	; 0x58
 800e030:	601a      	str	r2, [r3, #0]
 800e032:	f04f 30ff 	mov.w	r0, #4294967295
 800e036:	4770      	bx	lr
 800e038:	20000b30 	.word	0x20000b30

0800e03c <_read>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	; (800e048 <_read+0xc>)
 800e03e:	2258      	movs	r2, #88	; 0x58
 800e040:	601a      	str	r2, [r3, #0]
 800e042:	f04f 30ff 	mov.w	r0, #4294967295
 800e046:	4770      	bx	lr
 800e048:	20000b30 	.word	0x20000b30

0800e04c <_sbrk>:
 800e04c:	4b04      	ldr	r3, [pc, #16]	; (800e060 <_sbrk+0x14>)
 800e04e:	6819      	ldr	r1, [r3, #0]
 800e050:	4602      	mov	r2, r0
 800e052:	b909      	cbnz	r1, 800e058 <_sbrk+0xc>
 800e054:	4903      	ldr	r1, [pc, #12]	; (800e064 <_sbrk+0x18>)
 800e056:	6019      	str	r1, [r3, #0]
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	4402      	add	r2, r0
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	4770      	bx	lr
 800e060:	20000244 	.word	0x20000244
 800e064:	20000b34 	.word	0x20000b34

0800e068 <_write>:
 800e068:	4b02      	ldr	r3, [pc, #8]	; (800e074 <_write+0xc>)
 800e06a:	2258      	movs	r2, #88	; 0x58
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295
 800e072:	4770      	bx	lr
 800e074:	20000b30 	.word	0x20000b30

0800e078 <_init>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	bf00      	nop
 800e07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07e:	bc08      	pop	{r3}
 800e080:	469e      	mov	lr, r3
 800e082:	4770      	bx	lr

0800e084 <_fini>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	bf00      	nop
 800e088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08a:	bc08      	pop	{r3}
 800e08c:	469e      	mov	lr, r3
 800e08e:	4770      	bx	lr
